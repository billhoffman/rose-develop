#line 2 "/home/hoffman/rose-develop/b/src/frontend/SageIII/lex.yy.C"

#line 4 "/home/hoffman/rose-develop/b/src/frontend/SageIII/lex.yy.C"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define yy_create_buffer Rose_C_Cxx__create_buffer
#define yy_delete_buffer Rose_C_Cxx__delete_buffer
#define yy_flex_debug Rose_C_Cxx__flex_debug
#define yy_init_buffer Rose_C_Cxx__init_buffer
#define yy_flush_buffer Rose_C_Cxx__flush_buffer
#define yy_load_buffer_state Rose_C_Cxx__load_buffer_state
#define yy_switch_to_buffer Rose_C_Cxx__switch_to_buffer
#define yyin Rose_C_Cxx_in
#define yyleng Rose_C_Cxx_leng
#define yylex Rose_C_Cxx_lex
#define yylineno Rose_C_Cxx_lineno
#define yyout Rose_C_Cxx_out
#define yyrestart Rose_C_Cxx_restart
#define yytext Rose_C_Cxx_text
#define yywrap Rose_C_Cxx_wrap
#define yyalloc Rose_C_Cxx_alloc
#define yyrealloc Rose_C_Cxx_realloc
#define yyfree Rose_C_Cxx_free

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE Rose_C_Cxx_restart(Rose_C_Cxx_in  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

extern int Rose_C_Cxx_leng;

extern FILE *Rose_C_Cxx_in, *Rose_C_Cxx_out;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up Rose_C_Cxx_text. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up Rose_C_Cxx_text again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via Rose_C_Cxx_restart()), so that the user can continue scanning by
	 * just pointing Rose_C_Cxx_in at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when Rose_C_Cxx_text is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int Rose_C_Cxx_leng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow Rose_C_Cxx_wrap()'s to do buffer switches
 * instead of setting up a fresh Rose_C_Cxx_in.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void Rose_C_Cxx_restart (FILE *input_file  );
void Rose_C_Cxx__switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE Rose_C_Cxx__create_buffer (FILE *file,int size  );
void Rose_C_Cxx__delete_buffer (YY_BUFFER_STATE b  );
void Rose_C_Cxx__flush_buffer (YY_BUFFER_STATE b  );
void Rose_C_Cxx_push_buffer_state (YY_BUFFER_STATE new_buffer  );
void Rose_C_Cxx_pop_buffer_state (void );

static void Rose_C_Cxx_ensure_buffer_stack (void );
static void Rose_C_Cxx__load_buffer_state (void );
static void Rose_C_Cxx__init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER Rose_C_Cxx__flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE Rose_C_Cxx__scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE Rose_C_Cxx__scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE Rose_C_Cxx__scan_bytes (yyconst char *bytes,int len  );

void *Rose_C_Cxx_alloc (yy_size_t  );
void *Rose_C_Cxx_realloc (void *,yy_size_t  );
void Rose_C_Cxx_free (void *  );

#define yy_new_buffer Rose_C_Cxx__create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        Rose_C_Cxx_ensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            Rose_C_Cxx__create_buffer(Rose_C_Cxx_in,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        Rose_C_Cxx_ensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            Rose_C_Cxx__create_buffer(Rose_C_Cxx_in,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define Rose_C_Cxx_wrap(n) 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

FILE *Rose_C_Cxx_in = (FILE *) 0, *Rose_C_Cxx_out = (FILE *) 0;

typedef int yy_state_type;

extern int Rose_C_Cxx_lineno;

int Rose_C_Cxx_lineno = 1;

extern char *Rose_C_Cxx_text;
#define yytext_ptr Rose_C_Cxx_text

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
static void yy_fatal_error (yyconst char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up Rose_C_Cxx_text.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	Rose_C_Cxx_leng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 85
#define YY_END_OF_BUFFER 86
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[187] =
    {   0,
        0,    0,   32,   32,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   86,   85,   55,   35,
       52,   17,   53,   31,   10,   13,   54,    4,    5,   15,
       28,    7,   27,    9,   16,   32,    8,    6,   33,   26,
       34,   14,   36,   29,   30,   11,    2,   18,    3,   12,
       35,   31,   36,   70,   73,   85,   76,   74,   76,   67,
       68,   85,   69,   85,   59,   61,   85,   62,   85,   81,
       79,   81,   81,   84,   83,   84,   35,   22,   19,   20,
       21,   38,   37,   32,   24,   25,   36,   23,   35,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   36,

       71,   72,   75,   66,   65,   64,   65,   60,   58,   57,
       58,   80,   78,    0,   82,    0,    0,    0,    0,    0,
       44,    0,    0,    0,    0,    0,   36,   63,   56,   77,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,   36,    0,    0,   47,   48,    0,    0,
        0,    0,    0,   42,    0,    0,    0,   36,    0,    0,
       49,   43,   45,    0,    0,    0,   41,    0,   36,    0,
       40,   46,    0,   51,    0,    0,    0,   39,   50,    0,
        0,    0,    0,    1,    0,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        4,    4,    5,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    6,    7,    8,    1,    9,   10,   11,   12,
       13,   14,   15,   16,   17,   18,   19,   20,   20,   20,
       20,   20,   20,   20,   20,   20,   20,   21,   22,   23,
       24,   25,   26,    1,   27,   27,   28,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       29,   30,   31,   32,   27,    1,   33,   27,   34,   35,

       36,   37,   38,   27,   39,   27,   27,   40,   41,   42,
       43,   44,   27,   45,   46,   47,   48,   27,   49,   50,
       27,   27,   51,   52,   53,   54,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[55] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    2,
        1,    1,    1,    1,    1,    1,    2,    2,    1,    1,
        1,    1,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        1,    1,    1,    1
    } ;

static yyconst flex_int16_t yy_base[198] =
    {   0,
        0,    0,    0,   53,   53,   54,   55,   56,   57,   60,
       63,   68,   69,   72,   78,   82,  252,  253,  253,  249,
      253,  226,  253,  253,  253,  253,  253,  253,  253,  253,
      234,  253,   61,  253,   63,  228,  253,  253,  223,  253,
      222,  253,    0,  253,  253,  253,  253,  200,  253,  253,
       92,   74,  173,  253,  253,  219,  253,  253,  201,  253,
      253,  216,  253,   92,  253,  253,  215,  253,   98,  253,
      253,  203,  101,  253,  253,  197,  213,  253,  253,  253,
      253,  253,  253,  194,  253,  253,    0,  253,  103,  105,
      163,  122,  176,   75,   79,  172,  165,  167,  175,  160,

      253,  253,  253,  253,  253,  253,  203,  253,  253,  253,
      202,  253,  253,  201,  253,  156,  165,   73,  166,  155,
       90,  165,  156,  164,  161,  150,  158,  253,  253,  253,
      157,  153,  154,  154,  150,  145,  151,  151,  145,  148,
      145,  146,  139,  135,  124,  126,  253,  253,  130,  120,
      127,  127,  112,  253,  118,  119,  116,  110,  109,  114,
      253,  253,  253,  111,  112,  110,  253,  100,  124,  127,
      253,  253,  101,  253,   98,  128,  105,  253,  253,  131,
      170,  112,  174,  253,  101,  253,  225,  227,  229,  231,
      233,  235,  237,   78,  239,  241,  243

    } ;

static yyconst flex_int16_t yy_def[198] =
    {   0,
      187,  187,  186,    3,  188,  188,  189,  189,  190,  190,
      191,  191,  192,  192,  193,  193,  186,  186,  186,  186,
      186,  186,  186,  186,  186,  186,  186,  186,  186,  186,
      186,  186,  186,  186,  186,  186,  186,  186,  186,  186,
      186,  186,  194,  186,  186,  186,  186,  186,  186,  186,
      186,  186,  194,  186,  186,  195,  186,  186,  186,  186,
      186,  186,  186,  196,  186,  186,  186,  186,  197,  186,
      186,  186,  186,  186,  186,  186,  186,  186,  186,  186,
      186,  186,  186,  186,  186,  186,  194,  186,  186,  186,
      186,  186,  186,  186,  186,  186,  186,  186,  186,  194,

      186,  186,  186,  186,  186,  186,  186,  186,  186,  186,
      186,  186,  186,  186,  186,  186,  186,  186,  186,  186,
      186,  186,  186,  186,  186,  186,  194,  186,  186,  186,
      186,  186,  186,  186,  186,  186,  186,  186,  186,  186,
      186,  186,  186,  194,  186,  186,  186,  186,  186,  186,
      186,  186,  186,  186,  186,  186,  186,  194,  186,  186,
      186,  186,  186,  186,  186,  186,  186,  186,  194,  186,
      186,  186,  186,  186,  186,  186,  186,  186,  186,  186,
      186,  186,  186,  186,  186,    0,  186,  186,  186,  186,
      186,  186,  186,  186,  186,  186,  186

    } ;

static yyconst flex_int16_t yy_nxt[308] =
    {   0,
       19,   20,   21,   19,   19,   22,   23,   24,   25,   26,
       27,   28,   29,   30,   31,   32,   33,   34,   35,   36,
       37,   38,   39,   40,   41,   42,   43,   43,   44,   19,
       45,   46,   43,   43,   43,   43,   43,   43,   43,   43,
       43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
       47,   48,   49,   50,   51,   55,   55,   58,   58,   61,
       52,   62,   61,   63,   62,   66,   63,   67,   59,   59,
       66,   71,   67,   68,   71,   92,   82,   80,   68,   87,
       75,   83,   56,   56,   75,   81,   64,   72,   53,   64,
       72,   76,   69,   89,  106,   76,  107,   69,   73,   90,

      110,   73,  111,  113,   89,  114,   92,  181,   93,   94,
       90,  133,   95,   96,  118,  121,  119,   97,  134,  120,
      122,   98,   99,   92,  137,  176,  185,   91,  176,  176,
      177,  138,  180,  177,  177,  179,  178,  181,   91,   93,
       94,  175,  174,   95,   96,  182,  173,  172,   97,  171,
      170,  169,   98,   99,  168,  167,   93,   94,  166,  165,
       95,   96,  164,  163,  162,   97,  161,  160,  159,   98,
       99,  183,  183,  183,  183,  183,  183,  183,  183,  158,
      157,  156,  155,  154,  153,  152,  151,  150,  149,  148,
      147,  146,  145,  144,  143,  142,  141,  140,  139,  136,

      135,  132,  131,  130,  129,  128,  127,  126,  125,  124,
      123,  117,  116,   84,   77,  115,  112,  108,  104,  103,
      184,  102,  100,   88,  184,   18,   18,   54,   54,   57,
       57,   60,   60,   65,   65,   70,   70,   74,   74,  101,
      101,  105,  105,  109,  109,   86,   85,   84,   79,   78,
       77,  186,   17,  186,  186,  186,  186,  186,  186,  186,
      186,  186,  186,  186,  186,  186,  186,  186,  186,  186,
      186,  186,  186,  186,  186,  186,  186,  186,  186,  186,
      186,  186,  186,  186,  186,  186,  186,  186,  186,  186,
      186,  186,  186,  186,  186,  186,  186,  186,  186,  186,

      186,  186,  186,  186,  186,  186,  186
    } ;

static yyconst flex_int16_t yy_chk[308] =
    {   0,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    4,    5,    6,    7,    8,    9,
        4,    9,   10,    9,   10,   11,   10,   11,    7,    8,
       12,   13,   12,   11,   14,   52,   35,   33,   12,  194,
       15,   35,    5,    6,   16,   33,    9,   13,    4,   10,
       14,   15,   11,   51,   64,   16,   64,   12,   13,   51,

       69,   14,   69,   73,   89,   73,   90,  185,   52,   52,
       89,  118,   52,   52,   94,   95,   94,   52,  118,   94,
       95,   52,   52,   92,  121,  169,  182,   51,  170,  176,
      169,  121,  177,  170,  176,  175,  173,  180,   89,   90,
       90,  168,  166,   90,   90,  180,  165,  164,   90,  160,
      159,  158,   90,   90,  157,  156,   92,   92,  155,  153,
       92,   92,  152,  151,  150,   92,  149,  146,  145,   92,
       92,  181,  181,  181,  181,  183,  183,  183,  183,  144,
      143,  142,  141,  140,  139,  138,  137,  136,  135,  134,
      133,  132,  131,  127,  126,  125,  124,  123,  122,  120,

      119,  117,  116,  114,  111,  107,  100,   99,   98,   97,
       96,   93,   91,   84,   77,   76,   72,   67,   62,   59,
      181,   56,   53,   48,  183,  187,  187,  188,  188,  189,
      189,  190,  190,  191,  191,  192,  192,  193,  193,  195,
      195,  196,  196,  197,  197,   41,   39,   36,   31,   22,
       20,   17,  186,  186,  186,  186,  186,  186,  186,  186,
      186,  186,  186,  186,  186,  186,  186,  186,  186,  186,
      186,  186,  186,  186,  186,  186,  186,  186,  186,  186,
      186,  186,  186,  186,  186,  186,  186,  186,  186,  186,
      186,  186,  186,  186,  186,  186,  186,  186,  186,  186,

      186,  186,  186,  186,  186,  186,  186
    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int Rose_C_Cxx__flex_debug;
int Rose_C_Cxx__flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *Rose_C_Cxx_text;
#line 1 "/home/hoffman/rose-develop/src/frontend/SageIII/preproc-c.ll"
#line 5 "/home/hoffman/rose-develop/src/frontend/SageIII/preproc-c.ll"
/* 
    preproc.lex: This lexer currently recognizes C style comments, C++ style 
    comments, preprocessor directives, and c/c++ linkage specifications.  
    line/column/text information for each recognized directive is stored in 
    ROSEAttributesList.  This information is used by the unparser.
*/

/*
-------------------------------------------------------------------------------------
Originally written and modified by Markus Schordan and Dan Quinlan.
(see ChangeLog).

08-05-2006: Rewritten significantly by Ramakrishna Upadrasta.
Reason: For supporting additional features and bug-fixing (see summary below).
Note: The old preproc.lex is available in the same directory as preproc.original.lex
------------------------------------------------------------------------------------
*/
//Ramakrishna Upadrasta
//01-12-07: This is only version 0 of this file


/*
Summary of the changes:
=========================================================================================
    The regular expressions (and the action code) for C++ comments and 
    C style comments has been cleaned up and are (hopefully:) upto the standard.
=========================================================================================
    Naming of variables: 
        changed the lex variable names (states/start conditions) so that 
            CXX_COMMENT to corresponds to C++ style comments (beginning with //) and 
            C_COMMENT to correspond to C-style comments (enclosed by / * and * / ).
        Earlier they were
            C_COMMENT corresponded to C++ style comments
            CPP_COMMENT corresponded to C-style comments.
        It was felt that the names were confusing.
        The other choice was to name the C-style comments as C_COMMENT and C++ style 
        comments as CPP_COMMENT as in Wave. That was also found to be confusing, as CPP usually 
        means C Pre Processor). The new terminology is (partly) taken from makefiles which 
        allows 3 types of flags (C_FLAGS/CPP_FLAGS/CXX_FLAGS).

=========================================================================================
        Use STL types for instead of fixed size buffers for the following data structures
        commentString, macroString and bracestack.  (earlier they were 
                char commentString[10000000] for comments 
                char macroString[10000000] for macro strings
                and char bracestack[500] for matching of braces)
=========================================================================================
    Exact Position information for literals
        The previous method to get the position information from EDG is incorrect in 
        most of the cases. A second scan (like this lexer does) of the input was thought 
        to be necessary to attach additional info.
=========================================================================================
    Support for char literals
        including the '\e' '\U' which would be part of 2008 standard
        refer to ???? for details
=========================================================================================
    Semi colons
        We have to ensure that semi colons for that donot actually end 
        statements are taken care of carefully.
        class A {
        f(); <-- this semi colon should be taken care of carefully.
        }
=========================================================================================
    Double colons (::'s)
        They can only occur in  .........
        we identify them with 
=========================================================================================
trigraphs
    
=========================================================================================
    backslashes followed by newlines
        Either inside or outside of comments
=========================================================================================
    Whitespace info:
        The 

=========================================================================================
    Line number information:
        A better line count

=========================================================================================
    Trigraphs/Digraphs
=========================================================================================
    Proper identification and matching of different varieties of brackets
        Parenthesis ()
        Curly braces {}: The support for this existed earlier
        Square brackets []
=========================================================================================
    Support for keywords
        C++
        C
        C99
        C++Ox 
            Ones only in 
=========================================================================================
    To be done in CHAR literals
        wierd char literals
        testing for octal and hex char literals
        testing for backslashes in char literals.
    To be done in INT literals
        testing for 
=========================================================================================
    Limitations/open questions: 
        This lexer does not handle lots of important cases, like 
                character literals etc.  
                Trigraph sequences, alternative tokens (lex.trigraph and lex.digraph of the standard).  
                hexadecimal floating point literals and similar arcane stuff 
                        (HOW DOES EDG handle them? How does Wave handle them?)
    The user should probably use the wave workaround (does it support these?????), if she needs such things.
=========================================================================================
    Use of standard variable names like ([:space:] and [:blank:]) that come with FLEX. 
    Read the flex http://www.gnu.org/software/flex/manual/ for details. They work like C functions
    isspace and isblank respectively.
=========================================================================================
=========================================================================================
    A ROSE-sequence point in the original program is a position in the input program where 
    synchronization of the AST happens with the input program. For now, the sequence points
    are specific lexical tokens in the input program. In specific, they are 
        parenthesis: () 
        curly braces: {} 
        semi colons: ;
        new lines: \n
    The possible are contenders for being sequence points
        keywords???


    Sequence points of the program so that exact code generation is done
        If the code is not transformed? we synchronize the code generation
        If the code is transformed, we synchronize the code generation immediately after the next sequence point.

    An extension to the above token/character based sequence-points is to use parsing-constructs in the
    the grammar of the source language, like
        end of statement-sequence
        end of function/class/namespace definition
=========================================================================================
    ellipsis????

=========================================================================================
=========================================================================================
=========================================================================================
Notes about coding style:
    There is a unsaid tradition of separating the patterns and the actions in LEX files by tabs.
    I am using that, though Dan prefers that whitespace be used for indentation.
*/

/*
Test cases these (atleast fix) and effect:
    test2005_170.C about the buffer size of (C and C++ style) comments.
    test2001_18.C (and its related files: test2001_18A.h and test2001_18B.h): which is about the includes having code segments??????????????
    test2006_15.C: which is about the handling of the character literals.  
    test2005_184.C: which is about handling of backslashes at the end of C++ style comments
-------------------
    test2005_131.C
The ones that have singlequotes in a IF(0) and were earlier preprocessed silently, but are being flagged (incorrectly??) because we identify character literrals
Cxx tests
    test2004_154.C
    test2005_178.C
    test2005_191.C
    test2005_194.C
    test2005_196.C
    test2005_198.C
    test2005_199.C
    test2006_16.C
    test2006_17.C
    test2006_18.C
    test2006_26.C
-------------------------------------------------
write test cases so that 
    comments and preprocssor stuff etc.
    
*/
/*
       CHANGE LINES LIKE THIS TO ACCEPT std::string instead of char*, which makes us give it a c_str
                    preprocessorList.addElement(macrotype,macroString_str.c_str(),globalFileName,preproc_start_line_num,preproc_start_column_num,preproc_line_num-preproc_start_line_num); 
*/

#include "sage3basic.hhh"
#include <iostream>
#include <stdio.h>
#include <ctype.h>
#include <string>
#include <string.h>
#include <list>

/* DQ (1/21/2008): This now has a single definition in the header file: ROSE/src/frontend/SageIII/general_defs.h */
#include "general_token_defs.h"


#if 0
// DQ (1/21/2008): This definition is now redundent with what is in general_token_defs.h
struct token_element
{
    std::string token_lexeme;
    int token_id;
};
#endif

#if 0
// These are now defined in general_defs.h
//Ideally this should inherit from Sg_File_Info
//But for now, this will work
struct file_pos_info
{
    int line_num;
    int column_num;
};

struct stream_element
{ 
    struct token_element * p_tok_elem;
    struct file_pos_info beginning_fpi;
    struct file_pos_info ending_fpi;
};
#endif


using namespace std;

#define DEBUG_LEX_PASS 0

// list <stream_element*> ROSE_token_stream;
// typedef list <stream_element*>:: iterator SE_ITR;
LexTokenStreamTypePointer ROSE_token_stream_pointer = NULL;
typedef LexTokenStreamType::iterator SE_ITR;

struct file_pos_info curr_beginning;


//Rama
//#ifdef ROSE_TOKEN_IDENTIFIERS_H
//#define ROSE_TOKEN_IDENTIFIERS_H

#if 0
// These are now moved to general_token_defs.h.

namespace ROSE_token_ids
   {
   // whitespace token IDs
      enum whitespace
         {
           T_NOTKNOWN,
        // The following are non UNIX whitespace
         };

#if 0
    //I brazenly copied from the interface of WAVE for these enums
    enum ROSE_C_CXX_keywords
    {
        ROSE_ASM /* WAVE equivalent is T_ASM */
        ROSE_AUTO /* WAVE equivalent is T_AUTO */
        ROSE_BOOL /* WAVE equivalent is T_BOOL */
        ROSE_BREAK /* WAVE equivalent is T_BREAK */
        ROSE_CASE /* WAVE equivalent is T_CASE */
        ROSE_CATCH /* WAVE equivalent is T_CATCH */
        ROSE_CHAR /* WAVE equivalent is T_CHAR */
        ROSE_CLASS /* WAVE equivalent is T_CLASS */
        ROSE_CONST /* WAVE equivalent is T_CONST */
        ROSE_CONSTCAST /* WAVE equivalent is T_CONSTCAST */
        ROSE_CONTINUE /* WAVE equivalent is T_CONTINUE */
        ROSE_DEFAULT /* WAVE equivalent is T_DEFAULT */
        ROSE_DEFINED /* WAVE equivalent is T_DEFINED */
        ROSE_DELETE /* WAVE equivalent is T_DELETE */
        ROSE_DO /* WAVE equivalent is T_DO */
        ROSE_DOUBLE /* WAVE equivalent is T_DOUBLE */
        ROSE_DYNAMICCAST /* WAVE equivalent is T_DYNAMICCAST */
        ROSE_ELSE /* WAVE equivalent is T_ELSE */
        ROSE_ENUM /* WAVE equivalent is T_ENUM */
        ROSE_EXPLICIT /* WAVE equivalent is T_EXPLICIT */
        ROSE_EXPORT /* WAVE equivalent is T_EXPORT */
        ROSE_EXTERN /* WAVE equivalent is T_EXTERN */
        ROSE_FLOAT /* WAVE equivalent is T_FLOAT */
        ROSE_FOR /* WAVE equivalent is T_FOR */
        ROSE_FRIEND /* WAVE equivalent is T_FRIEND */
        ROSE_GOTO /* WAVE equivalent is T_GOTO */
        ROSE_IF /* WAVE equivalent is T_IF */
        ROSE_INLINE /* WAVE equivalent is T_INLINE */
        ROSE_INT /* WAVE equivalent is T_INT */
        ROSE_LONG /* WAVE equivalent is T_LONG */
        ROSE_MUTABLE /* WAVE equivalent is T_MUTABLE */
        ROSE_NAMESPACE /* WAVE equivalent is T_NAMESPACE */
        ROSE_NEW /* WAVE equivalent is T_NEW */
        ROSE_OPERATOR /* WAVE equivalent is T_OPERATOR */
        ROSE_PRIVATE /* WAVE equivalent is T_PRIVATE */
        ROSE_PROTECTED /* WAVE equivalent is T_PROTECTED */
        ROSE_PUBLIC /* WAVE equivalent is T_PUBLIC */
        ROSE_REGISTER /* WAVE equivalent is T_REGISTER */
        ROSE_REINTERPRETCAST /* WAVE equivalent is T_REINTERPRETCAST */
        ROSE_RETURN /* WAVE equivalent is T_RETURN */
        ROSE_SHORT /* WAVE equivalent is T_SHORT */
        ROSE_SIGNED /* WAVE equivalent is T_SIGNED */
        ROSE_SIZEOF /* WAVE equivalent is T_SIZEOF */
        ROSE_STATIC /* WAVE equivalent is T_STATIC */
        ROSE_STATICCAST /* WAVE equivalent is T_STATICCAST */
        ROSE_STRUCT /* WAVE equivalent is T_STRUCT */
        ROSE_SWITCH /* WAVE equivalent is T_SWITCH */
        ROSE_TEMPLATE /* WAVE equivalent is T_TEMPLATE */
        ROSE_THIS /* WAVE equivalent is T_THIS */
        ROSE_THROW /* WAVE equivalent is T_THROW */
        ROSE_TRY /* WAVE equivalent is T_TRY */
        ROSE_TYPEDEF /* WAVE equivalent is T_TYPEDEF */
        ROSE_TYPEID /* WAVE equivalent is T_TYPEID */
        ROSE_TYPENAME /* WAVE equivalent is T_TYPENAME */
        ROSE_UNION /* WAVE equivalent is T_UNION */
        ROSE_UNSIGNED /* WAVE equivalent is T_UNSIGNED */
        ROSE_USING /* WAVE equivalent is T_USING */
        ROSE_VIRTUAL /* WAVE equivalent is T_VIRTUAL */
        ROSE_VOID /* WAVE equivalent is T_VOID */
        ROSE_VOLATILE /* WAVE equivalent is T_VOLATILE */
        ROSE_WCHART /* WAVE equivalent is T_WCHART */
        ROSE_WHILE /* WAVE equivalent is T_WHILE */
    };
#endif

    enum ROSE_C_CXX_keywords 
    {
        C_CXX_ASM = 0 + 500,
        C_CXX_AUTO = 1 + 500,
        C_CXX_BOOL = 2 + 500,
        C_CXX_BREAK = 3 + 500,
        C_CXX_CASE = 4 + 500,
        C_CXX_CATCH = 5 + 500,
        C_CXX_CHAR = 6 + 500,
        C_CXX_CLASS = 7 + 500,
        C_CXX_CONST = 8 + 500,
        C_CXX_CONSTCAST = 9 + 500,
        C_CXX_CONTINUE = 10 + 500,
        C_CXX_DEFAULT = 11 + 500,
        C_CXX_DEFINED = 12 + 500,
        C_CXX_DELETE = 13 + 500,
        C_CXX_DO = 14 + 500,
        C_CXX_DOUBLE = 15 + 500,
        C_CXX_DYNAMICCAST = 16 + 500,
        C_CXX_ELSE = 17 + 500,
        C_CXX_ENUM = 18 + 500,
        C_CXX_EXPLICIT = 19 + 500,
        C_CXX_EXPORT = 20 + 500,
        C_CXX_EXTERN = 21 + 500,
        C_CXX_FALSE = 22 + 500,
        C_CXX_FLOAT = 23 + 500,
        C_CXX_FOR = 24 + 500,
        C_CXX_FRIEND = 25 + 500,
        C_CXX_GOTO = 26 + 500,
        C_CXX_IF = 27 + 500,
        C_CXX_INLINE = 28 + 500,
        C_CXX_INT = 29 + 500,
        C_CXX_LONG = 30 + 500,
        C_CXX_MUTABLE = 31 + 500,
        C_CXX_NAMESPACE = 32 + 500,
        C_CXX_NEW = 33 + 500,
        C_CXX_OPERATOR = 34 + 500,
        C_CXX_PRIVATE = 35 + 500,
        C_CXX_PROTECTED = 36 + 500,
        C_CXX_PUBLIC = 37 + 500,
        C_CXX_REGISTER = 38 + 500,
        C_CXX_REINTERPRETCAST = 39 + 500,
        C_CXX_RETURN = 40 + 500,
        C_CXX_SHORT = 41 + 500,
        C_CXX_SIGNED = 42 + 500,
        C_CXX_SIZEOF = 43 + 500,
        C_CXX_STATIC = 44 + 500,
        C_CXX_STATICCAST = 45 + 500,
        C_CXX_STRUCT = 46 + 500,
        C_CXX_SWITCH = 47 + 500,
        C_CXX_TEMPLATE = 48 + 500,
        C_CXX_THIS = 49 + 500,
        C_CXX_THROW = 50 + 500,
        C_CXX_TRY = 51 + 500,
        C_CXX_TRUE = 52 + 500,
        C_CXX_TYPEDEF = 53 + 500,
        C_CXX_TYPEID = 54 + 500,
        C_CXX_TYPENAME = 55 + 500,
        C_CXX_UNION = 56 + 500,
        C_CXX_UNSIGNED = 57 + 500,
        C_CXX_USING = 58 + 500,
        C_CXX_VIRTUAL = 59 + 500,
        C_CXX_VOID = 60 + 500,
        C_CXX_VOLATILE = 61 + 500,
        C_CXX_WCHART = 62 + 500,
        C_CXX_WHILE = 63 + 500
   };

      //the following are alternate tokens.
      //Refer to page 12 of C++ STD

enum ROSE_C_CXX_alternate_tok
    {
        C_CXX_LEFT_CURLY_ALT, // The <% which is the same as {
        C_CXX_RIGHT_CURLY_ALT, //The %> which is the same as }
        C_CXX_LEFT_SQUARE_ALT, //The <: which is the same as [
        C_CXX_RIGHT_SQUARE_ALT,//The :> which is the same as ]
        C_CXX_HASH_ALT, // The #
        C_CXX_HASH_HASH_ALT, // The 
        C_CXX_and_ALT, // The #
    };

enum ROSE_C_CXX_Additional_Info
   {
     C_CXX_COMMENTS           = 0 + 100000,
     C_CXX_STRING_LITERALS    = 1 + 100000,
     C_CXX_IDENTIFIER         = 2 + 100000,
     C_CXX_PREPROCESSING_INFO = 3 + 100000,
     C_CXX_UNIDENTIFIED_TOKEN = 4 + 100000,
  // DQ (10/12/2013): Added C_CXX_SYNTAX
     C_CXX_SYNTAX             = 5 + 100000,
     C_CXX_WHITESPACE         = 6 + 100000,
     C_CXX_ERROR              = 7 + 100000
   };

};
#endif

using namespace ROSE_token_ids;

token_element ROSE_C_CXX_keyword_map[] = 
   {
        {"asm",              C_CXX_ASM }, 
        {"auto",             C_CXX_AUTO },
        {"bool",             C_CXX_BOOL },
        {"break",            C_CXX_BREAK },
        {"case",             C_CXX_CASE },
        {"catch",            C_CXX_CATCH },
        {"char",             C_CXX_CHAR },
        {"class",            C_CXX_CLASS },
        {"const",            C_CXX_CONST },
        {"const_cast",       C_CXX_CONSTCAST },
        {"continue",         C_CXX_CONTINUE },
        {"default",          C_CXX_DEFAULT },
        //{"defined",        C_CXX_DEFINED },
        {"delete",           C_CXX_DELETE },
        {"do",               C_CXX_DO },
        {"double",           C_CXX_DOUBLE },
        {"dynamic_cast",     C_CXX_DYNAMICCAST },
        {"else",             C_CXX_ELSE },
        {"enum",             C_CXX_ENUM },
        {"explicit",         C_CXX_EXPLICIT },
        {"export",           C_CXX_EXPORT },
        {"extern",           C_CXX_EXTERN },
        {"false",            C_CXX_FALSE },
        {"float",            C_CXX_FLOAT },
        {"for",              C_CXX_FOR },
        {"friend",           C_CXX_FRIEND },
        {"goto",             C_CXX_GOTO },
        {"if",               C_CXX_IF },
        {"inline",           C_CXX_INLINE },
        {"int",              C_CXX_INT },
        {"long",             C_CXX_LONG },
        {"mutable",          C_CXX_MUTABLE },
        {"namespace",        C_CXX_NAMESPACE },
        {"new",              C_CXX_NEW },
        {"operator",         C_CXX_OPERATOR },
        {"private",          C_CXX_PRIVATE },
        {"protected",        C_CXX_PROTECTED },
        {"public",           C_CXX_PUBLIC },
        {"register",         C_CXX_REGISTER },
        {"reinterpret_cast", C_CXX_REINTERPRETCAST },
        {"return",           C_CXX_RETURN },
        {"short",            C_CXX_SHORT },
        {"signed",           C_CXX_SIGNED },
        {"sizeof",           C_CXX_SIZEOF },
        {"static",           C_CXX_STATIC },
        {"static_cast",      C_CXX_STATICCAST },
        {"struct",           C_CXX_STRUCT },
        {"switch",           C_CXX_SWITCH },
        {"template",         C_CXX_TEMPLATE },
        {"this",             C_CXX_THIS },
        {"throw",            C_CXX_THROW },
        {"true",             C_CXX_TRUE },
        {"try",              C_CXX_TRY },
        {"typedef",          C_CXX_TYPEDEF },
        {"typeid",           C_CXX_TYPEID },
        {"typename",         C_CXX_TYPENAME },
        {"union",            C_CXX_UNION },
        {"unsigned",         C_CXX_UNSIGNED },
        {"using",            C_CXX_USING },
        {"virtual",          C_CXX_VIRTUAL },
        {"void",             C_CXX_VOID },
        {"volatile",         C_CXX_VOLATILE },
        {"wchar_t",          C_CXX_WCHART },
        {"while",            C_CXX_WHILE }
   };



//We know that this is a magic number. 
//We also know how to fix it.
#define NUM_C_CXX_KEYWORDS 63

//returns -1 if the string is not a keyword
//otherwise returns the token ID
int identify_if_C_CXX_keyword(std::string str)
   {
  // In FORTRAN, the identifiers are case insensitive.
  // So, variable 'ArEa' is the same as 'aReA'

     string lowered_str;
     for(unsigned int i = 0; i < str.size(); i++)
        {
          lowered_str += (unsigned char)tolower(str[i]);
        }

  // DQ (9/29/2013): This loop over keywords is rather inifficent, there should be a better implementation.

  // printf("got called with %s. Converted to %s\n", str.c_str(), lowered_str.c_str());
     for(int i = 0; i < NUM_C_CXX_KEYWORDS; i++)
        {
          if(lowered_str == ROSE_C_CXX_keyword_map[i].token_lexeme)
             {
               return (ROSE_C_CXX_keyword_map[i].token_id);
             }
        }

     return -1;
   }


int getNumberOfLines( std::string internalString )
   {
  // This code is copied from the similar support in rose_attributes_list.C.

     int line = 0;
     int i    = 0;
     while (internalString[i] != '\0')
        {
          if (internalString[i] == '\n')
             {
               line++;
             }
          i++;
        }

     return line;
   }

int getColumnNumberOfEndOfString( std::string internalString )
   {
  // This code is copied from the similar support in rose_attributes_list.C.

     int col = 1;
     int i   = 0;

  // DQ (10/1/2013): I think we want to have the column number after a '\n' be zero.
  // DQ (10/27/2006): the last line has a '\n' so we need the length 
  // of the last line before the '\n" triggers the counter to be reset!
  // This fix is required because the strings we have include the final '\n"
     int previousLineLength = col;
     while (internalString[i] != '\0')
        {
          if (internalString[i] == '\n')
             {
            // previousLineLength = col;
               col = 1;
               previousLineLength = col;
             }
            else
             {
               col++;
               previousLineLength = col;
             }
          i++;
        }

     int endingColumnNumber   = previousLineLength;

  // printf ("lexer: getColumnNumberOfEndOfString(): endingColumnNumber = %d \n",endingColumnNumber);

#if 0
  // If this is a one line comment then the ending position is the length of the comment PLUS the starting column position
     if (getNumberOfLines(internalString) == 1)
        {
       // endingColumnNumber += get_file_info()->get_col() - 1;
          endingColumnNumber += internalString.length() - 1;
        }
#endif

     return endingColumnNumber;
   }


void add_token (std::string str, int preproc_line_num, int & preproc_column_num, int tokenId )
   {
  // This function refactors the support to build a token and add it to the
  // list of tokens. It also increments the preproc_column_num as well.

     token_element *p_tok_elem = new token_element;
     p_tok_elem->token_lexeme = Rose_C_Cxx_text;

     int is_keyword = identify_if_C_CXX_keyword(str);

#if DEBUG_LEX_PASS
     printf("%s is either a %s token \n",str.c_str(),(is_keyword != -1) ? "keyword" : "identifier");
#endif

  // found a keyword?
     if(is_keyword != -1)
        {
       // printf("%s is a keyword\n", str.c_str());
          p_tok_elem->token_id = is_keyword;
        }
       else
        {
       // printf("%s is not a keyword\n", str.c_str());
          if (tokenId == C_CXX_SYNTAX)
             {
               p_tok_elem->token_id = C_CXX_SYNTAX;
             }
            else
             {
               if (tokenId == C_CXX_WHITESPACE)
                  {
                    p_tok_elem->token_id = C_CXX_WHITESPACE;
                  }
                 else
                  {
                    p_tok_elem->token_id = C_CXX_IDENTIFIER;
                  }
             }
        }

     stream_element *p_se = new stream_element;
     p_se->p_tok_elem = p_tok_elem;

  // Added a pointer to the processed PreprocessingInfo object.
     p_se->p_preprocessingInfo = NULL;

  // DQ (9/29/2013): uncommented so that we can
  // set the source position.
     p_se->beginning_fpi.line_num = preproc_line_num;
     p_se->beginning_fpi.column_num = preproc_column_num;

     int number_of_lines = getNumberOfLines(str);

  // p_se->ending_fpi.line_num = preproc_line_num;
     p_se->ending_fpi.line_num = preproc_line_num + number_of_lines;

     int last_string_length = getColumnNumberOfEndOfString(str);

  // printf ("In add_token(): preproc_column_num = %d last_string_length = %d \n",preproc_column_num,last_string_length);

  // p_se->ending_fpi.column_num = preproc_column_num-1;
  // p_se->ending_fpi.column_num = (preproc_column_num-1) + (last_string_length - 1);
     if (number_of_lines == 0)
        {
          p_se->ending_fpi.column_num = (preproc_column_num-1) + (last_string_length - 1);
       // printf ("In add_token(): ending_fpi.column_num set to (preproc_column_num-1) + (last_string_length - 1) \n");
        }
       else
        {
          p_se->ending_fpi.column_num = (last_string_length - 1);
       // printf ("In add_token(): ending_fpi.column_num set to (last_string_length - 1) \n");
        }

  // When using the std::string we need to subtract 1 for the null terminal.
  // preproc_column_num += strlen(Rose_C_Cxx_text);
     preproc_column_num += str.length();

  // push the element onto the token stream
     ROSE_token_stream_pointer->push_back(p_se);
   }


void add_preprocessingInfo_to_token_stream (PreprocessingInfo* preprocessingInfo, int preproc_line_num, int preproc_column_num, int number_of_lines)
   {
  // This function is overloaded with the one above and refactors the 
  // support to build a token and add it to the list of tokens. It 
  // also increments the preproc_column_num as well.

     token_element *p_tok_elem = new token_element;

  // We don't have to set this since it will be an empty string.
  // unless it is helpful to set the string to that of the 
  // PreprocessingInfo.
     ROSE_ASSERT(preprocessingInfo != NULL);
     p_tok_elem->token_lexeme = preprocessingInfo->getString();

     p_tok_elem->token_id = C_CXX_PREPROCESSING_INFO;

#if DEBUG_LEX_PASS
     printf("This is a PreprocessingInfo object processed as a token: preprocessingInfo = %p \n",preprocessingInfo);
#endif

     stream_element *p_se = new stream_element;
     p_se->p_tok_elem = p_tok_elem;

  // Added a pointer to the processed PreprocessingInfo object.
     p_se->p_preprocessingInfo = preprocessingInfo;

  // DQ (9/29/2013): uncommented so that we can
  // set the source position.
     p_se->beginning_fpi.line_num   = preproc_line_num;
     p_se->beginning_fpi.column_num = preproc_column_num;

  // preproc_column_num += p_tok_elem->token_lexeme.length();

  // Adjust the increment in the current line number based on the size of the macro.
  // Note: we don't want to modify the value of preproc_line_num, since that will have 
  // been taken care of in the processing of the CPP directive or C/C++ comment.
  // int numberOfLines = preprocessingInfo->getNumberOfLines();
  // ROSE_ASSERT(numberOfLines >= 1);
#if 0
     printf ("In add_token(PreprocessingInfo*,int,int&): line column number correctly?: numberOfLines = %d \n",numberOfLines);
#endif
  // p_se->ending_fpi.line_num   = preproc_line_num + (numberOfLines - 1);

#if 0
     printf ("In add_token(PreprocessingInfo*,int,int&): line column number correctly?: number_of_lines = %d \n",number_of_lines);
#endif
     p_se->ending_fpi.line_num = preproc_line_num + number_of_lines;

  // preproc_column_num = preprocessingInfo->getColumnNumberOfEndOfString();

     int last_string_length = getColumnNumberOfEndOfString(p_tok_elem->token_lexeme);

  // printf ("In add_preprocessingInfo_to_token_stream(): preproc_column_num = %d last_string_length = %d \n",preproc_column_num,last_string_length);

  // p_se->ending_fpi.column_num = preproc_column_num-1;
  // p_se->ending_fpi.column_num = last_string_length - 1;

     if (number_of_lines == 0)
        {
          p_se->ending_fpi.column_num = (preproc_column_num-1) + (last_string_length - 1);
       // printf ("In add_preprocessingInfo_to_token_stream(): ending_fpi.column_num set to (preproc_column_num-1) + (last_string_length - 1) \n");
        }
       else
        {
          p_se->ending_fpi.column_num = (last_string_length - 1);
       // printf ("In add_preprocessingInfo_to_token_stream(): ending_fpi.column_num set to (last_string_length - 1) \n");
        }

  // push the element onto the token stream
     ROSE_token_stream_pointer->push_back(p_se);
   }


//#endif



#include "sage3.h"

// DQ (11/17/2004): Avoid compiler warning about unused function
#define YY_NO_UNPUT

#ifdef BOOL_IS_BROKEN
// If BOOL_IS_BROKEN then we can assume that there is no definition for "true" and "false"
#ifndef false
#define false 0
#endif
#ifndef true
#define true  1
#endif
#ifndef bool
typedef int bool;
#endif
#endif

#ifndef ROSE_ASSERT
#define ROSE_ASSERT assert
#endif

#include "rose_attributes_list.h"
#define Rose_C_Cxx_text Rose_C_Cxx_text
#define Rose_C_Cxx_lex  Rose_C_Cxx_lex

#define HANDLEMACROSTART preproc_start_line_num=preproc_line_num; preproc_start_column_num=1; preproc_column_num+=strlen(Rose_C_Cxx_text); macroString = Rose_C_Cxx_text; BEGIN MACRO;

int i = 0;

std::string commentString;
std::string macroString;
//remove these _st's later
std::stack<int> curly_brace_stack_st;
std::stack<int> parenthesis_stack;
std::stack<int> square_bracket;

//All the above should be "matching constructs"
//create new for various casts and templates


// DQ (4/19/2006):
// Store the name of the current file so that we can generate Sg_File_Info objects
// for each comment.  Later we might want starting and ending fileInfo for each 
// comments and CPP directive.
std::string globalFileName;

int curr_brace_depth=0;
int ls_startingline_no; 
int ls_startingpreproc_column_num; 
int brace_counting_on=0;
PreprocessingInfo::DirectiveType macrotype = PreprocessingInfo::CpreprocessorUnknownDeclaration;

int topcurlybracestack();
void pushbracestack(int);
int popbracestack();
bool isemptystack();

int num_of_newlines(char*);

ROSEAttributesList preprocessorList;


//add stuff for char literals???????????

/*
whitespacenl            [\t\n ]+
whitespace              [\t ]+
lineprefix              ^{whitespace}*"#"{whitespace}*
macrokeyword            "include"|"define"|"undef"|"line"|"error"|"warning"|"if"|"ifdef"|"ifndef"|"elif"|"else"|"endif"
mlinkagespecification   ^{whitespace}*"extern"{whitespace}*(("\"C\"")|("\"C++\"")){whitespacenl}*"{"
*/

//refresher: blank and space function exactly as the STDLIB functions isblank and isspace respectively.
//blank matches only the various blank characters (\b,\t). It does NOT match new line. (and its variants).
//space matches blanks, newlines (various flavours like formfeed etc) as well as other stuff like vertical tab '\v' etc.
//refer to http://www.gatago.com/comp/std/c/18426853.html among others for difference between these two.
/*
The following was the original 
whitespacenl            [\t\n ]+
whitespace              [\t ]+

I changed it to
whitespacenl            [:space:]+
whitespace              [:blank:]+
This does not work.

What worked was the following:
whitespacenl            [[:space:]]+
whitespace              [[:blank:]]+

*/

/*
I am not sure if the whitespacenl would count the number of newlines in code that has backslashes properly.
*/

#line 1448 "/home/hoffman/rose-develop/b/src/frontend/SageIII/lex.yy.C"

#define INITIAL 0
#define NORMAL 1
#define CXX_COMMENT 2
#define C_COMMENT 3
#define STRING_LIT 4
#define CHAR_LIT 5
#define MACRO 6
#define C_COMMENT_INMACRO 7

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals (void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int Rose_C_Cxx_lex_destroy (void );

int Rose_C_Cxx_get_debug (void );

void Rose_C_Cxx_set_debug (int debug_flag  );

YY_EXTRA_TYPE Rose_C_Cxx_get_extra (void );

void Rose_C_Cxx_set_extra (YY_EXTRA_TYPE user_defined  );

FILE *Rose_C_Cxx_get_in (void );

void Rose_C_Cxx_set_in  (FILE * in_str  );

FILE *Rose_C_Cxx_get_out (void );

void Rose_C_Cxx_set_out  (FILE * out_str  );

int Rose_C_Cxx_get_leng (void );

char *Rose_C_Cxx_get_text (void );

int Rose_C_Cxx_get_lineno (void );

void Rose_C_Cxx_set_lineno (int line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int Rose_C_Cxx_wrap (void );
#else
extern int Rose_C_Cxx_wrap (void );
#endif
#endif

    static void yyunput (int c,char *buf_ptr  );
    
#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( Rose_C_Cxx_text, Rose_C_Cxx_leng, 1, Rose_C_Cxx_out )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( Rose_C_Cxx_in )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( Rose_C_Cxx_in ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, Rose_C_Cxx_in))==0 && ferror(Rose_C_Cxx_in)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(Rose_C_Cxx_in); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int Rose_C_Cxx_lex (void);

#define YY_DECL int Rose_C_Cxx_lex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after Rose_C_Cxx_text and Rose_C_Cxx_leng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	if ( Rose_C_Cxx_leng > 0 ) \
		YY_CURRENT_BUFFER_LVALUE->yy_at_bol = \
				(Rose_C_Cxx_text[Rose_C_Cxx_leng - 1] == '\n'); \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
#line 847 "/home/hoffman/rose-develop/src/frontend/SageIII/preproc-c.ll"



int preproc_line_num = 1;
        /*bad way to initialize*/
int preproc_start_line_num = preproc_line_num;
int preproc_column_num = 1;
int preproc_start_column_num = preproc_column_num;
                        /*Do we need this  ???*/
BEGIN NORMAL;

#line 1657 "/home/hoffman/rose-develop/b/src/frontend/SageIII/lex.yy.C"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! Rose_C_Cxx_in )
			Rose_C_Cxx_in = stdin;

		if ( ! Rose_C_Cxx_out )
			Rose_C_Cxx_out = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			Rose_C_Cxx_ensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				Rose_C_Cxx__create_buffer(Rose_C_Cxx_in,YY_BUF_SIZE );
		}

		Rose_C_Cxx__load_buffer_state( );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of Rose_C_Cxx_text. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
		yy_current_state += YY_AT_BOL();
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 187 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 253 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
/* rule 1 can match eol */
YY_RULE_SETUP
#line 858 "/home/hoffman/rose-develop/src/frontend/SageIII/preproc-c.ll"
{ 
#if DEBUG_LEX_PASS
     printf("%s is a mlinkagespecification token \n",Rose_C_Cxx_text);
#endif
     preprocessorList.addElement(PreprocessingInfo::ClinkageSpecificationStart,Rose_C_Cxx_text,globalFileName,preproc_line_num,preproc_column_num,0); 
     preproc_line_num+=num_of_newlines(Rose_C_Cxx_text); 

     add_token(Rose_C_Cxx_text,preproc_line_num,preproc_column_num,0);
  // preproc_column_num+=strlen(Rose_C_Cxx_text); 

     curr_brace_depth++; 
     pushbracestack(curr_brace_depth);
   }
	YY_BREAK
/*Handle the braces (left and right). Push and Pop the bracestack accordingly*/
case 2:
YY_RULE_SETUP
#line 873 "/home/hoffman/rose-develop/src/frontend/SageIII/preproc-c.ll"
{ 
#if DEBUG_LEX_PASS
     printf("%s is a syntax token \n",Rose_C_Cxx_text);
#endif
     if (!isemptystack()) 
        { 
       /* we only count braces within a linkage specification. */ 
          curr_brace_depth++; 
        } 
  // printf("Ram: found left brace at preproc_line_num = %d, preproc_column_num = %d\n", preproc_line_num, preproc_column_num);

     add_token(Rose_C_Cxx_text,preproc_line_num,preproc_column_num,C_CXX_SYNTAX);
  // preproc_column_num++; 
   }
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 888 "/home/hoffman/rose-develop/src/frontend/SageIII/preproc-c.ll"
{ 
#if DEBUG_LEX_PASS
     printf("%s is a syntax token \n",Rose_C_Cxx_text);
#endif

     bool added_link_specification_as_token = false;
     if (!isemptystack()) 
        { 
          if (curr_brace_depth==topcurlybracestack()) 
             { 
               popbracestack();

            // The semantics of ROSEAttributesList::addElement() is to use std::vector::push_back();
               preprocessorList.addElement(PreprocessingInfo::ClinkageSpecificationEnd, Rose_C_Cxx_text, globalFileName, preproc_line_num, preproc_column_num, 0); 

               added_link_specification_as_token = true;

            // This token should maybe be special since it marks the end of a link specification (later).
               add_preprocessingInfo_to_token_stream(preprocessorList.lastElement(),preproc_line_num,preproc_column_num,0);
             }

          curr_brace_depth--; 
        } 
  // printf("Ram: found right brace at preproc_line_num = %d, preproc_column_num = %d\n", preproc_line_num, preproc_column_num);

     if (added_link_specification_as_token == false)
        {
          add_token(Rose_C_Cxx_text,preproc_line_num,preproc_column_num,C_CXX_SYNTAX);
        }
  // preproc_column_num++; 
   }
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 920 "/home/hoffman/rose-develop/src/frontend/SageIII/preproc-c.ll"
{ 
                    /*if(!isemptystack()) 
                    { 
                        //we only count braces within a linkage specification. 
                        curr_brace_depth++; 
                    }
                    */
#if DEBUG_LEX_PASS
     printf("%s is a syntax token \n", Rose_C_Cxx_text);
#endif
     add_token(Rose_C_Cxx_text,preproc_line_num,preproc_column_num,C_CXX_SYNTAX);
  // preproc_column_num++; 
   }
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 934 "/home/hoffman/rose-develop/src/frontend/SageIII/preproc-c.ll"
{ 
                    /*
                    if(!isemptystack()) 
                    { 
                        if(curr_brace_depth==topcurlybracestack()) 
                        { 
                            popbracestack(); 
                            preprocessorList.addElement(PreprocessingInfo::ClinkageSpecificationEnd, 
                                                            Rose_C_Cxx_text, globalFileName, preproc_line_num, preproc_column_num, 0); 
                        }
                        curr_brace_depth--; 
                    } 
                    */
#if DEBUG_LEX_PASS
     printf("%s is a syntax token \n", Rose_C_Cxx_text);
#endif
     add_token(Rose_C_Cxx_text,preproc_line_num,preproc_column_num,C_CXX_SYNTAX);
  // preproc_column_num++; 
   }
	YY_BREAK
/* DQ (9/29/2013): Added additional syntax to token handling */
case 6:
YY_RULE_SETUP
#line 955 "/home/hoffman/rose-develop/src/frontend/SageIII/preproc-c.ll"
{
#if DEBUG_LEX_PASS
     printf("%s is a syntax token \n", Rose_C_Cxx_text);
#endif
     add_token(Rose_C_Cxx_text,preproc_line_num,preproc_column_num,C_CXX_SYNTAX);
  // preproc_column_num++; 
   }
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 963 "/home/hoffman/rose-develop/src/frontend/SageIII/preproc-c.ll"
{
#if DEBUG_LEX_PASS
     printf("%s is a syntax token \n", Rose_C_Cxx_text);
#endif
     add_token(Rose_C_Cxx_text,preproc_line_num,preproc_column_num,C_CXX_SYNTAX);
  // preproc_column_num++; 
   }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 971 "/home/hoffman/rose-develop/src/frontend/SageIII/preproc-c.ll"
{
#if DEBUG_LEX_PASS
     printf("%s is a syntax token \n", Rose_C_Cxx_text);
#endif
     add_token(Rose_C_Cxx_text,preproc_line_num,preproc_column_num,C_CXX_SYNTAX);
  // preproc_column_num++; 
   }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 979 "/home/hoffman/rose-develop/src/frontend/SageIII/preproc-c.ll"
{
#if DEBUG_LEX_PASS
     printf("%s is a syntax token \n", Rose_C_Cxx_text);
#endif
     add_token(Rose_C_Cxx_text,preproc_line_num,preproc_column_num,C_CXX_SYNTAX);
  // preproc_column_num++; 
   }
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 987 "/home/hoffman/rose-develop/src/frontend/SageIII/preproc-c.ll"
{
#if DEBUG_LEX_PASS
     printf("%s is a syntax token \n", Rose_C_Cxx_text);
#endif
     add_token(Rose_C_Cxx_text,preproc_line_num,preproc_column_num,C_CXX_SYNTAX);
  // preproc_column_num++; 
   }
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 995 "/home/hoffman/rose-develop/src/frontend/SageIII/preproc-c.ll"
{
#if DEBUG_LEX_PASS
     printf("%s is a syntax token \n", Rose_C_Cxx_text);
#endif
     add_token(Rose_C_Cxx_text,preproc_line_num,preproc_column_num,C_CXX_SYNTAX);
  // preproc_column_num++; 
   }
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 1003 "/home/hoffman/rose-develop/src/frontend/SageIII/preproc-c.ll"
{
#if DEBUG_LEX_PASS
     printf("%s is a syntax token \n", Rose_C_Cxx_text);
#endif
     add_token(Rose_C_Cxx_text,preproc_line_num,preproc_column_num,C_CXX_SYNTAX);
  // preproc_column_num++; 
   }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 1011 "/home/hoffman/rose-develop/src/frontend/SageIII/preproc-c.ll"
{
#if DEBUG_LEX_PASS
     printf("%s is a syntax token \n", Rose_C_Cxx_text);
#endif
     add_token(Rose_C_Cxx_text,preproc_line_num,preproc_column_num,C_CXX_SYNTAX);
  // preproc_column_num++; 
   }
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 1019 "/home/hoffman/rose-develop/src/frontend/SageIII/preproc-c.ll"
{
#if DEBUG_LEX_PASS
     printf("%s is a syntax token \n", Rose_C_Cxx_text);
#endif
     add_token(Rose_C_Cxx_text,preproc_line_num,preproc_column_num,C_CXX_SYNTAX);
  // preproc_column_num++; 
   }
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 1027 "/home/hoffman/rose-develop/src/frontend/SageIII/preproc-c.ll"
{
#if DEBUG_LEX_PASS
     printf("%s is a syntax token \n", Rose_C_Cxx_text);
#endif
     add_token(Rose_C_Cxx_text,preproc_line_num,preproc_column_num,C_CXX_SYNTAX);
  // preproc_column_num++; 
   }
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 1035 "/home/hoffman/rose-develop/src/frontend/SageIII/preproc-c.ll"
{
#if DEBUG_LEX_PASS
     printf("%s is a syntax token \n", Rose_C_Cxx_text);
#endif
     add_token(Rose_C_Cxx_text,preproc_line_num,preproc_column_num,C_CXX_SYNTAX);
  // preproc_column_num++; 
   }
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 1043 "/home/hoffman/rose-develop/src/frontend/SageIII/preproc-c.ll"
{
#if DEBUG_LEX_PASS
     printf("%s is a syntax token \n", Rose_C_Cxx_text);
#endif
  // preproc_column_num++; 
     add_token(Rose_C_Cxx_text,preproc_line_num,preproc_column_num,C_CXX_SYNTAX);
   }
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 1051 "/home/hoffman/rose-develop/src/frontend/SageIII/preproc-c.ll"
{
#if DEBUG_LEX_PASS
     printf("%s is a syntax token \n", Rose_C_Cxx_text);
#endif
  // preproc_column_num++; 
     add_token(Rose_C_Cxx_text,preproc_line_num,preproc_column_num,C_CXX_SYNTAX);
   }
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 1059 "/home/hoffman/rose-develop/src/frontend/SageIII/preproc-c.ll"
{
#if DEBUG_LEX_PASS
     printf("%s is a syntax token \n", Rose_C_Cxx_text);
#endif
  // preproc_column_num += 2;
     add_token(Rose_C_Cxx_text,preproc_line_num,preproc_column_num,C_CXX_SYNTAX);
   }
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 1067 "/home/hoffman/rose-develop/src/frontend/SageIII/preproc-c.ll"
{
#if DEBUG_LEX_PASS
     printf("%s is a syntax token \n", Rose_C_Cxx_text);
#endif
  // preproc_column_num += 2;
     add_token(Rose_C_Cxx_text,preproc_line_num,preproc_column_num,C_CXX_SYNTAX);
   }
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 1075 "/home/hoffman/rose-develop/src/frontend/SageIII/preproc-c.ll"
{
#if DEBUG_LEX_PASS
     printf("%s is a syntax token \n", Rose_C_Cxx_text);
#endif
  // preproc_column_num += 2;
     add_token(Rose_C_Cxx_text,preproc_line_num,preproc_column_num,C_CXX_SYNTAX);
   }
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 1083 "/home/hoffman/rose-develop/src/frontend/SageIII/preproc-c.ll"
{
#if DEBUG_LEX_PASS
     printf("%s is a syntax token \n", Rose_C_Cxx_text);
#endif
  // preproc_column_num += 2;
     add_token(Rose_C_Cxx_text,preproc_line_num,preproc_column_num,C_CXX_SYNTAX);
   }
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 1091 "/home/hoffman/rose-develop/src/frontend/SageIII/preproc-c.ll"
{
#if DEBUG_LEX_PASS
     printf("%s is a syntax token \n", Rose_C_Cxx_text);
#endif
  // preproc_column_num += 2;
     add_token(Rose_C_Cxx_text,preproc_line_num,preproc_column_num,C_CXX_SYNTAX);
   }
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 1099 "/home/hoffman/rose-develop/src/frontend/SageIII/preproc-c.ll"
{
#if DEBUG_LEX_PASS
     printf("%s is a syntax token \n", Rose_C_Cxx_text);
#endif
  // preproc_column_num += 2;
     add_token(Rose_C_Cxx_text,preproc_line_num,preproc_column_num,C_CXX_SYNTAX);
   }
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 1107 "/home/hoffman/rose-develop/src/frontend/SageIII/preproc-c.ll"
{
#if DEBUG_LEX_PASS
     printf("%s is a syntax token \n", Rose_C_Cxx_text);
#endif
  // preproc_column_num += 2;
     add_token(Rose_C_Cxx_text,preproc_line_num,preproc_column_num,C_CXX_SYNTAX);
   }
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 1115 "/home/hoffman/rose-develop/src/frontend/SageIII/preproc-c.ll"
{
#if DEBUG_LEX_PASS
     printf("%s is a syntax token \n", Rose_C_Cxx_text);
#endif
     add_token(Rose_C_Cxx_text,preproc_line_num,preproc_column_num,C_CXX_SYNTAX);
  // preproc_column_num++; 
   }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 1123 "/home/hoffman/rose-develop/src/frontend/SageIII/preproc-c.ll"
{
#if DEBUG_LEX_PASS
     printf("%s is a syntax token \n", Rose_C_Cxx_text);
#endif
     add_token(Rose_C_Cxx_text,preproc_line_num,preproc_column_num,C_CXX_SYNTAX);
  // preproc_column_num++; 
   }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 1131 "/home/hoffman/rose-develop/src/frontend/SageIII/preproc-c.ll"
{
#if DEBUG_LEX_PASS
     printf("%s is a syntax token \n", Rose_C_Cxx_text);
#endif
     add_token(Rose_C_Cxx_text,preproc_line_num,preproc_column_num,C_CXX_SYNTAX);
  // preproc_column_num++; 
   }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 1139 "/home/hoffman/rose-develop/src/frontend/SageIII/preproc-c.ll"
{
#if DEBUG_LEX_PASS
     printf("%s is a syntax token \n", Rose_C_Cxx_text);
#endif
     add_token(Rose_C_Cxx_text,preproc_line_num,preproc_column_num,C_CXX_SYNTAX);
  // preproc_column_num++; 
   }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 1147 "/home/hoffman/rose-develop/src/frontend/SageIII/preproc-c.ll"
{
#if DEBUG_LEX_PASS
     printf("%s is a syntax token \n", Rose_C_Cxx_text);
#endif
     add_token(Rose_C_Cxx_text,preproc_line_num,preproc_column_num,C_CXX_SYNTAX);
  // preproc_column_num++; 
   }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 1155 "/home/hoffman/rose-develop/src/frontend/SageIII/preproc-c.ll"
{
#if DEBUG_LEX_PASS
     printf("%s is a syntax token \n", Rose_C_Cxx_text);
#endif
     add_token(Rose_C_Cxx_text,preproc_line_num,preproc_column_num,C_CXX_SYNTAX);
  // preproc_column_num++; 
   }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 1163 "/home/hoffman/rose-develop/src/frontend/SageIII/preproc-c.ll"
{
  // DQ (9/29/2013): This does not accound for 0L to be a single literal (or octal or hexadecimal)
#if DEBUG_LEX_PASS
     printf("%s is a numeric literal token \n", Rose_C_Cxx_text);
#endif
     add_token(Rose_C_Cxx_text,preproc_line_num,preproc_column_num,0);
  // preproc_column_num += strlen(Rose_C_Cxx_text);
   }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 1172 "/home/hoffman/rose-develop/src/frontend/SageIII/preproc-c.ll"
{
#if DEBUG_LEX_PASS
     printf("%s is a whitespace token (length = %" PRIuPTR ") \n",Rose_C_Cxx_text,strlen(Rose_C_Cxx_text));
#endif
     add_token(Rose_C_Cxx_text,preproc_line_num,preproc_column_num,C_CXX_SYNTAX);
   }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 1179 "/home/hoffman/rose-develop/src/frontend/SageIII/preproc-c.ll"
{
#if DEBUG_LEX_PASS
     printf("%s is a whitespace token (length = %" PRIuPTR ") \n",Rose_C_Cxx_text,strlen(Rose_C_Cxx_text));
#endif
     add_token(Rose_C_Cxx_text,preproc_line_num,preproc_column_num,C_CXX_SYNTAX);
   }
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 1186 "/home/hoffman/rose-develop/src/frontend/SageIII/preproc-c.ll"
{ 
#if DEBUG_LEX_PASS
     printf("%s is a whitespace token (length = %" PRIuPTR ") \n",Rose_C_Cxx_text,strlen(Rose_C_Cxx_text));
#endif
     add_token(Rose_C_Cxx_text,preproc_line_num,preproc_column_num,C_CXX_WHITESPACE);
   }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 1193 "/home/hoffman/rose-develop/src/frontend/SageIII/preproc-c.ll"
{
#if 1
     add_token(Rose_C_Cxx_text,preproc_line_num,preproc_column_num,0);
#else
     token_element *p_tok_elem = new token_element;
     p_tok_elem->token_lexeme = Rose_C_Cxx_text;

     int is_keyword = identify_if_C_CXX_keyword(Rose_C_Cxx_text);

#if DEBUG_LEX_PASS
     printf("%s is either a %s token \n",Rose_C_Cxx_text,(is_keyword != -1) ? "keyword" : "identifier");
#endif

  // found a keyword?
     if(is_keyword != -1)
        {   
       // printf("%s is a keyword\n", Rose_C_Cxx_text); 
          p_tok_elem->token_id = is_keyword;
        }
       else
        {   
       // printf("%s is not a keyword\n", Rose_C_Cxx_text); 
          p_tok_elem->token_id = C_CXX_IDENTIFIER;
        }

     stream_element *p_se = new stream_element;
     p_se->p_tok_elem = p_tok_elem;

  // DQ (9/29/2013): uncommented so that we can
  // set the source position.
  // p_se->beginning_fpi.line_num = preproc_column_num;
     p_se->beginning_fpi.line_num = preproc_line_num;
     p_se->beginning_fpi.column_num = preproc_column_num;
     preproc_column_num += strlen(Rose_C_Cxx_text);
     p_se->ending_fpi.line_num = preproc_line_num;
     p_se->ending_fpi.column_num = preproc_column_num-1;

  // push the element onto the token stream
     ROSE_token_stream_pointer->push_back(p_se);
#endif
   }
	YY_BREAK
/*begin handling the C++ style comments. */
case 37:
YY_RULE_SETUP
#line 1236 "/home/hoffman/rose-develop/src/frontend/SageIII/preproc-c.ll"
{
                    /*Handle the C comments.*/ 
                    preproc_start_line_num=preproc_line_num; 
                    preproc_start_column_num=preproc_column_num; 
                    preproc_column_num+=2; 
                    commentString = Rose_C_Cxx_text; 
                    BEGIN CXX_COMMENT;
                }
	YY_BREAK
/*The normal mode actions. Handle the preprocessor stuff and any other characters. */
/*Do we need the backslash character?????????????*/
case 38:
YY_RULE_SETUP
#line 1247 "/home/hoffman/rose-develop/src/frontend/SageIII/preproc-c.ll"
{
                    preproc_start_line_num=preproc_line_num; 
                    preproc_start_column_num=preproc_column_num; 
                    preproc_column_num+=strlen(Rose_C_Cxx_text);
                    
                    //copy the comment to commentString 
                    commentString = Rose_C_Cxx_text; 
                    BEGIN C_COMMENT; 
                }
	YY_BREAK
/* These are the alternative tokens. Refer to page 12 of C++ std to understand their representation */
/*<NORMAL>"<%"     {curr_token = ALT_LEFT_CURLY; do_yytext_bookeeping(); }
<NORMAL>"<%"     { }
      */
/* DQ (9/29/2013): I think this should not be here, it can't be matched given that we handle identifiers above. */
/*
<NORMAL>"static_cast"   { 
#if DEBUG_LEX_PASS
                    printf("%s is a static_cast token \n",Rose_C_Cxx_text);
#endif
                    preproc_column_num++; 
                }
    */
case 39:
YY_RULE_SETUP
#line 1274 "/home/hoffman/rose-develop/src/frontend/SageIII/preproc-c.ll"
{ macrotype=PreprocessingInfo::CpreprocessorIncludeDeclaration; HANDLEMACROSTART }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 1275 "/home/hoffman/rose-develop/src/frontend/SageIII/preproc-c.ll"
{ macrotype=PreprocessingInfo::CpreprocessorDefineDeclaration; HANDLEMACROSTART }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 1276 "/home/hoffman/rose-develop/src/frontend/SageIII/preproc-c.ll"
{ macrotype=PreprocessingInfo::CpreprocessorUndefDeclaration; HANDLEMACROSTART }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 1277 "/home/hoffman/rose-develop/src/frontend/SageIII/preproc-c.ll"
{ macrotype=PreprocessingInfo::CpreprocessorLineDeclaration; HANDLEMACROSTART }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 1278 "/home/hoffman/rose-develop/src/frontend/SageIII/preproc-c.ll"
{ macrotype=PreprocessingInfo::CpreprocessorErrorDeclaration; HANDLEMACROSTART }
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 1279 "/home/hoffman/rose-develop/src/frontend/SageIII/preproc-c.ll"
{ macrotype=PreprocessingInfo::CpreprocessorIfDeclaration; HANDLEMACROSTART }
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 1280 "/home/hoffman/rose-develop/src/frontend/SageIII/preproc-c.ll"
{ macrotype=PreprocessingInfo::CpreprocessorIfdefDeclaration; HANDLEMACROSTART }
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 1281 "/home/hoffman/rose-develop/src/frontend/SageIII/preproc-c.ll"
{ macrotype=PreprocessingInfo::CpreprocessorIfndefDeclaration; HANDLEMACROSTART }
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 1282 "/home/hoffman/rose-develop/src/frontend/SageIII/preproc-c.ll"
{ macrotype=PreprocessingInfo::CpreprocessorElifDeclaration; HANDLEMACROSTART }
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 1283 "/home/hoffman/rose-develop/src/frontend/SageIII/preproc-c.ll"
{ macrotype=PreprocessingInfo::CpreprocessorElseDeclaration; HANDLEMACROSTART }
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 1284 "/home/hoffman/rose-develop/src/frontend/SageIII/preproc-c.ll"
{ macrotype=PreprocessingInfo::CpreprocessorEndifDeclaration; HANDLEMACROSTART }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 1285 "/home/hoffman/rose-develop/src/frontend/SageIII/preproc-c.ll"
{ macrotype=PreprocessingInfo::CpreprocessorWarningDeclaration; HANDLEMACROSTART }
	YY_BREAK
/* DQ (9/30/2013): Added support to recognize #pragma as a token */
case 51:
YY_RULE_SETUP
#line 1288 "/home/hoffman/rose-develop/src/frontend/SageIII/preproc-c.ll"
{
     add_token(Rose_C_Cxx_text,preproc_line_num,preproc_column_num,C_CXX_PRAGMA);
   }
	YY_BREAK
/*Add code here to attach the whitespace before newlines (and general lineprefix code) */
case 52:
/* rule 52 can match eol */
YY_RULE_SETUP
#line 1293 "/home/hoffman/rose-develop/src/frontend/SageIII/preproc-c.ll"
{
     add_token(Rose_C_Cxx_text,preproc_line_num,preproc_column_num,C_CXX_WHITESPACE);
     preproc_line_num++;
     preproc_column_num = 1; 
   } 
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 1299 "/home/hoffman/rose-develop/src/frontend/SageIII/preproc-c.ll"
{
  /* preproc_line_num+=num_of_newlines(Rose_C_Cxx_text); */ 
     add_token(Rose_C_Cxx_text,preproc_line_num,preproc_column_num,0);
  // preproc_column_num+=strlen(Rose_C_Cxx_text); 
     BEGIN STRING_LIT;
   }
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 1306 "/home/hoffman/rose-develop/src/frontend/SageIII/preproc-c.ll"
{
   /*preproc_line_num+=num_of_newlines(Rose_C_Cxx_text);*/ 
     add_token(Rose_C_Cxx_text,preproc_line_num,preproc_column_num,0);
  // preproc_column_num+=strlen(Rose_C_Cxx_text); 
     BEGIN CHAR_LIT;
   }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 1313 "/home/hoffman/rose-develop/src/frontend/SageIII/preproc-c.ll"
{ preproc_column_num++; }
	YY_BREAK
/* Actions for character literals. Since the part between single quote can be more than one
                         * character of input (e.g., '\\', '\'', '\n', '\012', etc) we parse them sort of like strings. */
case 56:
/* rule 56 can match eol */
YY_RULE_SETUP
#line 1317 "/home/hoffman/rose-develop/src/frontend/SageIII/preproc-c.ll"
{/*eat escaped DOS line-term*/  preproc_line_num++; preproc_column_num=1; }
	YY_BREAK
case 57:
/* rule 57 can match eol */
YY_RULE_SETUP
#line 1318 "/home/hoffman/rose-develop/src/frontend/SageIII/preproc-c.ll"
{/*eat escaped linefeed*/       preproc_line_num++; preproc_column_num=1; }
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 1319 "/home/hoffman/rose-develop/src/frontend/SageIII/preproc-c.ll"
{/*eat escaped something*/      add_token(Rose_C_Cxx_text,preproc_line_num,preproc_column_num,0); /*preproc_column_num+=strlen(Rose_C_Cxx_text);*/ }
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 1320 "/home/hoffman/rose-develop/src/frontend/SageIII/preproc-c.ll"
{/*eat non-special characters*/ add_token(Rose_C_Cxx_text,preproc_line_num,preproc_column_num,0); /*preproc_column_num+=strlen(Rose_C_Cxx_text);*/ }
	YY_BREAK
case 60:
/* rule 60 can match eol */
YY_RULE_SETUP
#line 1321 "/home/hoffman/rose-develop/src/frontend/SageIII/preproc-c.ll"
{/*eat DOS line-term*/          preproc_line_num++; preproc_column_num=1; }
	YY_BREAK
case 61:
/* rule 61 can match eol */
YY_RULE_SETUP
#line 1322 "/home/hoffman/rose-develop/src/frontend/SageIII/preproc-c.ll"
{/*eat linefeed*/               preproc_line_num++; preproc_column_num=1; }
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 1323 "/home/hoffman/rose-develop/src/frontend/SageIII/preproc-c.ll"
{
   /*end of character literal*/   
     add_token(Rose_C_Cxx_text,preproc_line_num,preproc_column_num,0);
  // preproc_column_num+=strlen(Rose_C_Cxx_text); 
     BEGIN NORMAL;
   }
	YY_BREAK
/* Actions for string literals. */
case 63:
/* rule 63 can match eol */
YY_RULE_SETUP
#line 1333 "/home/hoffman/rose-develop/src/frontend/SageIII/preproc-c.ll"
{/*eat escaped DOS line-term*/  add_token(Rose_C_Cxx_text,preproc_line_num,preproc_column_num,0); preproc_line_num++; preproc_column_num=1; }
	YY_BREAK
case 64:
/* rule 64 can match eol */
YY_RULE_SETUP
#line 1334 "/home/hoffman/rose-develop/src/frontend/SageIII/preproc-c.ll"
{/*eat escaped linefeed*/       add_token(Rose_C_Cxx_text,preproc_line_num,preproc_column_num,0); preproc_line_num++; preproc_column_num=1; }
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 1335 "/home/hoffman/rose-develop/src/frontend/SageIII/preproc-c.ll"
{/*eat escaped something*/      add_token(Rose_C_Cxx_text,preproc_line_num,preproc_column_num,0); /*preproc_column_num+=strlen(Rose_C_Cxx_text);*/ }
	YY_BREAK
case 66:
/* rule 66 can match eol */
YY_RULE_SETUP
#line 1336 "/home/hoffman/rose-develop/src/frontend/SageIII/preproc-c.ll"
{/*eat DOS line-term*/          add_token(Rose_C_Cxx_text,preproc_line_num,preproc_column_num,0); preproc_line_num++; preproc_column_num=1; }
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 1337 "/home/hoffman/rose-develop/src/frontend/SageIII/preproc-c.ll"
{/*eat non-special characters*/ add_token(Rose_C_Cxx_text,preproc_line_num,preproc_column_num,0); /*preproc_column_num+=strlen(Rose_C_Cxx_text)*/; }
	YY_BREAK
case 68:
/* rule 68 can match eol */
YY_RULE_SETUP
#line 1338 "/home/hoffman/rose-develop/src/frontend/SageIII/preproc-c.ll"
{/*eat linefeed*/               add_token(Rose_C_Cxx_text,preproc_line_num,preproc_column_num,0); preproc_line_num++; preproc_column_num=1; }
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 1339 "/home/hoffman/rose-develop/src/frontend/SageIII/preproc-c.ll"
{
   /* end of string literal */
     add_token(Rose_C_Cxx_text,preproc_line_num,preproc_column_num,0);
  // preproc_column_num+=strlen(Rose_C_Cxx_text); 
     BEGIN NORMAL; 
   }
	YY_BREAK
/*Actions for a C++ style comment.*/
case 70:
YY_RULE_SETUP
#line 1347 "/home/hoffman/rose-develop/src/frontend/SageIII/preproc-c.ll"
{ /* eat anything that is not a backslash or a newline*/ commentString += Rose_C_Cxx_text;}
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 1348 "/home/hoffman/rose-develop/src/frontend/SageIII/preproc-c.ll"
{ 
                            /*eat up backslashes not immdediately followed by newlines*/ 
                            commentString += Rose_C_Cxx_text;
                            /*fix the preproc_column_num at other places ????????????????????  ??????????????*/ 
                            preproc_column_num=1; 
                        }
	YY_BREAK
case 72:
/* rule 72 can match eol */
YY_RULE_SETUP
#line 1355 "/home/hoffman/rose-develop/src/frontend/SageIII/preproc-c.ll"
{ 
                            /*if backslash is followed by a newline, then eat them (backslash, newline) up, increment preproc_line_num and continue*/ 
                            commentString += Rose_C_Cxx_text;
                            preproc_line_num++; 
}
	YY_BREAK
case 73:
/* rule 73 can match eol */
YY_RULE_SETUP
#line 1361 "/home/hoffman/rose-develop/src/frontend/SageIII/preproc-c.ll"
{
                            preproc_line_num++; preproc_column_num=1; 
                            commentString += Rose_C_Cxx_text;
                            preprocessorList.addElement(PreprocessingInfo::CplusplusStyleComment, 
                                    commentString,globalFileName, preproc_start_line_num, preproc_start_column_num,preproc_line_num-preproc_start_line_num); 

                         // This element of the token stream is special since it is from a PreprocessorInfo object.
                            add_preprocessingInfo_to_token_stream(preprocessorList.lastElement(),preproc_start_line_num,preproc_start_column_num,preproc_line_num-preproc_start_line_num);

                            BEGIN NORMAL; 
                        }
	YY_BREAK
/* negara1 (07/25/2011): Added handling of CXX comments that appear at the last line of a file. */
case YY_STATE_EOF(CXX_COMMENT):
#line 1374 "/home/hoffman/rose-develop/src/frontend/SageIII/preproc-c.ll"
{
                            preprocessorList.addElement(PreprocessingInfo::CplusplusStyleComment, 
                                    commentString,globalFileName, preproc_start_line_num, preproc_start_column_num,preproc_line_num-preproc_start_line_num); 

                         // This element of the token stream is special since it is from a PreprocessorInfo object.
                            add_preprocessingInfo_to_token_stream(preprocessorList.lastElement(),preproc_start_line_num,preproc_start_column_num,preproc_line_num-preproc_start_line_num);

                            yyterminate();
                        }
	YY_BREAK
/*Actions while in a C style comment.*/
case 74:
/* rule 74 can match eol */
YY_RULE_SETUP
#line 1385 "/home/hoffman/rose-develop/src/frontend/SageIII/preproc-c.ll"
{
                            commentString += Rose_C_Cxx_text;
                            preproc_line_num++; 
                            preproc_column_num=1; 
                        }
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 1390 "/home/hoffman/rose-develop/src/frontend/SageIII/preproc-c.ll"
{
                            commentString += Rose_C_Cxx_text;
                            preproc_column_num+=strlen(Rose_C_Cxx_text); 
                         /* printf("hello Ram: The comment string is ####%s#############. It is of %d lines, the current line number is %d\n",commentString.c_str(), preproc_line_num-preproc_start_line_num+1, preproc_line_num);
                          */
                         // DQ (10/1/2013): This is a bug fix the number of lines should be computed using 
                         // "preproc_line_num-preproc_start_line_num" not "preproc_line_num-preproc_start_line_num+1"
                         // preprocessorList.addElement(PreprocessingInfo::C_StyleComment,commentString,globalFileName,preproc_start_line_num,preproc_start_column_num,preproc_line_num-preproc_start_line_num+1); 
                            preprocessorList.addElement(PreprocessingInfo::C_StyleComment,commentString,globalFileName,preproc_start_line_num,preproc_start_column_num,preproc_line_num-preproc_start_line_num); 

                         // This element of the token stream is special since it is from a PreprocessorInfo object.
                            add_preprocessingInfo_to_token_stream(preprocessorList.lastElement(),preproc_start_line_num,preproc_start_column_num,preproc_line_num-preproc_start_line_num);

                            BEGIN(NORMAL); 

                        }
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 1406 "/home/hoffman/rose-develop/src/frontend/SageIII/preproc-c.ll"
{ 
                    commentString += Rose_C_Cxx_text;
                    preproc_column_num++; 
                }
	YY_BREAK
/*Actions while in a MACRO.*/
case 77:
/* rule 77 can match eol */
YY_RULE_SETUP
#line 1412 "/home/hoffman/rose-develop/src/frontend/SageIII/preproc-c.ll"
{   // Escaped DOS line termination
                    macroString += Rose_C_Cxx_text;
                    ++preproc_line_num;
                    preproc_column_num = 1;
                }
	YY_BREAK
case 78:
/* rule 78 can match eol */
YY_RULE_SETUP
#line 1418 "/home/hoffman/rose-develop/src/frontend/SageIII/preproc-c.ll"
{   // Escape line termination
                    macroString += Rose_C_Cxx_text;
                    ++preproc_line_num;
                    preproc_column_num = 1;
                }
	YY_BREAK
case 79:
/* rule 79 can match eol */
YY_RULE_SETUP
#line 1424 "/home/hoffman/rose-develop/src/frontend/SageIII/preproc-c.ll"
{   // End of macro
                    macroString = rose::StringUtility::fixLineTermination(macroString + Rose_C_Cxx_text);
                    preproc_line_num++; 
                    preproc_column_num=1; 
                    preprocessorList.addElement(macrotype, macroString, globalFileName,
                                                preproc_start_line_num, preproc_start_column_num,
                                                preproc_line_num-preproc_start_line_num);

                 // This element of the token stream is special since it is from a PreprocessorInfo object.
                    add_preprocessingInfo_to_token_stream(preprocessorList.lastElement(),preproc_start_line_num,preproc_start_column_num,preproc_line_num-preproc_start_line_num);
                    BEGIN NORMAL; 
                }
	YY_BREAK
case YY_STATE_EOF(MACRO):
#line 1437 "/home/hoffman/rose-develop/src/frontend/SageIII/preproc-c.ll"
{   // End of macro
                    macroString = rose::StringUtility::fixLineTermination(macroString + Rose_C_Cxx_text);
                    preprocessorList.addElement(macrotype, macroString, globalFileName,
                                                preproc_start_line_num, preproc_start_column_num,
                                                preproc_line_num-preproc_start_line_num);

                 // This element of the token stream is special since it is from a PreprocessorInfo object.
                    add_preprocessingInfo_to_token_stream(preprocessorList.lastElement(),preproc_start_line_num,preproc_start_column_num,preproc_line_num-preproc_start_line_num);

                    yyterminate();
                }
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 1449 "/home/hoffman/rose-develop/src/frontend/SageIII/preproc-c.ll"
{
                    //does this cover all cases?????????
                    preproc_column_num+=2; 
                    macroString += Rose_C_Cxx_text;

                    /*
                                //Do we need to do something like this?
                                commentString = Rose_C_Cxx_text;
                    */
                    BEGIN C_COMMENT_INMACRO;
                }
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 1461 "/home/hoffman/rose-develop/src/frontend/SageIII/preproc-c.ll"
{   // Add character to macro string; we'll fix up line termination issues at the end of the <MACRO> state.
                    macroString += Rose_C_Cxx_text;
                    preproc_column_num++; 
                }
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 1466 "/home/hoffman/rose-develop/src/frontend/SageIII/preproc-c.ll"
{ 
                                //??????????????????????????????????????????????????????????????
                                //This code copies the comment into the macrobuffer.
                                //Should we not copy it to comment buffer also?????
                                macroString += Rose_C_Cxx_text;

                                /*
                                commentString += Rose_C_Cxx_text;
                                //should we do something like this??
                                preprocessorList.addElement(PreprocessingInfo::C_StyleComment,commentString.c_str(),globalFileName,preproc_start_line_num,preproc_start_column_num,preproc_line_num-preproc_start_line_num); 
                                */
                                preproc_column_num+=strlen(Rose_C_Cxx_text); 
                                BEGIN MACRO; 
                            }
	YY_BREAK
case 83:
/* rule 83 can match eol */
YY_RULE_SETUP
#line 1480 "/home/hoffman/rose-develop/src/frontend/SageIII/preproc-c.ll"
{ 
                                macroString += Rose_C_Cxx_text;

                                //Do we need to do something like this?
                                //commentString += Rose_C_Cxx_text;

                                preproc_line_num++; preproc_column_num=1; 
                            }
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 1488 "/home/hoffman/rose-develop/src/frontend/SageIII/preproc-c.ll"
{ 
                                macroString += Rose_C_Cxx_text;

                                //Do we need to do something like this?
                                //commentString += Rose_C_Cxx_text;

                                preproc_column_num++; 
                            }
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 1496 "/home/hoffman/rose-develop/src/frontend/SageIII/preproc-c.ll"
ECHO;
	YY_BREAK
#line 2680 "/home/hoffman/rose-develop/b/src/frontend/SageIII/lex.yy.C"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(NORMAL):
case YY_STATE_EOF(C_COMMENT):
case YY_STATE_EOF(STRING_LIT):
case YY_STATE_EOF(CHAR_LIT):
case YY_STATE_EOF(C_COMMENT_INMACRO):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed Rose_C_Cxx_in at a new source and called
			 * Rose_C_Cxx_lex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = Rose_C_Cxx_in;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( Rose_C_Cxx_wrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * Rose_C_Cxx_text, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of Rose_C_Cxx_lex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					Rose_C_Cxx_realloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			Rose_C_Cxx_restart(Rose_C_Cxx_in  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) Rose_C_Cxx_realloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);
	yy_current_state += YY_AT_BOL();

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 187 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	register int yy_is_jam;
    	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 187 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 186);

	return yy_is_jam ? 0 : yy_current_state;
}

    static void yyunput (int c, register char * yy_bp )
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up Rose_C_Cxx_text */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					Rose_C_Cxx_restart(Rose_C_Cxx_in );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( Rose_C_Cxx_wrap( ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve Rose_C_Cxx_text */
	(yy_hold_char) = *++(yy_c_buf_p);

	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = (c == '\n');

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void Rose_C_Cxx_restart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        Rose_C_Cxx_ensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            Rose_C_Cxx__create_buffer(Rose_C_Cxx_in,YY_BUF_SIZE );
	}

	Rose_C_Cxx__init_buffer(YY_CURRENT_BUFFER,input_file );
	Rose_C_Cxx__load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void Rose_C_Cxx__switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		Rose_C_Cxx_pop_buffer_state();
	 *		Rose_C_Cxx_push_buffer_state(new_buffer);
     */
	Rose_C_Cxx_ensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	Rose_C_Cxx__load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (Rose_C_Cxx_wrap()) processing, but the only time this flag
	 * is looked at is after Rose_C_Cxx_wrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void Rose_C_Cxx__load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	Rose_C_Cxx_in = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE Rose_C_Cxx__create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) Rose_C_Cxx_alloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in Rose_C_Cxx__create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) Rose_C_Cxx_alloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in Rose_C_Cxx__create_buffer()" );

	b->yy_is_our_buffer = 1;

	Rose_C_Cxx__init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with Rose_C_Cxx__create_buffer()
 * 
 */
    void Rose_C_Cxx__delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		Rose_C_Cxx_free((void *) b->yy_ch_buf  );

	Rose_C_Cxx_free((void *) b  );
}

#ifndef __cplusplus
extern int isatty (int );
#endif /* __cplusplus */
    
/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a Rose_C_Cxx_restart() or at EOF.
 */
    static void Rose_C_Cxx__init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	Rose_C_Cxx__flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then Rose_C_Cxx__init_buffer was _probably_
     * called from Rose_C_Cxx_restart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void Rose_C_Cxx__flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		Rose_C_Cxx__load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void Rose_C_Cxx_push_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	Rose_C_Cxx_ensure_buffer_stack();

	/* This block is copied from Rose_C_Cxx__switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from Rose_C_Cxx__switch_to_buffer. */
	Rose_C_Cxx__load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void Rose_C_Cxx_pop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	Rose_C_Cxx__delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		Rose_C_Cxx__load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void Rose_C_Cxx_ensure_buffer_stack (void)
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)Rose_C_Cxx_alloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in Rose_C_Cxx_ensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)Rose_C_Cxx_realloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in Rose_C_Cxx_ensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE Rose_C_Cxx__scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) Rose_C_Cxx_alloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in Rose_C_Cxx__scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	Rose_C_Cxx__switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to Rose_C_Cxx_lex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       Rose_C_Cxx__scan_bytes() instead.
 */
YY_BUFFER_STATE Rose_C_Cxx__scan_string (yyconst char * yystr )
{
    
	return Rose_C_Cxx__scan_bytes(yystr,strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to Rose_C_Cxx_lex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE Rose_C_Cxx__scan_bytes  (yyconst char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) Rose_C_Cxx_alloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in Rose_C_Cxx__scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = Rose_C_Cxx__scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in Rose_C_Cxx__scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg )
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up Rose_C_Cxx_text. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		Rose_C_Cxx_text[Rose_C_Cxx_leng] = (yy_hold_char); \
		(yy_c_buf_p) = Rose_C_Cxx_text + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		Rose_C_Cxx_leng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int Rose_C_Cxx_get_lineno  (void)
{
        
    return Rose_C_Cxx_lineno;
}

/** Get the input stream.
 * 
 */
FILE *Rose_C_Cxx_get_in  (void)
{
        return Rose_C_Cxx_in;
}

/** Get the output stream.
 * 
 */
FILE *Rose_C_Cxx_get_out  (void)
{
        return Rose_C_Cxx_out;
}

/** Get the length of the current token.
 * 
 */
int Rose_C_Cxx_get_leng  (void)
{
        return Rose_C_Cxx_leng;
}

/** Get the current token.
 * 
 */

char *Rose_C_Cxx_get_text  (void)
{
        return Rose_C_Cxx_text;
}

/** Set the current line number.
 * @param line_number
 * 
 */
void Rose_C_Cxx_set_lineno (int  line_number )
{
    
    Rose_C_Cxx_lineno = line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * 
 * @see Rose_C_Cxx__switch_to_buffer
 */
void Rose_C_Cxx_set_in (FILE *  in_str )
{
        Rose_C_Cxx_in = in_str ;
}

void Rose_C_Cxx_set_out (FILE *  out_str )
{
        Rose_C_Cxx_out = out_str ;
}

int Rose_C_Cxx_get_debug  (void)
{
        return Rose_C_Cxx__flex_debug;
}

void Rose_C_Cxx_set_debug (int  bdebug )
{
        Rose_C_Cxx__flex_debug = bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from Rose_C_Cxx_lex_destroy(), so don't allocate here.
     */

    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *) 0;
    (yy_init) = 0;
    (yy_start) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    Rose_C_Cxx_in = stdin;
    Rose_C_Cxx_out = stdout;
#else
    Rose_C_Cxx_in = (FILE *) 0;
    Rose_C_Cxx_out = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * Rose_C_Cxx_lex_init()
     */
    return 0;
}

/* Rose_C_Cxx_lex_destroy is for both reentrant and non-reentrant scanners. */
int Rose_C_Cxx_lex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		Rose_C_Cxx__delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		Rose_C_Cxx_pop_buffer_state();
	}

	/* Destroy the stack itself. */
	Rose_C_Cxx_free((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * Rose_C_Cxx_lex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *Rose_C_Cxx_alloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *Rose_C_Cxx_realloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void Rose_C_Cxx_free (void * ptr )
{
	free( (char *) ptr );	/* see Rose_C_Cxx_realloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 1496 "/home/hoffman/rose-develop/src/frontend/SageIII/preproc-c.ll"



const int maxstacksize=500;
int bracestack[maxstacksize];

int top=0;
void pushbracestack(int brace_no) { bracestack[top++]=brace_no; }
int topcurlybracestack() { if(top) return bracestack[top-1]; else return -1; }
int popbracestack() { return bracestack[--top]; }
bool isemptystack() { return top==0; }

int num_of_newlines(char* s)
   {
     int num = 0;
     while(*s != '\0')
        {
          if(*s == '\n')
               num++;
          s++;
        }
     return num;
   }

// DQ (3/30/2006): Modified to use C++ style string instead of C style char* string
// ROSEAttributesList *getPreprocessorDirectives( char *fileName)
//! This function extracts the comments and CPP preprocessor control directives from the input file.
// ROSEAttributesList *getPreprocessorDirectives( std::string fileName )
// ROSEAttributesList *getPreprocessorDirectives( std::string fileName, LexTokenStreamTypePointer & input_token_stream_pointer )
ROSEAttributesList *getPreprocessorDirectives( std::string fileName )
   {
     FILE *fp = NULL;
     ROSEAttributesList *preprocessorInfoList = new ROSEAttributesList; // create a new list
     ROSE_ASSERT (preprocessorInfoList != NULL);

  // printf ("Inside of lex file: getPreprocessorDirectives() \n");
  // ROSE_ASSERT(false);

  // assert(input_token_stream_pointer == NULL);
     ROSE_token_stream_pointer = new LexTokenStreamType;
     assert(ROSE_token_stream_pointer != NULL);

  // Share a pointer to the same LexTokenStreamType just allocated
  // input_token_stream_pointer = ROSE_token_stream_pointer;
  // assert(input_token_stream_pointer != NULL);

  // Attach the token stream to the ROSEAttributesList being returned.
     preprocessorInfoList->set_rawTokenStream(ROSE_token_stream_pointer);

  // Set the global filename to be used in the PreprocessingInfo constructor.
     globalFileName = fileName;

     if ( fileName.empty() == false )
        {
          std::map<std::string,ROSEAttributesList* >::iterator iItr = mapFilenameToAttributes.find(fileName);
       // std::cout << "Trying to find fileName " << fileName << std::endl;
          if ( iItr != mapFilenameToAttributes.end())
             {
            // std::cout << "Found requested file: " << fileName << " size: " << iItr->second->size() << std::endl; 
               for(std::vector<PreprocessingInfo*>::iterator jItr = iItr->second->getList().begin(); jItr != iItr->second->getList().end(); ++jItr)
                  {
                  // std::cout << "Inserting element" <<  (*jItr)->getString() << std::endl;
                     preprocessorInfoList->insertElement(**jItr);
                  }

             }
            else
             {
               fp = fopen( fileName.c_str(), "r");
               if (fp)
                  {
                    Rose_C_Cxx_in = fp;
#if DEBUG_LEX_PASS
                    printf ("In getPreprocessorDirectives(): calling Rose_C_Cxx_lex() \n");
#endif
                    Rose_C_Cxx_lex();
#if DEBUG_LEX_PASS
                    printf ("In getPreprocessorDirectives(): DONE: calling Rose_C_Cxx_lex() \n");
#endif

                 // Writes all gathered information to stdout
                 // preprocessorList.display("TEST Collection of Comments and CPP Directives");

                 // bugfix (9/29/2001)
                 // The semantics required here is to move the elements accumulated into the
                 // preprocessorList into the preprocessorInfoList and delete them from the
                 // preprocessorList (which will be used again to accumulate PreprocessingInfo objects
                 // when the next file is processed).  We have to be able to process several files using
                 // this getPreprocessorDirectives() function.
                    preprocessorInfoList->moveElements( preprocessorList ); // create a copy that we can pass on

                 // The accumulator list should now be empty
                    assert (preprocessorList.getLength() == 0);
                    fclose(fp);  
                  }
                 else
                  {
                 // DQ (5/14/2006): Added error checking for collection of comments and CPP directives.
                    printf ("Error: can't find the requested file (%s) \n",fileName.c_str());
                 // ROSE_ASSERT(false);
                  }
             }
        }

  // printf ("In getPreprocessorDirectives(fileName = %s): preprocessorInfoList->size() = %d \n",fileName.c_str(),(int)preprocessorInfoList->size());

  // DQ (9/29/2013): Added assertion (debugging token handling in ROSE).
     ROSE_ASSERT(preprocessorInfoList->get_rawTokenStream() != NULL);

#if DEBUG_LEX_PASS
     printf ("In getPreprocessorDirectives(): preprocessorInfoList->get_rawTokenStream() = %p \n",preprocessorInfoList->get_rawTokenStream());
     printf ("In getPreprocessorDirectives(): preprocessorInfoList->get_rawTokenStream()->size() = %" PRIuPTR " \n",preprocessorInfoList->get_rawTokenStream()->size());
#endif

     return preprocessorInfoList;
   }

