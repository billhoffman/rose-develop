#line 2 "/home/hoffman/rose-develop/b/src/frontend/SageIII/omp-lex.yy.C"

#line 4 "/home/hoffman/rose-develop/b/src/frontend/SageIII/omp-lex.yy.C"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define yy_create_buffer omp__create_buffer
#define yy_delete_buffer omp__delete_buffer
#define yy_flex_debug omp__flex_debug
#define yy_init_buffer omp__init_buffer
#define yy_flush_buffer omp__flush_buffer
#define yy_load_buffer_state omp__load_buffer_state
#define yy_switch_to_buffer omp__switch_to_buffer
#define yyin omp_in
#define yyleng omp_leng
#define yylex omp_lex
#define yylineno omp_lineno
#define yyout omp_out
#define yyrestart omp_restart
#define yytext omp_text
#define yywrap omp_wrap
#define yyalloc omp_alloc
#define yyrealloc omp_realloc
#define yyfree omp_free

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE omp_restart(omp_in  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

extern int omp_leng;

extern FILE *omp_in, *omp_out;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up omp_text. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up omp_text again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via omp_restart()), so that the user can continue scanning by
	 * just pointing omp_in at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when omp_text is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int omp_leng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow omp_wrap()'s to do buffer switches
 * instead of setting up a fresh omp_in.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void omp_restart (FILE *input_file  );
void omp__switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE omp__create_buffer (FILE *file,int size  );
void omp__delete_buffer (YY_BUFFER_STATE b  );
void omp__flush_buffer (YY_BUFFER_STATE b  );
void omp_push_buffer_state (YY_BUFFER_STATE new_buffer  );
void omp_pop_buffer_state (void );

static void omp_ensure_buffer_stack (void );
static void omp__load_buffer_state (void );
static void omp__init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER omp__flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE omp__scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE omp__scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE omp__scan_bytes (yyconst char *bytes,int len  );

void *omp_alloc (yy_size_t  );
void *omp_realloc (void *,yy_size_t  );
void omp_free (void *  );

#define yy_new_buffer omp__create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        omp_ensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            omp__create_buffer(omp_in,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        omp_ensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            omp__create_buffer(omp_in,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

typedef unsigned char YY_CHAR;

FILE *omp_in = (FILE *) 0, *omp_out = (FILE *) 0;

typedef int yy_state_type;

extern int omp_lineno;

int omp_lineno = 1;

extern char *omp_text;
#define yytext_ptr omp_text

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
static void yy_fatal_error (yyconst char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up omp_text.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	omp_leng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 111
#define YY_END_OF_BUFFER 112
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[417] =
    {   0,
      109,  109,    0,    0,  112,  110,  104,  109,  110,  110,
       76,   67,   68,   74,   73,   71,   75,  103,  110,    1,
       72,   95,   66,   96,  108,  108,  108,  108,   69,  101,
       70,   77,  108,  108,  108,  108,  108,  108,  108,  108,
      108,  108,  108,  108,  108,  108,  108,  108,  108,   78,
      105,  111,  109,  100,   91,   79,   92,   89,   83,   87,
       84,   88,  102,   90,    1,   81,   97,   99,   98,   82,
      108,  108,  108,  108,   93,  108,  108,  108,  108,  108,
      108,  108,  108,  108,  108,  108,  108,  108,  108,  108,
      108,  108,  108,  108,  108,  108,  108,    7,  108,  108,

      108,  108,  108,  108,  108,  108,  108,  108,  108,  108,
      108,  108,  108,  108,  108,  108,  108,  108,  108,   49,
      108,  108,   94,   80,   86,   85,  108,  108,  108,  108,
      108,  108,  108,  108,  108,  108,  108,  108,  108,  108,
      108,  108,  108,  108,  108,  108,  108,   42,  108,  108,
      108,   20,  108,  108,  108,  108,  108,  108,   46,  108,
       38,  108,  108,  108,  108,    2,  108,  108,  108,  108,
      108,  108,  108,  108,  108,  108,  108,  108,  108,  108,
      108,  108,  108,  108,  108,  108,  108,  108,  108,  108,
      108,   15,  108,  108,  108,  108,  108,  108,  108,   44,

      108,  108,  108,  108,  108,  108,  106,  108,  108,   50,
      108,  108,  108,  108,  108,  108,    0,   34,  108,  108,
      108,  108,  108,  108,  108,  108,  108,  108,  108,  108,
       52,  108,  108,  108,    4,  108,  108,  108,  108,  108,
       63,  108,  108,  108,   48,  108,  108,   41,   60,  108,
      108,  108,  108,  108,  108,  108,  108,  108,  108,  108,
      108,   26,  108,  108,  108,  108,  108,  108,    0,    0,
      108,  108,  108,  108,  108,  108,  108,  108,  108,  108,
      108,  108,  108,  108,  108,  108,  108,  108,  108,  108,
      108,   65,  108,  108,   25,  108,  108,   36,  108,  108,

       62,  108,  108,   47,  108,  108,  108,  108,   13,  108,
      108,  108,   55,   22,    0,    0,  108,   19,  108,  108,
      108,  108,  108,  108,  108,  108,  108,   33,   18,   11,
       37,  108,  108,   51,  108,    6,   45,  108,   54,   24,
      108,  108,  108,   43,   32,  108,  108,   12,  108,  108,
      108,  108,   39,    0,  108,  108,    9,  108,   28,  108,
       14,   53,  108,   17,  108,  108,   56,  108,   21,  108,
       23,  108,  108,  108,  108,   57,  108,    0,  108,  108,
        3,  108,   10,   16,    5,  108,   64,  108,   59,   61,
      108,  108,  108,    0,  108,  108,   35,  108,  108,  108,

      107,  108,   40,  108,  108,  108,   29,  108,   31,   58,
        8,  108,   30,  108,   27,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    2,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    3,    4,    1,    1,    1,    5,    6,    1,    7,
        8,    9,   10,   11,   12,   13,   14,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   16,    1,   17,
       18,   19,    1,    1,   20,   21,   22,   23,   24,   25,
       25,   25,   26,   25,   27,   28,   25,   25,   29,   30,
       25,   25,   25,   31,   32,   25,   25,   25,   33,   25,
       34,   35,   36,   37,   38,    1,   39,   40,   41,   42,

       43,   44,   45,   46,   47,   25,   48,   49,   50,   51,
       52,   53,   25,   54,   55,   56,   57,   58,   59,   60,
       61,   25,    1,   62,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[63] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    2,    1,    1,    1,    1,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    1,    1,    1,    1,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    1
    } ;

static yyconst flex_int16_t yy_base[419] =
    {   0,
        0,    0,  430,  429,  430,  433,  433,  426,  410,  409,
       57,  433,  433,  408,   54,  433,   55,  433,  407,  409,
      433,   48,  405,   50,    0,  394,  388,  388,  433,  433,
      433,  401,   21,   37,   27,   44,   33,   43,  361,   52,
       59,   32,   47,   57,   61,   59,   71,   74,   68,   71,
      433,  433,  414,  433,  433,  433,  433,  433,  433,  433,
      433,  433,  433,  433,  401,  397,  433,  433,  433,  396,
        0,  384,  390,  381,  433,   75,  358,  353,  354,  362,
      354,   76,  358,  363,  347,   87,  347,  348,  349,  357,
      345,  343,  339,  341,  342,  346,  349,    0,  351,  335,

      338,   77,  341,   83,  337,  333,  343,  330,  336,  340,
      330,  336,  333,  337,  338,   58,  337,   81,  321,  330,
       90,  331,  433,  433,  433,  433,  350,  343,  342,  324,
      316,  317,  314,  311,  317,  322,  313,  300,  304,  310,
      319,  308,  317,  308,  298,  304,  313,    0,  297,  295,
      294,    0,  298,  305,  295,  291,  288,  300,    0,  286,
      325,  297,  292,  299,  299,    0,  293,  296,  276,  276,
      276,  288,  287,  273,  274,  285,  281,  269,  279,  275,
      279,  267,  276,  272,  279,  290,  290,  289,  263,  272,
      265,    0,  264,  259,  261,  269,   91,  260,  259,    0,

      266,  247,  262,  264,  254,  250,    0,  243,  252,    0,
      254,  240,  256,  241,  254,  249,  101,    0,  240,  243,
      233,  234,  238,  247,  244,  237,  234,  240,  234,  237,
        0,  230,  231,  234,  217,  236,  222,  221,  229,  215,
        0,  248,  247,  225,    0,  226,  223,    0,    0,  212,
      213,  209,  221,  220,  206,  210,  215,  215,  215,  208,
      201,    0,  211,  205,  200,  196,  195,  194,  198,  207,
      205,  188,  197,  199,  192,  184,  183,  188,  194,  179,
      183,  192,  190,  191,  175,  191,  187,  178,  173,  184,
      182,    0,  204,  181,    0,  168,  166,    0,  173,  180,

        0,  175,  161,    0,  177,  176,  173,  159,    0,  168,
      170,  163,    0,    0,  160,  153,  153,    0,  152,  163,
      161,  160,  155,  158,  149,  150,  147,    0,    0,    0,
        0,  150,  143,    0,  145,    0,    0,  163,    0,    0,
      150,  134,  142,    0,    0,  134,  133,    0,  141,  140,
      140,  127,  433,  128,  144,  139,    0,  132,    0,  128,
        0,    0,  136,  123,  121,  122,    0,  151,    0,  135,
        0,  134,  129,  113,  127,    0,  130,  125,  116,  127,
        0,  114,    0,    0,    0,  117,    0,  107,    0,    0,
      123,  107,  104,  105,  117,  115,    0,   98,  112,   98,

        0,  107,  433,  103,   93,  108,    0,  100,    0,    0,
        0,   85,    0,   80,    0,  433,  151,   80
    } ;

static yyconst flex_int16_t yy_def[419] =
    {   0,
      416,    1,  417,  417,  416,  416,  416,  416,  416,  416,
      416,  416,  416,  416,  416,  416,  416,  416,  416,  416,
      416,  416,  416,  416,  418,  418,  418,  418,  416,  416,
      416,  416,  418,  418,  418,  418,  418,  418,  418,  418,
      418,  418,  418,  418,  418,  418,  418,  418,  418,  416,
      416,  416,  416,  416,  416,  416,  416,  416,  416,  416,
      416,  416,  416,  416,  416,  416,  416,  416,  416,  416,
      418,  418,  418,  418,  416,  418,  418,  418,  418,  418,
      418,  418,  418,  418,  418,  418,  418,  418,  418,  418,
      418,  418,  418,  418,  418,  418,  418,  418,  418,  418,

      418,  418,  418,  418,  418,  418,  418,  418,  418,  418,
      418,  418,  418,  418,  418,  418,  418,  418,  418,  418,
      418,  418,  416,  416,  416,  416,  418,  418,  418,  418,
      418,  418,  418,  418,  418,  418,  418,  418,  418,  418,
      418,  418,  418,  418,  418,  418,  418,  418,  418,  418,
      418,  418,  418,  418,  418,  418,  418,  418,  418,  418,
      418,  418,  418,  418,  418,  418,  418,  418,  418,  418,
      418,  418,  418,  418,  418,  418,  418,  418,  418,  418,
      418,  418,  418,  418,  418,  418,  418,  418,  418,  418,
      418,  418,  418,  418,  418,  418,  418,  418,  418,  418,

      418,  418,  418,  418,  418,  418,  418,  418,  418,  418,
      418,  418,  418,  418,  418,  418,  416,  418,  418,  418,
      418,  418,  418,  418,  418,  418,  418,  418,  418,  418,
      418,  418,  418,  418,  418,  418,  418,  418,  418,  418,
      418,  418,  418,  418,  418,  418,  418,  418,  418,  418,
      418,  418,  418,  418,  418,  418,  418,  418,  418,  418,
      418,  418,  418,  418,  418,  418,  418,  418,  416,  416,
      418,  418,  418,  418,  418,  418,  418,  418,  418,  418,
      418,  418,  418,  418,  418,  418,  418,  418,  418,  418,
      418,  418,  418,  418,  418,  418,  418,  418,  418,  418,

      418,  418,  418,  418,  418,  418,  418,  418,  418,  418,
      418,  418,  418,  418,  416,  416,  418,  418,  418,  418,
      418,  418,  418,  418,  418,  418,  418,  418,  418,  418,
      418,  418,  418,  418,  418,  418,  418,  418,  418,  418,
      418,  418,  418,  418,  418,  418,  418,  418,  418,  418,
      418,  418,  416,  416,  418,  418,  418,  418,  418,  418,
      418,  418,  418,  418,  418,  418,  418,  418,  418,  418,
      418,  418,  418,  418,  418,  418,  418,  416,  418,  418,
      418,  418,  418,  418,  418,  418,  418,  418,  418,  418,
      418,  418,  418,  416,  418,  418,  418,  418,  418,  418,

      418,  418,  416,  418,  418,  418,  418,  418,  418,  418,
      418,  418,  418,  418,  418,    0,  416,  416
    } ;

static yyconst flex_int16_t yy_nxt[496] =
    {   0,
        6,    7,    8,    9,   10,   11,   12,   13,   14,   15,
       16,   17,   18,   19,   20,   21,   22,   23,   24,   25,
       26,   27,   28,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   29,   30,   31,   32,   25,   33,   34,
       35,   36,   37,   38,   39,   25,   40,   25,   41,   42,
       43,   44,   45,   46,   47,   48,   49,   25,   25,   25,
       25,   50,   56,   59,   66,   67,   61,   69,   70,   76,
      102,   60,   62,   63,   57,   79,   77,   78,   82,   80,
       83,   71,   85,   90,  103,   81,   86,   84,  123,   92,
       87,   93,   91,   97,   94,   98,   95,  100,  104,  108,

       88,  110,   99,  105,   89,  101,  106,  176,  177,  112,
      107,  113,  118,  114,  109,  111,  115,  116,  121,  119,
      122,  130,  415,  131,  137,  120,  117,  142,  138,  159,
      143,  160,  124,  162,  179,  180,  183,  251,  163,  269,
      414,  164,  413,  252,  144,  184,  412,  411,  410,  409,
      270,   51,   51,  408,  407,  406,  405,  404,  403,  402,
      401,  400,  399,  398,  397,  396,  395,  394,  393,  392,
      391,  390,  389,  388,  387,  386,  385,  384,  383,  382,
      381,  380,  379,  378,  377,  376,  375,  374,  373,  372,
      371,  370,  369,  368,  367,  366,  365,  364,  363,  362,

      361,  360,  359,  358,  357,  356,  355,  354,  353,  352,
      351,  350,  349,  348,  347,  346,  345,  344,  343,  342,
      341,  340,  339,  338,  337,  336,  335,  334,  333,  332,
      331,  330,  329,  328,  327,  326,  325,  324,  323,  322,
      321,  320,  319,  318,  317,  316,  315,  314,  313,  312,
      311,  310,  309,  308,  307,  306,  305,  304,  303,  302,
      301,  300,  299,  298,  297,  296,  295,  294,  293,  292,
      291,  290,  289,  288,  287,  286,  285,  284,  283,  282,
      281,  280,  279,  278,  277,  276,  275,  274,  273,  272,
      271,  268,  267,  266,  265,  264,  263,  262,  261,  260,

      259,  258,  257,  256,  255,  254,  253,  250,  249,  248,
      247,  246,  245,  244,  243,  242,  241,  240,  239,  238,
      237,  236,  235,  234,  233,  232,  231,  230,  229,  228,
      227,  226,  225,  224,  223,  222,  221,  220,  219,  218,
      217,  216,  215,  214,  213,  212,  211,  210,  209,  208,
      207,  206,  205,  204,  203,  202,  201,  200,  199,  198,
      197,  196,  195,  194,  193,  192,  191,  190,  189,  188,
      187,  186,  185,  182,  181,  178,  175,  174,  173,  172,
      171,  170,  169,  168,  167,  166,  165,  161,  158,  157,
      156,  155,  154,  153,  152,  151,  150,  149,  148,  147,

      146,  145,  141,  140,  139,  136,  135,  134,  133,  132,
      129,  128,  127,  126,  125,   65,   53,   96,   75,   74,
       73,   72,   68,   65,   64,   58,   55,   54,   53,  416,
       52,   52,    5,  416,  416,  416,  416,  416,  416,  416,
      416,  416,  416,  416,  416,  416,  416,  416,  416,  416,
      416,  416,  416,  416,  416,  416,  416,  416,  416,  416,
      416,  416,  416,  416,  416,  416,  416,  416,  416,  416,
      416,  416,  416,  416,  416,  416,  416,  416,  416,  416,
      416,  416,  416,  416,  416,  416,  416,  416,  416,  416,
      416,  416,  416,  416,  416

    } ;

static yyconst flex_int16_t yy_chk[496] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,   11,   15,   22,   22,   17,   24,   24,   33,
       42,   15,   17,   17,   11,   34,   33,   33,   35,   34,
       35,  418,   36,   37,   42,   34,   36,   35,   50,   38,
       36,   38,   37,   40,   38,   40,   38,   41,   43,   45,

       36,   46,   40,   43,   36,   41,   44,  116,  116,   47,
       44,   47,   48,   47,   45,   46,   47,   47,   49,   48,
       49,   76,  414,   76,   82,   48,   47,   86,   82,  102,
       86,  102,   50,  104,  118,  118,  121,  197,  104,  217,
      412,  104,  408,  197,   86,  121,  406,  405,  404,  402,
      217,  417,  417,  400,  399,  398,  396,  395,  394,  393,
      392,  391,  388,  386,  382,  380,  379,  378,  377,  375,
      374,  373,  372,  370,  368,  366,  365,  364,  363,  360,
      358,  356,  355,  354,  352,  351,  350,  349,  347,  346,
      343,  342,  341,  338,  335,  333,  332,  327,  326,  325,

      324,  323,  322,  321,  320,  319,  317,  316,  315,  312,
      311,  310,  308,  307,  306,  305,  303,  302,  300,  299,
      297,  296,  294,  293,  291,  290,  289,  288,  287,  286,
      285,  284,  283,  282,  281,  280,  279,  278,  277,  276,
      275,  274,  273,  272,  271,  270,  269,  268,  267,  266,
      265,  264,  263,  261,  260,  259,  258,  257,  256,  255,
      254,  253,  252,  251,  250,  247,  246,  244,  243,  242,
      240,  239,  238,  237,  236,  235,  234,  233,  232,  230,
      229,  228,  227,  226,  225,  224,  223,  222,  221,  220,
      219,  216,  215,  214,  213,  212,  211,  209,  208,  206,

      205,  204,  203,  202,  201,  199,  198,  196,  195,  194,
      193,  191,  190,  189,  188,  187,  186,  185,  184,  183,
      182,  181,  180,  179,  178,  177,  176,  175,  174,  173,
      172,  171,  170,  169,  168,  167,  165,  164,  163,  162,
      161,  160,  158,  157,  156,  155,  154,  153,  151,  150,
      149,  147,  146,  145,  144,  143,  142,  141,  140,  139,
      138,  137,  136,  135,  134,  133,  132,  131,  130,  129,
      128,  127,  122,  120,  119,  117,  115,  114,  113,  112,
      111,  110,  109,  108,  107,  106,  105,  103,  101,  100,
       99,   97,   96,   95,   94,   93,   92,   91,   90,   89,

       88,   87,   85,   84,   83,   81,   80,   79,   78,   77,
       74,   73,   72,   70,   66,   65,   53,   39,   32,   28,
       27,   26,   23,   20,   19,   14,   10,    9,    8,    5,
        4,    3,  416,  416,  416,  416,  416,  416,  416,  416,
      416,  416,  416,  416,  416,  416,  416,  416,  416,  416,
      416,  416,  416,  416,  416,  416,  416,  416,  416,  416,
      416,  416,  416,  416,  416,  416,  416,  416,  416,  416,
      416,  416,  416,  416,  416,  416,  416,  416,  416,  416,
      416,  416,  416,  416,  416,  416,  416,  416,  416,  416,
      416,  416,  416,  416,  416

    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int omp__flex_debug;
int omp__flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *omp_text;
#line 1 "/home/hoffman/rose-develop/src/frontend/SageIII/omplexer.ll"

#line 6 "/home/hoffman/rose-develop/src/frontend/SageIII/omplexer.ll"

/* lex requires me to use extern "C" here */
extern "C" int omp_wrap() { return 1; }

extern int omp_lex();

#include <stdio.h>
#include <string>
#include <string.h>
#include "ompparser.h"

/* Moved from Makefile.am to the source file to work with --with-pch 
Liao 12/10/2009 */
#define YY_NO_TOP_STATE
#define YY_NO_POP_STATE

static const char* ompparserinput = NULL;
static std::string gExpressionString;

/* Liao 6/11/2010,
OpenMP does not preclude the use of clause names as regular variable names.
For example, num_threads could be a clause name or a variable in the variable list.

We introduce a flag to indicate the context: within a variable list like (a,y,y) or outside of it
  We check '(' or ')' to set it to true or false as parsing proceed */
extern bool b_within_variable_list ; /* = false; */

/*conditionally return either a clause token or ID_EXPRESSION, depending on the context.
  We should use it for any OpenMP keyword which could potentially used by users as a variable within a variable list.*/
static int cond_return (int input);
/* pass user specified string to buf, indicate the size using 'result', 
   and shift the current position pointer of user input afterwards 
   to prepare next round of token recognition!!
*/
#define YY_INPUT(buf, result, max_size) { \
                if (*ompparserinput == '\0') result = 0; \
                else { strncpy(buf, ompparserinput, max_size); \
                        buf[max_size] = 0; \
                        result = strlen(buf); \
                        ompparserinput += result; \
                } \
                }

#line 772 "/home/hoffman/rose-develop/b/src/frontend/SageIII/omp-lex.yy.C"

#define INITIAL 0
#define EXPR 1

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals (void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int omp_lex_destroy (void );

int omp_get_debug (void );

void omp_set_debug (int debug_flag  );

YY_EXTRA_TYPE omp_get_extra (void );

void omp_set_extra (YY_EXTRA_TYPE user_defined  );

FILE *omp_get_in (void );

void omp_set_in  (FILE * in_str  );

FILE *omp_get_out (void );

void omp_set_out  (FILE * out_str  );

int omp_get_leng (void );

char *omp_get_text (void );

int omp_get_lineno (void );

void omp_set_lineno (int line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int omp_wrap (void );
#else
extern int omp_wrap (void );
#endif
#endif

    static void yyunput (int c,char *buf_ptr  );
    
#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

        static int yy_start_stack_ptr = 0;
        static int yy_start_stack_depth = 0;
        static int *yy_start_stack = NULL;
    
    static void yy_push_state (int new_state );
    
    static void yy_pop_state (void );
    
    static int yy_top_state (void );
    
/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( omp_text, omp_leng, 1, omp_out )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( omp_in )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( omp_in ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, omp_in))==0 && ferror(omp_in)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(omp_in); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int omp_lex (void);

#define YY_DECL int omp_lex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after omp_text and omp_leng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
#line 57 "/home/hoffman/rose-develop/src/frontend/SageIII/omplexer.ll"

#line 972 "/home/hoffman/rose-develop/b/src/frontend/SageIII/omp-lex.yy.C"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! omp_in )
			omp_in = stdin;

		if ( ! omp_out )
			omp_out = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			omp_ensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				omp__create_buffer(omp_in,YY_BUF_SIZE );
		}

		omp__load_buffer_state( );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of omp_text. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 417 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 433 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 58 "/home/hoffman/rose-develop/src/frontend/SageIII/omplexer.ll"
{ omp_lval.itype = atoi(strdup(omp_text)); return (ICONSTANT); }
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 59 "/home/hoffman/rose-develop/src/frontend/SageIII/omplexer.ll"
{ return cond_return ( OMP); }
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 60 "/home/hoffman/rose-develop/src/frontend/SageIII/omplexer.ll"
{ return cond_return ( PARALLEL); }
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 61 "/home/hoffman/rose-develop/src/frontend/SageIII/omplexer.ll"
{ return cond_return ( TASK ); }
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 62 "/home/hoffman/rose-develop/src/frontend/SageIII/omplexer.ll"
{ return cond_return ( TASKWAIT ); }
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 63 "/home/hoffman/rose-develop/src/frontend/SageIII/omplexer.ll"
{ return cond_return ( UNTIED );}
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 64 "/home/hoffman/rose-develop/src/frontend/SageIII/omplexer.ll"
{ return ( IF); } /*if is a keyword in C/C++, no change to be a variable*/
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 65 "/home/hoffman/rose-develop/src/frontend/SageIII/omplexer.ll"
{ /*Can be either a clause name or a variable name */ 
                  return cond_return (NUM_THREADS);
                  /*
                  if (b_within_variable_list)
                  {
                    omp_lval.stype = strdup(omp_text);
                     return ID_EXPRESSION;
                  }
                  else 
                    return ( NUM_THREADS); 
                    */
                } 
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 77 "/home/hoffman/rose-develop/src/frontend/SageIII/omplexer.ll"
{ return cond_return ( ORDERED  ); }
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 78 "/home/hoffman/rose-develop/src/frontend/SageIII/omplexer.ll"
{ return cond_return ( SCHEDULE ); }
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 80 "/home/hoffman/rose-develop/src/frontend/SageIII/omplexer.ll"
{ return ( STATIC ); }  /*keyword in C/C++ */
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 81 "/home/hoffman/rose-develop/src/frontend/SageIII/omplexer.ll"
{ return cond_return ( DYNAMIC ); } 
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 82 "/home/hoffman/rose-develop/src/frontend/SageIII/omplexer.ll"
{ return cond_return ( GUIDED ); }
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 83 "/home/hoffman/rose-develop/src/frontend/SageIII/omplexer.ll"
{ return cond_return ( RUNTIME ); }
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 84 "/home/hoffman/rose-develop/src/frontend/SageIII/omplexer.ll"
{ return ( AUTO ); } /*keyword in C/C++ ?*/
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 86 "/home/hoffman/rose-develop/src/frontend/SageIII/omplexer.ll"
{ return cond_return  ( SECTIONS ); }
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 87 "/home/hoffman/rose-develop/src/frontend/SageIII/omplexer.ll"
{ return cond_return ( SECTION ); }
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 88 "/home/hoffman/rose-develop/src/frontend/SageIII/omplexer.ll"
{ return cond_return ( SINGLE ); }
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 89 "/home/hoffman/rose-develop/src/frontend/SageIII/omplexer.ll"
{ return cond_return ( NOWAIT); }
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 90 "/home/hoffman/rose-develop/src/frontend/SageIII/omplexer.ll"
{ return ( FOR ); } /*keyword in C/C++ */
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 91 "/home/hoffman/rose-develop/src/frontend/SageIII/omplexer.ll"
{ return cond_return ( COLLAPSE ); }
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 92 "/home/hoffman/rose-develop/src/frontend/SageIII/omplexer.ll"
{ return cond_return ( MASTER ); }
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 93 "/home/hoffman/rose-develop/src/frontend/SageIII/omplexer.ll"
{ return cond_return ( CRITICAL ); }
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 94 "/home/hoffman/rose-develop/src/frontend/SageIII/omplexer.ll"
{ return cond_return ( BARRIER ); }
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 95 "/home/hoffman/rose-develop/src/frontend/SageIII/omplexer.ll"
{ return cond_return ( ATOMIC ); }
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 96 "/home/hoffman/rose-develop/src/frontend/SageIII/omplexer.ll"
{ return cond_return ( FLUSH ); }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 97 "/home/hoffman/rose-develop/src/frontend/SageIII/omplexer.ll"
{ return cond_return ( THREADPRIVATE ); }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 98 "/home/hoffman/rose-develop/src/frontend/SageIII/omplexer.ll"
{ return cond_return ( PRIVATE ); }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 99 "/home/hoffman/rose-develop/src/frontend/SageIII/omplexer.ll"
{ return cond_return ( COPYPRIVATE ); }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 100 "/home/hoffman/rose-develop/src/frontend/SageIII/omplexer.ll"
{ return cond_return ( FIRSTPRIVATE ); }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 101 "/home/hoffman/rose-develop/src/frontend/SageIII/omplexer.ll"
{ return cond_return ( LASTPRIVATE ); }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 102 "/home/hoffman/rose-develop/src/frontend/SageIII/omplexer.ll"
{ return cond_return ( DEFAULT ); }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 103 "/home/hoffman/rose-develop/src/frontend/SageIII/omplexer.ll"
{ return cond_return ( SHARED ); } 
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 104 "/home/hoffman/rose-develop/src/frontend/SageIII/omplexer.ll"
{ return cond_return ( NONE ); } 
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 105 "/home/hoffman/rose-develop/src/frontend/SageIII/omplexer.ll"
{ return cond_return ( REDUCTION ); }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 106 "/home/hoffman/rose-develop/src/frontend/SageIII/omplexer.ll"
{ return cond_return ( COPYIN ); }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 108 "/home/hoffman/rose-develop/src/frontend/SageIII/omplexer.ll"
{return cond_return ( TARGET ); }
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 109 "/home/hoffman/rose-develop/src/frontend/SageIII/omplexer.ll"
{return cond_return ( MPI ); } /*Experimental keywords to support scaling up to MPI processes */
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 110 "/home/hoffman/rose-develop/src/frontend/SageIII/omplexer.ll"
{return cond_return ( MPI_ALL ); }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 111 "/home/hoffman/rose-develop/src/frontend/SageIII/omplexer.ll"
{return cond_return ( MPI_MASTER ); }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 112 "/home/hoffman/rose-develop/src/frontend/SageIII/omplexer.ll"
{return cond_return ( TARGET_BEGIN ); }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 113 "/home/hoffman/rose-develop/src/frontend/SageIII/omplexer.ll"
{return cond_return ( TARGET_END ); }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 114 "/home/hoffman/rose-develop/src/frontend/SageIII/omplexer.ll"
{return cond_return ( DECLARE ); }
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 115 "/home/hoffman/rose-develop/src/frontend/SageIII/omplexer.ll"
{return cond_return ( DATA ); }
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 116 "/home/hoffman/rose-develop/src/frontend/SageIII/omplexer.ll"
{return cond_return ( UPDATE ); }
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 117 "/home/hoffman/rose-develop/src/frontend/SageIII/omplexer.ll"
{return cond_return ( MAP ); }
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 118 "/home/hoffman/rose-develop/src/frontend/SageIII/omplexer.ll"
{return cond_return ( DEVICE ); }
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 119 "/home/hoffman/rose-develop/src/frontend/SageIII/omplexer.ll"
{return cond_return ( ALLOC ); }
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 120 "/home/hoffman/rose-develop/src/frontend/SageIII/omplexer.ll"
{return cond_return ( TO ); /* change the user level keyword to conform to  OpenMP 4.0 */}
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 121 "/home/hoffman/rose-develop/src/frontend/SageIII/omplexer.ll"
{return cond_return ( FROM ); }
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 122 "/home/hoffman/rose-develop/src/frontend/SageIII/omplexer.ll"
{return cond_return ( TOFROM ); }
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 123 "/home/hoffman/rose-develop/src/frontend/SageIII/omplexer.ll"
{return cond_return ( SIMD ); }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 124 "/home/hoffman/rose-develop/src/frontend/SageIII/omplexer.ll"
{return cond_return ( SAFELEN ); }
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 125 "/home/hoffman/rose-develop/src/frontend/SageIII/omplexer.ll"
{return cond_return ( ALIGNED ); }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 126 "/home/hoffman/rose-develop/src/frontend/SageIII/omplexer.ll"
{return cond_return ( LINEAR ); }
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 127 "/home/hoffman/rose-develop/src/frontend/SageIII/omplexer.ll"
{return cond_return ( UNIFORM ); }
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 128 "/home/hoffman/rose-develop/src/frontend/SageIII/omplexer.ll"
{return cond_return ( INBRANCH ); }
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 129 "/home/hoffman/rose-develop/src/frontend/SageIII/omplexer.ll"
{return cond_return ( NOTINBRANCH ); }
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 131 "/home/hoffman/rose-develop/src/frontend/SageIII/omplexer.ll"
{return ( DIST_DATA); } /*Extensions for data distribution clause
It is tricky to support mixed variable vs. keyword parsing for dist_data() since it is part of variable list parsing 
We enforce that users won't use variable names colliding with the keywords (no cond_return() is used)
TODO: later we can relax this restriction. Fine-grain control of cond_return with new flags.
*/
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 136 "/home/hoffman/rose-develop/src/frontend/SageIII/omplexer.ll"
{return ( BLOCK ); }
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 137 "/home/hoffman/rose-develop/src/frontend/SageIII/omplexer.ll"
{return ( DUPLICATE ); }
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 138 "/home/hoffman/rose-develop/src/frontend/SageIII/omplexer.ll"
{return ( CYCLIC ); }
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 140 "/home/hoffman/rose-develop/src/frontend/SageIII/omplexer.ll"
{return ( BLOCK ); }
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 141 "/home/hoffman/rose-develop/src/frontend/SageIII/omplexer.ll"
{return ( DUPLICATE ); }
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 142 "/home/hoffman/rose-develop/src/frontend/SageIII/omplexer.ll"
{return ( CYCLIC ); }
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 144 "/home/hoffman/rose-develop/src/frontend/SageIII/omplexer.ll"
{ return('='); }
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 145 "/home/hoffman/rose-develop/src/frontend/SageIII/omplexer.ll"
{ return ('('); }
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 146 "/home/hoffman/rose-develop/src/frontend/SageIII/omplexer.ll"
{ return (')'); }
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 147 "/home/hoffman/rose-develop/src/frontend/SageIII/omplexer.ll"
{ return ('['); }
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 148 "/home/hoffman/rose-develop/src/frontend/SageIII/omplexer.ll"
{ return (']'); }
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 149 "/home/hoffman/rose-develop/src/frontend/SageIII/omplexer.ll"
{ return (','); }
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 150 "/home/hoffman/rose-develop/src/frontend/SageIII/omplexer.ll"
{ return (':'); }
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 151 "/home/hoffman/rose-develop/src/frontend/SageIII/omplexer.ll"
{ return ('+'); }
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 152 "/home/hoffman/rose-develop/src/frontend/SageIII/omplexer.ll"
{ return ('*'); }
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 153 "/home/hoffman/rose-develop/src/frontend/SageIII/omplexer.ll"
{ return ('-'); }
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 154 "/home/hoffman/rose-develop/src/frontend/SageIII/omplexer.ll"
{ return ('&'); }
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 155 "/home/hoffman/rose-develop/src/frontend/SageIII/omplexer.ll"
{ return ('^'); }
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 156 "/home/hoffman/rose-develop/src/frontend/SageIII/omplexer.ll"
{ return ('|'); }
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 157 "/home/hoffman/rose-develop/src/frontend/SageIII/omplexer.ll"
{ return (LOGAND); }
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 158 "/home/hoffman/rose-develop/src/frontend/SageIII/omplexer.ll"
{ return (LOGOR); }
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 159 "/home/hoffman/rose-develop/src/frontend/SageIII/omplexer.ll"
{ return (SHLEFT); }
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 160 "/home/hoffman/rose-develop/src/frontend/SageIII/omplexer.ll"
{ return (SHRIGHT); }
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 161 "/home/hoffman/rose-develop/src/frontend/SageIII/omplexer.ll"
{ return (PLUSPLUS); }
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 162 "/home/hoffman/rose-develop/src/frontend/SageIII/omplexer.ll"
{ return (MINUSMINUS); }
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 164 "/home/hoffman/rose-develop/src/frontend/SageIII/omplexer.ll"
{return(RIGHT_ASSIGN2); }
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 165 "/home/hoffman/rose-develop/src/frontend/SageIII/omplexer.ll"
{return(LEFT_ASSIGN2); }
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 166 "/home/hoffman/rose-develop/src/frontend/SageIII/omplexer.ll"
{return(ADD_ASSIGN2); }
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 167 "/home/hoffman/rose-develop/src/frontend/SageIII/omplexer.ll"
{return(SUB_ASSIGN2); }
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 168 "/home/hoffman/rose-develop/src/frontend/SageIII/omplexer.ll"
{return(MUL_ASSIGN2); }
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 169 "/home/hoffman/rose-develop/src/frontend/SageIII/omplexer.ll"
{return(DIV_ASSIGN2); }
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 170 "/home/hoffman/rose-develop/src/frontend/SageIII/omplexer.ll"
{return(MOD_ASSIGN2); }
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 171 "/home/hoffman/rose-develop/src/frontend/SageIII/omplexer.ll"
{return(AND_ASSIGN2); }
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 172 "/home/hoffman/rose-develop/src/frontend/SageIII/omplexer.ll"
{return(XOR_ASSIGN2); }
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 173 "/home/hoffman/rose-develop/src/frontend/SageIII/omplexer.ll"
{return(OR_ASSIGN2); }
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 175 "/home/hoffman/rose-develop/src/frontend/SageIII/omplexer.ll"
{ return ('<'); }
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 176 "/home/hoffman/rose-develop/src/frontend/SageIII/omplexer.ll"
{ return ('>'); }
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 177 "/home/hoffman/rose-develop/src/frontend/SageIII/omplexer.ll"
{ return (LE_OP2);}
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 178 "/home/hoffman/rose-develop/src/frontend/SageIII/omplexer.ll"
{ return (GE_OP2);}
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 179 "/home/hoffman/rose-develop/src/frontend/SageIII/omplexer.ll"
{ return (EQ_OP2);}
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 180 "/home/hoffman/rose-develop/src/frontend/SageIII/omplexer.ll"
{ return (NE_OP2);}
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 181 "/home/hoffman/rose-develop/src/frontend/SageIII/omplexer.ll"
{ /*printf("found a backslash\n"); This does not work properly but can be ignored*/}
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 183 "/home/hoffman/rose-develop/src/frontend/SageIII/omplexer.ll"
{ return (PTR_TO); }
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 184 "/home/hoffman/rose-develop/src/frontend/SageIII/omplexer.ll"
{ return ('.'); }
	YY_BREAK
case 104:
/* rule 104 can match eol */
YY_RULE_SETUP
#line 186 "/home/hoffman/rose-develop/src/frontend/SageIII/omplexer.ll"
{ /* printf("found a new line\n"); */ /* return (NEWLINE); We ignore NEWLINE since we only care about the pragma string , We relax the syntax check by allowing it as part of line continuation */ }
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 188 "/home/hoffman/rose-develop/src/frontend/SageIII/omplexer.ll"
{ int c = omp_text[0];
                  int parenCount = 1;
                  for (;;) {
                        if (c == EOF)
                                return LEXICALERROR;
                        if (c == ')')
                                --parenCount;
                        if (parenCount == 0) {
                                unput(')');
                                omp_lval.stype =strdup(gExpressionString.c_str()); 
                                gExpressionString = "";
                                BEGIN(INITIAL);
                                return EXPRESSION;
                        }
                        gExpressionString += c;
                        if (c == '(')
                                parenCount++;
                        c = yyinput();
                  }
                        
                }
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 210 "/home/hoffman/rose-develop/src/frontend/SageIII/omplexer.ll"
{ return (EXPRESSION); }
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 211 "/home/hoffman/rose-develop/src/frontend/SageIII/omplexer.ll"
{ return (IDENTIFIER); /*not in use for now*/ }
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 212 "/home/hoffman/rose-develop/src/frontend/SageIII/omplexer.ll"
{ omp_lval.stype = strdup(omp_text); 
                  return (ID_EXPRESSION); }
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 215 "/home/hoffman/rose-develop/src/frontend/SageIII/omplexer.ll"
;
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 216 "/home/hoffman/rose-develop/src/frontend/SageIII/omplexer.ll"
{ return (LEXICALERROR);}
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 218 "/home/hoffman/rose-develop/src/frontend/SageIII/omplexer.ll"
ECHO;
	YY_BREAK
#line 1647 "/home/hoffman/rose-develop/b/src/frontend/SageIII/omp-lex.yy.C"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(EXPR):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed omp_in at a new source and called
			 * omp_lex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = omp_in;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( omp_wrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * omp_text, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of omp_lex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					omp_realloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			omp_restart(omp_in  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) omp_realloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 417 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	register int yy_is_jam;
    	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 417 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 416);

	return yy_is_jam ? 0 : yy_current_state;
}

    static void yyunput (int c, register char * yy_bp )
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up omp_text */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					omp_restart(omp_in );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( omp_wrap( ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve omp_text */
	(yy_hold_char) = *++(yy_c_buf_p);

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void omp_restart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        omp_ensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            omp__create_buffer(omp_in,YY_BUF_SIZE );
	}

	omp__init_buffer(YY_CURRENT_BUFFER,input_file );
	omp__load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void omp__switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		omp_pop_buffer_state();
	 *		omp_push_buffer_state(new_buffer);
     */
	omp_ensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	omp__load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (omp_wrap()) processing, but the only time this flag
	 * is looked at is after omp_wrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void omp__load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	omp_in = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE omp__create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) omp_alloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in omp__create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) omp_alloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in omp__create_buffer()" );

	b->yy_is_our_buffer = 1;

	omp__init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with omp__create_buffer()
 * 
 */
    void omp__delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		omp_free((void *) b->yy_ch_buf  );

	omp_free((void *) b  );
}

#ifndef __cplusplus
extern int isatty (int );
#endif /* __cplusplus */
    
/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a omp_restart() or at EOF.
 */
    static void omp__init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	omp__flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then omp__init_buffer was _probably_
     * called from omp_restart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void omp__flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		omp__load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void omp_push_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	omp_ensure_buffer_stack();

	/* This block is copied from omp__switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from omp__switch_to_buffer. */
	omp__load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void omp_pop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	omp__delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		omp__load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void omp_ensure_buffer_stack (void)
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)omp_alloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in omp_ensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)omp_realloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in omp_ensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE omp__scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) omp_alloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in omp__scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	omp__switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to omp_lex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       omp__scan_bytes() instead.
 */
YY_BUFFER_STATE omp__scan_string (yyconst char * yystr )
{
    
	return omp__scan_bytes(yystr,strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to omp_lex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE omp__scan_bytes  (yyconst char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) omp_alloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in omp__scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = omp__scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in omp__scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

    static void yy_push_state (int  new_state )
{
    	if ( (yy_start_stack_ptr) >= (yy_start_stack_depth) )
		{
		yy_size_t new_size;

		(yy_start_stack_depth) += YY_START_STACK_INCR;
		new_size = (yy_start_stack_depth) * sizeof( int );

		if ( ! (yy_start_stack) )
			(yy_start_stack) = (int *) omp_alloc(new_size  );

		else
			(yy_start_stack) = (int *) omp_realloc((void *) (yy_start_stack),new_size  );

		if ( ! (yy_start_stack) )
			YY_FATAL_ERROR( "out of memory expanding start-condition stack" );
		}

	(yy_start_stack)[(yy_start_stack_ptr)++] = YY_START;

	BEGIN(new_state);
}

    static void yy_pop_state  (void)
{
    	if ( --(yy_start_stack_ptr) < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN((yy_start_stack)[(yy_start_stack_ptr)]);
}

    static int yy_top_state  (void)
{
    	return (yy_start_stack)[(yy_start_stack_ptr) - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg )
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up omp_text. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		omp_text[omp_leng] = (yy_hold_char); \
		(yy_c_buf_p) = omp_text + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		omp_leng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int omp_get_lineno  (void)
{
        
    return omp_lineno;
}

/** Get the input stream.
 * 
 */
FILE *omp_get_in  (void)
{
        return omp_in;
}

/** Get the output stream.
 * 
 */
FILE *omp_get_out  (void)
{
        return omp_out;
}

/** Get the length of the current token.
 * 
 */
int omp_get_leng  (void)
{
        return omp_leng;
}

/** Get the current token.
 * 
 */

char *omp_get_text  (void)
{
        return omp_text;
}

/** Set the current line number.
 * @param line_number
 * 
 */
void omp_set_lineno (int  line_number )
{
    
    omp_lineno = line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * 
 * @see omp__switch_to_buffer
 */
void omp_set_in (FILE *  in_str )
{
        omp_in = in_str ;
}

void omp_set_out (FILE *  out_str )
{
        omp_out = out_str ;
}

int omp_get_debug  (void)
{
        return omp__flex_debug;
}

void omp_set_debug (int  bdebug )
{
        omp__flex_debug = bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from omp_lex_destroy(), so don't allocate here.
     */

    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *) 0;
    (yy_init) = 0;
    (yy_start) = 0;

    (yy_start_stack_ptr) = 0;
    (yy_start_stack_depth) = 0;
    (yy_start_stack) =  NULL;

/* Defined in main.c */
#ifdef YY_STDINIT
    omp_in = stdin;
    omp_out = stdout;
#else
    omp_in = (FILE *) 0;
    omp_out = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * omp_lex_init()
     */
    return 0;
}

/* omp_lex_destroy is for both reentrant and non-reentrant scanners. */
int omp_lex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		omp__delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		omp_pop_buffer_state();
	}

	/* Destroy the stack itself. */
	omp_free((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Destroy the start condition stack. */
        omp_free((yy_start_stack)  );
        (yy_start_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * omp_lex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *omp_alloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *omp_realloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void omp_free (void * ptr )
{
	free( (char *) ptr );	/* see omp_realloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 218 "/home/hoffman/rose-develop/src/frontend/SageIII/omplexer.ll"




/* yy_push_state can't be called outside of this file, provide a wrapper */
extern void omp_parse_expr() {
        yy_push_state(EXPR);
}

/* entry point invoked by callers to start scanning for a string */
extern void omp_lexer_init(const char* str) {
  ompparserinput = str;
  /* We have omp_ suffix for all flex functions */
  omp_restart(omp_in);
}
/*Conditional return ID_EXPRESSION or input based on the context*/
static int cond_return (int input)
{
  if (b_within_variable_list)
  {
    omp_lval.stype = strdup(omp_text);
    return ID_EXPRESSION;
  }
  else
    return ( input); 
}
/**
 * @file
 * Lexer for OpenMP-pragmas.
 */


