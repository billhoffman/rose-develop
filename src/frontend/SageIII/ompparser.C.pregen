/* A Bison parser, made by GNU Bison 3.0.2.  */

/* Bison implementation for Yacc-like parsers in C

   Copyright (C) 1984, 1989-1990, 2000-2013 Free Software Foundation, Inc.

   This program is free software: you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation, either version 3 of the License, or
   (at your option) any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */

/* As a special exception, you may create a larger work that contains
   part or all of the Bison parser skeleton and distribute that work
   under terms of your choice, so long as that work isn't itself a
   parser generator using the skeleton or a modified version thereof
   as a parser skeleton.  Alternatively, if you modify or redistribute
   the parser skeleton itself, you may (at your option) remove this
   special exception, which will cause the skeleton and the resulting
   Bison output files to be licensed under the GNU General Public
   License without this special exception.

   This special exception was added by the Free Software Foundation in
   version 2.2 of Bison.  */

/* C LALR(1) parser skeleton written by Richard Stallman, by
   simplifying the original so-called "semantic" parser.  */

/* All symbols defined below should begin with yy or YY, to avoid
   infringing on user name space.  This should be done even for local
   variables, as they might otherwise be expanded by user macros.
   There are some unavoidable exceptions within include files to
   define necessary library symbols; they are noted "INFRINGES ON
   USER NAME SPACE" below.  */

/* Identify Bison output.  */
#define YYBISON 1

/* Bison version.  */
#define YYBISON_VERSION "3.0.2"

/* Skeleton name.  */
#define YYSKELETON_NAME "yacc.c"

/* Pure parsers.  */
#define YYPURE 0

/* Push parsers.  */
#define YYPUSH 0

/* Pull parsers.  */
#define YYPULL 1


/* Substitute the variable and function names.  */
#define yyparse         omp_parse
#define yylex           omp_lex
#define yyerror         omp_error
#define yydebug         omp_debug
#define yynerrs         omp_nerrs

#define yylval          omp_lval
#define yychar          omp_char

/* Copy the first part of user declarations.  */
#line 10 "/home/hoffman/rose-develop/src/frontend/SageIII/ompparser.yy" /* yacc.c:339  */

/* DQ (2/10/2014): IF is conflicting with Boost template IF. */
#undef IF

#include <stdio.h>
#include <assert.h>
#include <iostream>
#include "sage3basic.h" // Sage Interface and Builders
#include "sageBuilder.h"
#include "OmpAttribute.h"

#ifdef _MSC_VER
  #undef IN
  #undef OUT
  #undef DUPLICATE
#endif

using namespace OmpSupport;

/* Parser - BISON */

/*the scanner function*/
extern int omp_lex(); 

/*A customized initialization function for the scanner, str is the string to be scanned.*/
extern void omp_lexer_init(const char* str);

//! Initialize the parser with the originating SgPragmaDeclaration and its pragma text
extern void omp_parser_init(SgNode* aNode, const char* str);

/*Treat the entire expression as a string for now
  Implemented in the scanner*/
extern void omp_parse_expr();

//The result AST representing the annotation
extern OmpAttribute* getParsedDirective();

static int omp_error(const char*);

//Insert variable into var_list of some clause
static bool addVar(const char* var);

//Insert expression into some clause
static bool addExpression(const char* expr);

// The current AST annotation being built
static OmpAttribute* ompattribute = NULL;

// The current OpenMP construct or clause type which is being parsed
// It is automatically associated with the current ompattribute
// Used to indicate the OpenMP directive or clause to which a variable list or an expression should get added for the current OpenMP pragma being parsed.
static omp_construct_enum omptype = e_unknown;

// The node to which vars/expressions should get added
//static OmpAttribute* omptype = 0;

// The context node with the pragma annotation being parsed
//
// We attach the attribute to the pragma declaration directly for now, 
// A few OpenMP directive does not affect the next structure block
// This variable is set by the prefix_parser_init() before prefix_parse() is called.
//Liao
static SgNode* gNode;

// The current expression node being generated 
static SgExpression* current_exp = NULL;
bool b_within_variable_list  = false;  // a flag to indicate if the program is now processing a list of variables

// We now follow the OpenMP 4.0 standard's C-style array section syntax: [lower-bound:length] or just [length]
// the latest variable symbol being parsed, used to help parsing the array dimensions associated with array symbol
// such as a[0:n][0:m]
static SgVariableSymbol* array_symbol; 
static SgExpression* lower_exp = NULL;
static SgExpression* length_exp = NULL;


#line 151 "/home/hoffman/rose-develop/b/src/frontend/SageIII/ompparser.C" /* yacc.c:339  */

# ifndef YY_NULLPTR
#  if defined __cplusplus && 201103L <= __cplusplus
#   define YY_NULLPTR nullptr
#  else
#   define YY_NULLPTR 0
#  endif
# endif

/* Enabling verbose error messages.  */
#ifdef YYERROR_VERBOSE
# undef YYERROR_VERBOSE
# define YYERROR_VERBOSE 1
#else
# define YYERROR_VERBOSE 1
#endif

/* In a future release of Bison, this section will be replaced
   by #include "ompparser.H".  */
#ifndef YY_OMP_HOME_HOFFMAN_ROSE_DEVELOP_B_SRC_FRONTEND_SAGEIII_OMPPARSER_H_INCLUDED
# define YY_OMP_HOME_HOFFMAN_ROSE_DEVELOP_B_SRC_FRONTEND_SAGEIII_OMPPARSER_H_INCLUDED
/* Debug traces.  */
#ifndef YYDEBUG
# define YYDEBUG 0
#endif
#if YYDEBUG
extern int omp_debug;
#endif

/* Token type.  */
#ifndef YYTOKENTYPE
# define YYTOKENTYPE
  enum yytokentype
  {
    OMP = 258,
    PARALLEL = 259,
    IF = 260,
    NUM_THREADS = 261,
    ORDERED = 262,
    SCHEDULE = 263,
    STATIC = 264,
    DYNAMIC = 265,
    GUIDED = 266,
    RUNTIME = 267,
    SECTIONS = 268,
    SINGLE = 269,
    NOWAIT = 270,
    SECTION = 271,
    FOR = 272,
    MASTER = 273,
    CRITICAL = 274,
    BARRIER = 275,
    ATOMIC = 276,
    FLUSH = 277,
    TARGET = 278,
    UPDATE = 279,
    DIST_DATA = 280,
    BLOCK = 281,
    DUPLICATE = 282,
    CYCLIC = 283,
    THREADPRIVATE = 284,
    PRIVATE = 285,
    COPYPRIVATE = 286,
    FIRSTPRIVATE = 287,
    LASTPRIVATE = 288,
    SHARED = 289,
    DEFAULT = 290,
    NONE = 291,
    REDUCTION = 292,
    COPYIN = 293,
    TASK = 294,
    TASKWAIT = 295,
    UNTIED = 296,
    COLLAPSE = 297,
    AUTO = 298,
    DECLARE = 299,
    DATA = 300,
    DEVICE = 301,
    MAP = 302,
    ALLOC = 303,
    TO = 304,
    FROM = 305,
    TOFROM = 306,
    SIMD = 307,
    SAFELEN = 308,
    ALIGNED = 309,
    LINEAR = 310,
    UNIFORM = 311,
    INBRANCH = 312,
    NOTINBRANCH = 313,
    MPI = 314,
    MPI_ALL = 315,
    MPI_MASTER = 316,
    TARGET_BEGIN = 317,
    TARGET_END = 318,
    LOGAND = 319,
    LOGOR = 320,
    SHLEFT = 321,
    SHRIGHT = 322,
    PLUSPLUS = 323,
    MINUSMINUS = 324,
    PTR_TO = 325,
    LE_OP2 = 326,
    GE_OP2 = 327,
    EQ_OP2 = 328,
    NE_OP2 = 329,
    RIGHT_ASSIGN2 = 330,
    LEFT_ASSIGN2 = 331,
    ADD_ASSIGN2 = 332,
    SUB_ASSIGN2 = 333,
    MUL_ASSIGN2 = 334,
    DIV_ASSIGN2 = 335,
    MOD_ASSIGN2 = 336,
    AND_ASSIGN2 = 337,
    XOR_ASSIGN2 = 338,
    OR_ASSIGN2 = 339,
    LEXICALERROR = 340,
    IDENTIFIER = 341,
    ICONSTANT = 342,
    EXPRESSION = 343,
    ID_EXPRESSION = 344
  };
#endif

/* Value type.  */
#if ! defined YYSTYPE && ! defined YYSTYPE_IS_DECLARED
typedef union YYSTYPE YYSTYPE;
union YYSTYPE
{
#line 91 "/home/hoffman/rose-develop/src/frontend/SageIII/ompparser.yy" /* yacc.c:355  */
  int itype;
          double ftype;
          const char* stype;
          void* ptype; /* For expressions */
        

#line 288 "/home/hoffman/rose-develop/b/src/frontend/SageIII/ompparser.C" /* yacc.c:355  */
};
# define YYSTYPE_IS_TRIVIAL 1
# define YYSTYPE_IS_DECLARED 1
#endif


extern YYSTYPE omp_lval;

int omp_parse (void);

#endif /* !YY_OMP_HOME_HOFFMAN_ROSE_DEVELOP_B_SRC_FRONTEND_SAGEIII_OMPPARSER_H_INCLUDED  */

/* Copy the second part of user declarations.  */

#line 303 "/home/hoffman/rose-develop/b/src/frontend/SageIII/ompparser.C" /* yacc.c:358  */

#ifdef short
# undef short
#endif

#ifdef YYTYPE_UINT8
typedef YYTYPE_UINT8 yytype_uint8;
#else
typedef unsigned char yytype_uint8;
#endif

#ifdef YYTYPE_INT8
typedef YYTYPE_INT8 yytype_int8;
#else
typedef signed char yytype_int8;
#endif

#ifdef YYTYPE_UINT16
typedef YYTYPE_UINT16 yytype_uint16;
#else
typedef unsigned short int yytype_uint16;
#endif

#ifdef YYTYPE_INT16
typedef YYTYPE_INT16 yytype_int16;
#else
typedef short int yytype_int16;
#endif

#ifndef YYSIZE_T
# ifdef __SIZE_TYPE__
#  define YYSIZE_T __SIZE_TYPE__
# elif defined size_t
#  define YYSIZE_T size_t
# elif ! defined YYSIZE_T
#  include <stddef.h> /* INFRINGES ON USER NAME SPACE */
#  define YYSIZE_T size_t
# else
#  define YYSIZE_T unsigned int
# endif
#endif

#define YYSIZE_MAXIMUM ((YYSIZE_T) -1)

#ifndef YY_
# if defined YYENABLE_NLS && YYENABLE_NLS
#  if ENABLE_NLS
#   include <libintl.h> /* INFRINGES ON USER NAME SPACE */
#   define YY_(Msgid) dgettext ("bison-runtime", Msgid)
#  endif
# endif
# ifndef YY_
#  define YY_(Msgid) Msgid
# endif
#endif

#ifndef YY_ATTRIBUTE
# if (defined __GNUC__                                               \
      && (2 < __GNUC__ || (__GNUC__ == 2 && 96 <= __GNUC_MINOR__)))  \
     || defined __SUNPRO_C && 0x5110 <= __SUNPRO_C
#  define YY_ATTRIBUTE(Spec) __attribute__(Spec)
# else
#  define YY_ATTRIBUTE(Spec) /* empty */
# endif
#endif

#ifndef YY_ATTRIBUTE_PURE
# define YY_ATTRIBUTE_PURE   YY_ATTRIBUTE ((__pure__))
#endif

#ifndef YY_ATTRIBUTE_UNUSED
# define YY_ATTRIBUTE_UNUSED YY_ATTRIBUTE ((__unused__))
#endif

#if !defined _Noreturn \
     && (!defined __STDC_VERSION__ || __STDC_VERSION__ < 201112)
# if defined _MSC_VER && 1200 <= _MSC_VER
#  define _Noreturn __declspec (noreturn)
# else
#  define _Noreturn YY_ATTRIBUTE ((__noreturn__))
# endif
#endif

/* Suppress unused-variable warnings by "using" E.  */
#if ! defined lint || defined __GNUC__
# define YYUSE(E) ((void) (E))
#else
# define YYUSE(E) /* empty */
#endif

#if defined __GNUC__ && 407 <= __GNUC__ * 100 + __GNUC_MINOR__
/* Suppress an incorrect diagnostic about yylval being uninitialized.  */
# define YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN \
    _Pragma ("GCC diagnostic push") \
    _Pragma ("GCC diagnostic ignored \"-Wuninitialized\"")\
    _Pragma ("GCC diagnostic ignored \"-Wmaybe-uninitialized\"")
# define YY_IGNORE_MAYBE_UNINITIALIZED_END \
    _Pragma ("GCC diagnostic pop")
#else
# define YY_INITIAL_VALUE(Value) Value
#endif
#ifndef YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
# define YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
# define YY_IGNORE_MAYBE_UNINITIALIZED_END
#endif
#ifndef YY_INITIAL_VALUE
# define YY_INITIAL_VALUE(Value) /* Nothing. */
#endif


#if ! defined yyoverflow || YYERROR_VERBOSE

/* The parser invokes alloca or malloc; define the necessary symbols.  */

# ifdef YYSTACK_USE_ALLOCA
#  if YYSTACK_USE_ALLOCA
#   ifdef __GNUC__
#    define YYSTACK_ALLOC __builtin_alloca
#   elif defined __BUILTIN_VA_ARG_INCR
#    include <alloca.h> /* INFRINGES ON USER NAME SPACE */
#   elif defined _AIX
#    define YYSTACK_ALLOC __alloca
#   elif defined _MSC_VER
#    include <malloc.h> /* INFRINGES ON USER NAME SPACE */
#    define alloca _alloca
#   else
#    define YYSTACK_ALLOC alloca
#    if ! defined _ALLOCA_H && ! defined EXIT_SUCCESS
#     include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
      /* Use EXIT_SUCCESS as a witness for stdlib.h.  */
#     ifndef EXIT_SUCCESS
#      define EXIT_SUCCESS 0
#     endif
#    endif
#   endif
#  endif
# endif

# ifdef YYSTACK_ALLOC
   /* Pacify GCC's 'empty if-body' warning.  */
#  define YYSTACK_FREE(Ptr) do { /* empty */; } while (0)
#  ifndef YYSTACK_ALLOC_MAXIMUM
    /* The OS might guarantee only one guard page at the bottom of the stack,
       and a page size can be as small as 4096 bytes.  So we cannot safely
       invoke alloca (N) if N exceeds 4096.  Use a slightly smaller number
       to allow for a few compiler-allocated temporary stack slots.  */
#   define YYSTACK_ALLOC_MAXIMUM 4032 /* reasonable circa 2006 */
#  endif
# else
#  define YYSTACK_ALLOC YYMALLOC
#  define YYSTACK_FREE YYFREE
#  ifndef YYSTACK_ALLOC_MAXIMUM
#   define YYSTACK_ALLOC_MAXIMUM YYSIZE_MAXIMUM
#  endif
#  if (defined __cplusplus && ! defined EXIT_SUCCESS \
       && ! ((defined YYMALLOC || defined malloc) \
             && (defined YYFREE || defined free)))
#   include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
#   ifndef EXIT_SUCCESS
#    define EXIT_SUCCESS 0
#   endif
#  endif
#  ifndef YYMALLOC
#   define YYMALLOC malloc
#   if ! defined malloc && ! defined EXIT_SUCCESS
void *malloc (YYSIZE_T); /* INFRINGES ON USER NAME SPACE */
#   endif
#  endif
#  ifndef YYFREE
#   define YYFREE free
#   if ! defined free && ! defined EXIT_SUCCESS
void free (void *); /* INFRINGES ON USER NAME SPACE */
#   endif
#  endif
# endif
#endif /* ! defined yyoverflow || YYERROR_VERBOSE */


#if (! defined yyoverflow \
     && (! defined __cplusplus \
         || (defined YYSTYPE_IS_TRIVIAL && YYSTYPE_IS_TRIVIAL)))

/* A type that is properly aligned for any stack member.  */
union yyalloc
{
  yytype_int16 yyss_alloc;
  YYSTYPE yyvs_alloc;
};

/* The size of the maximum gap between one aligned stack and the next.  */
# define YYSTACK_GAP_MAXIMUM (sizeof (union yyalloc) - 1)

/* The size of an array large to enough to hold all stacks, each with
   N elements.  */
# define YYSTACK_BYTES(N) \
     ((N) * (sizeof (yytype_int16) + sizeof (YYSTYPE)) \
      + YYSTACK_GAP_MAXIMUM)

# define YYCOPY_NEEDED 1

/* Relocate STACK from its old location to the new one.  The
   local variables YYSIZE and YYSTACKSIZE give the old and new number of
   elements in the stack, and YYPTR gives the new location of the
   stack.  Advance YYPTR to a properly aligned location for the next
   stack.  */
# define YYSTACK_RELOCATE(Stack_alloc, Stack)                           \
    do                                                                  \
      {                                                                 \
        YYSIZE_T yynewbytes;                                            \
        YYCOPY (&yyptr->Stack_alloc, Stack, yysize);                    \
        Stack = &yyptr->Stack_alloc;                                    \
        yynewbytes = yystacksize * sizeof (*Stack) + YYSTACK_GAP_MAXIMUM; \
        yyptr += yynewbytes / sizeof (*yyptr);                          \
      }                                                                 \
    while (0)

#endif

#if defined YYCOPY_NEEDED && YYCOPY_NEEDED
/* Copy COUNT objects from SRC to DST.  The source and destination do
   not overlap.  */
# ifndef YYCOPY
#  if defined __GNUC__ && 1 < __GNUC__
#   define YYCOPY(Dst, Src, Count) \
      __builtin_memcpy (Dst, Src, (Count) * sizeof (*(Src)))
#  else
#   define YYCOPY(Dst, Src, Count)              \
      do                                        \
        {                                       \
          YYSIZE_T yyi;                         \
          for (yyi = 0; yyi < (Count); yyi++)   \
            (Dst)[yyi] = (Src)[yyi];            \
        }                                       \
      while (0)
#  endif
# endif
#endif /* !YYCOPY_NEEDED */

/* YYFINAL -- State number of the termination state.  */
#define YYFINAL  38
/* YYLAST -- Last index in YYTABLE.  */
#define YYLAST   548

/* YYNTOKENS -- Number of terminals.  */
#define YYNTOKENS  109
/* YYNNTS -- Number of nonterminals.  */
#define YYNNTS  154
/* YYNRULES -- Number of rules.  */
#define YYNRULES  328
/* YYNSTATES -- Number of states.  */
#define YYNSTATES  481

/* YYTRANSLATE[YYX] -- Symbol number corresponding to YYX as returned
   by yylex, with out-of-bounds checking.  */
#define YYUNDEFTOK  2
#define YYMAXUTOK   344

#define YYTRANSLATE(YYX)                                                \
  ((unsigned int) (YYX) <= YYMAXUTOK ? yytranslate[YYX] : YYUNDEFTOK)

/* YYTRANSLATE[TOKEN-NUM] -- Symbol number corresponding to TOKEN-NUM
   as returned by yylex, without out-of-bounds checking.  */
static const yytype_uint8 yytranslate[] =
{
       0,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,   106,    71,     2,
      64,    65,    69,    68,    66,    70,    81,   105,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,    67,     2,
     103,   101,   104,   102,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,   107,     2,   108,    72,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,    73,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     1,     2,     3,     4,
       5,     6,     7,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    63,    74,
      75,    76,    77,    78,    79,    80,    82,    83,    84,    85,
      86,    87,    88,    89,    90,    91,    92,    93,    94,    95,
      96,    97,    98,    99,   100
};

#if YYDEBUG
  /* YYRLINE[YYN] -- Source line where rule number YYN was defined.  */
static const yytype_uint16 yyrline[] =
{
       0,   137,   137,   138,   139,   140,   141,   142,   143,   144,
     145,   146,   147,   148,   149,   150,   151,   152,   153,   154,
     155,   158,   158,   165,   166,   169,   170,   171,   174,   175,
     176,   177,   178,   179,   180,   181,   184,   184,   190,   190,
     196,   199,   196,   202,   202,   208,   209,   212,   213,   214,
     217,   218,   219,   220,   221,   222,   229,   232,   237,   237,
     244,   244,   252,   253,   254,   255,   256,   259,   259,   264,
     265,   268,   269,   270,   273,   274,   275,   276,   277,   282,
     287,   287,   293,   294,   297,   298,   299,   302,   303,   304,
     305,   309,   313,   309,   315,   315,   321,   322,   323,   324,
     327,   328,   329,   330,   331,   334,   334,   340,   345,   345,
     350,   351,   354,   355,   356,   359,   360,   361,   362,   363,
     364,   365,   366,   367,   368,   371,   371,   377,   378,   381,
     382,   383,   386,   387,   388,   389,   390,   391,   392,   393,
     394,   397,   401,   401,   406,   407,   414,   419,   423,   427,
     431,   431,   437,   438,   441,   441,   444,   449,   452,   449,
     455,   459,   465,   467,   465,   470,   473,   470,   476,   479,
     476,   482,   484,   482,   487,   489,   487,   492,   496,   500,
     504,   508,   512,   516,   520,   526,   526,   533,   534,   535,
     538,   539,   540,   543,   543,   550,   551,   554,   555,   556,
     559,   560,   561,   562,   563,   564,   575,   575,   582,   586,
     590,   594,   597,   600,   606,   613,   613,   621,   621,   628,
     632,   628,   641,   642,   643,   644,   645,   649,   648,   654,
     656,   660,   661,   662,   665,   665,   671,   672,   673,   674,
     677,   681,   677,   684,   688,   684,   690,   691,   689,   694,
     698,   694,   700,   701,   699,   710,   712,   713,   714,   721,
     728,   735,   742,   749,   756,   763,   770,   777,   784,   793,
     803,   804,   813,   814,   823,   824,   833,   834,   843,   844,
     853,   854,   861,   870,   871,   879,   886,   893,   902,   903,
     910,   919,   920,   927,   936,   937,   944,   951,   960,   961,
     964,   967,   974,   981,   988,   997,  1001,  1017,  1018,  1022,
    1023,  1026,  1026,  1030,  1031,  1034,  1035,  1037,  1038,  1037,
    1054,  1055,  1058,  1059,  1062,  1063,  1064,  1067,  1068
};
#endif

#if YYDEBUG || YYERROR_VERBOSE || 1
/* YYTNAME[SYMBOL-NUM] -- String name of the symbol SYMBOL-NUM.
   First, the terminals, then, starting at YYNTOKENS, nonterminals.  */
static const char *const yytname[] =
{
  "$end", "error", "$undefined", "OMP", "PARALLEL", "IF", "NUM_THREADS",
  "ORDERED", "SCHEDULE", "STATIC", "DYNAMIC", "GUIDED", "RUNTIME",
  "SECTIONS", "SINGLE", "NOWAIT", "SECTION", "FOR", "MASTER", "CRITICAL",
  "BARRIER", "ATOMIC", "FLUSH", "TARGET", "UPDATE", "DIST_DATA", "BLOCK",
  "DUPLICATE", "CYCLIC", "THREADPRIVATE", "PRIVATE", "COPYPRIVATE",
  "FIRSTPRIVATE", "LASTPRIVATE", "SHARED", "DEFAULT", "NONE", "REDUCTION",
  "COPYIN", "TASK", "TASKWAIT", "UNTIED", "COLLAPSE", "AUTO", "DECLARE",
  "DATA", "DEVICE", "MAP", "ALLOC", "TO", "FROM", "TOFROM", "SIMD",
  "SAFELEN", "ALIGNED", "LINEAR", "UNIFORM", "INBRANCH", "NOTINBRANCH",
  "MPI", "MPI_ALL", "MPI_MASTER", "TARGET_BEGIN", "TARGET_END", "'('",
  "')'", "','", "':'", "'+'", "'*'", "'-'", "'&'", "'^'", "'|'", "LOGAND",
  "LOGOR", "SHLEFT", "SHRIGHT", "PLUSPLUS", "MINUSMINUS", "PTR_TO", "'.'",
  "LE_OP2", "GE_OP2", "EQ_OP2", "NE_OP2", "RIGHT_ASSIGN2", "LEFT_ASSIGN2",
  "ADD_ASSIGN2", "SUB_ASSIGN2", "MUL_ASSIGN2", "DIV_ASSIGN2",
  "MOD_ASSIGN2", "AND_ASSIGN2", "XOR_ASSIGN2", "OR_ASSIGN2",
  "LEXICALERROR", "IDENTIFIER", "ICONSTANT", "EXPRESSION", "ID_EXPRESSION",
  "'='", "'?'", "'<'", "'>'", "'/'", "'%'", "'['", "']'", "$accept",
  "openmp_directive", "parallel_directive", "$@1",
  "parallel_clause_optseq", "parallel_clause_seq", "parallel_clause",
  "unique_parallel_clause", "$@2", "$@3", "$@4", "$@5", "for_directive",
  "$@6", "for_clause_optseq", "for_clause_seq", "for_clause",
  "unique_for_clause", "$@7", "$@8", "schedule_kind", "sections_directive",
  "$@9", "sections_clause_optseq", "sections_clause_seq",
  "sections_clause", "section_directive", "single_directive", "$@10",
  "single_clause_optseq", "single_clause_seq", "single_clause",
  "unique_single_clause", "$@11", "$@12", "task_directive", "$@13",
  "task_clause_optseq", "task_clause", "unique_task_clause", "$@14",
  "parallel_for_directive", "$@15", "parallel_for_clauseoptseq",
  "parallel_for_clause_seq", "parallel_for_clause",
  "parallel_sections_directive", "$@16", "parallel_sections_clause_optseq",
  "parallel_sections_clause_seq", "parallel_sections_clause",
  "master_directive", "critical_directive", "$@17", "region_phraseopt",
  "region_phrase", "barrier_directive", "taskwait_directive",
  "atomic_directive", "flush_directive", "$@18", "flush_varsopt",
  "flush_vars", "$@19", "ordered_directive", "threadprivate_directive",
  "$@20", "$@21", "data_default_clause", "data_privatization_clause",
  "$@22", "$@23", "data_privatization_in_clause", "$@24", "$@25",
  "data_privatization_out_clause", "$@26", "$@27", "data_sharing_clause",
  "$@28", "$@29", "data_reduction_clause", "$@30", "$@31",
  "reduction_operator", "target_data_directive", "$@32",
  "target_data_clause_seq", "target_data_clause", "target_directive",
  "$@33", "target_clause_optseq", "target_clause_seq", "target_clause",
  "device_clause", "$@34", "expression_or_star_or_mpi", "begin_clause",
  "end_clause", "if_clause", "$@35", "num_threads_clause", "$@36",
  "map_clause", "$@37", "$@38", "map_clause_optseq", "simd_directive",
  "$@39", "simd_clause_optseq", "simd_clause_seq", "simd_clause", "$@40",
  "uniform_clause", "$@41", "$@42", "aligned_clause", "$@43", "$@44",
  "$@45", "$@46", "linear_clause", "$@47", "$@48", "$@49", "$@50",
  "expression", "assignment_expr", "conditional_expr", "logical_or_expr",
  "logical_and_expr", "inclusive_or_expr", "exclusive_or_expr", "and_expr",
  "equality_expr", "relational_expr", "shift_expr", "additive_expr",
  "multiplicative_expr", "primary_expr", "incr_expr", "unary_expr",
  "variable_list", "id_expression_opt_dimension", "$@51",
  "dimension_field_optseq", "dimension_field_seq", "dimension_field",
  "$@52", "$@53", "id_expression_opt_dist_data", "dist_policy_seq",
  "dist_policy_per_dim", "dist_size_opt", YY_NULLPTR
};
#endif

# ifdef YYPRINT
/* YYTOKNUM[NUM] -- (External) token number corresponding to the
   (internal) symbol number NUM (which must be that of a token).  */
static const yytype_uint16 yytoknum[] =
{
       0,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,    40,    41,    44,    58,    43,    42,
      45,    38,    94,   124,   319,   320,   321,   322,   323,   324,
     325,    46,   326,   327,   328,   329,   330,   331,   332,   333,
     334,   335,   336,   337,   338,   339,   340,   341,   342,   343,
     344,    61,    63,    60,    62,    47,    37,    91,    93
};
# endif

#define YYPACT_NINF -221

#define yypact_value_is_default(Yystate) \
  (!!((Yystate) == (-221)))

#define YYTABLE_NINF -312

#define yytable_value_is_error(Yytable_value) \
  0

  /* YYPACT[STATE-NUM] -- Index in YYTABLE of the portion describing
     STATE-NUM.  */
static const yytype_int16 yypact[] =
{
      44,   397,    50,  -221,  -221,  -221,  -221,  -221,  -221,  -221,
    -221,  -221,  -221,  -221,  -221,  -221,  -221,  -221,  -221,  -221,
    -221,  -221,    28,  -221,  -221,  -221,  -221,  -221,  -221,  -221,
    -221,  -221,  -221,    13,  -221,  -221,  -221,  -221,  -221,  -221,
    -221,   467,    99,   479,   414,    10,    16,  -221,   240,    19,
     348,   437,   447,   433,  -221,  -221,  -221,  -221,  -221,    37,
    -221,  -221,  -221,   331,  -221,  -221,  -221,  -221,  -221,  -221,
    -221,  -221,  -221,  -221,  -221,  -221,   148,  -221,  -221,  -221,
    -221,  -221,  -221,  -221,  -221,   168,  -221,  -221,  -221,  -221,
    -221,    53,  -221,  -221,  -221,   366,  -221,  -221,  -221,  -221,
    -221,  -221,   -35,  -221,  -221,  -221,  -221,  -221,   100,  -221,
    -221,  -221,  -221,  -221,  -221,  -221,   284,  -221,  -221,  -221,
    -221,  -221,  -221,  -221,  -221,  -221,  -221,   226,  -221,  -221,
    -221,  -221,  -221,  -221,  -221,  -221,  -221,  -221,  -221,  -221,
     339,  -221,  -221,  -221,  -221,  -221,  -221,   322,  -221,  -221,
    -221,  -221,  -221,  -221,  -221,  -221,  -221,  -221,  -221,  -221,
     263,  -221,  -221,  -221,  -221,  -221,  -221,  -221,  -221,  -221,
      60,    76,    91,   102,   109,   111,   113,    -2,   123,   127,
     467,  -221,   139,    99,  -221,   151,   479,  -221,   198,   154,
     414,  -221,     3,     8,    32,  -221,  -221,  -221,  -221,   156,
     159,   240,  -221,     8,   166,   348,  -221,   169,   171,   176,
     190,   200,   202,   437,  -221,   447,  -221,   433,  -221,   165,
     165,   165,   165,  -221,  -221,  -221,   147,   208,   270,  -221,
    -221,  -221,  -221,  -221,  -221,  -221,  -221,  -221,  -221,  -221,
     -23,   165,  -221,  -221,    -7,    68,  -221,   100,  -221,   364,
     438,  -221,    79,   165,  -221,   165,  -221,   270,  -221,   270,
    -221,  -221,  -221,  -221,   165,   -34,   -34,  -221,  -221,   223,
    -221,  -221,   -39,   217,   234,   227,   238,    77,   303,    95,
       1,   -44,  -221,  -221,   428,   286,   293,   297,     8,     8,
       8,  -221,  -221,  -221,  -221,  -221,  -221,  -221,  -221,  -221,
    -221,   300,     8,     8,     8,  -221,  -221,   299,   265,  -221,
     275,  -221,   305,   312,   314,   319,  -221,   335,   320,   342,
     345,   360,  -221,  -221,   337,   380,     8,   381,     8,   383,
       8,   392,  -221,  -221,  -221,   165,   165,   165,   165,   165,
     165,   165,   165,   165,   165,   165,   165,   165,   165,   165,
     165,   165,   165,   165,  -221,  -221,   165,   165,   165,   165,
     165,   165,   165,   165,   165,   165,   165,  -221,  -221,  -221,
     131,   161,   187,  -221,   283,   325,   365,   165,  -221,   165,
     436,   265,  -221,    -7,  -221,  -221,  -221,  -221,  -221,  -221,
    -221,  -221,  -221,  -221,     8,  -221,  -221,   369,  -221,   430,
    -221,   459,  -221,   217,   434,   402,   234,   227,   238,    77,
     303,   303,    95,    95,    95,    95,     1,     1,   -44,   -44,
       1,     1,     1,  -221,  -221,  -221,  -221,  -221,  -221,  -221,
    -221,  -221,  -221,  -221,  -221,  -221,  -221,     8,  -221,  -221,
    -221,   411,  -221,   419,  -221,  -221,   461,  -221,     8,  -221,
       8,  -221,   165,   465,  -221,   431,    27,  -221,   468,   470,
    -221,  -221,   165,   439,  -221,   439,   472,  -221,  -221,  -221,
    -221,   165,  -221,  -221,  -221,    27,   370,   435,  -221,  -221,
    -221
};

  /* YYDEFACT[STATE-NUM] -- Default reduction number in state STATE-NUM.
     Performed when YYTABLE does not specify something else to do.  Zero
     means the default is an error.  */
static const yytype_uint16 yydefact[] =
{
       0,     0,     0,     2,     3,     4,    17,     5,     8,     6,
       7,     9,    10,    13,    14,    11,    15,    12,    16,    19,
      18,    20,    21,   156,    67,    80,    79,    43,   141,   142,
     147,   149,   150,   193,   157,    94,   148,   227,     1,   125,
     108,    23,    69,    82,    45,   144,   152,   185,   195,     0,
      96,   229,   127,   110,    36,    38,   162,   165,   171,     0,
     174,    40,    22,    24,    25,    28,    29,    30,    31,    32,
      33,    34,    35,    78,   168,    68,    70,    71,    74,    75,
      76,    77,    90,    91,    81,    83,    84,    87,    88,    89,
      56,     0,    55,    60,    44,    46,    47,    50,    51,    52,
      53,    54,     0,   143,   145,   154,   151,   153,     0,   215,
     217,   206,   219,   213,   214,   194,   196,   197,   200,   204,
     205,   202,   203,   201,   158,   105,   107,    95,    97,   100,
     101,   102,   103,   104,   234,   243,   249,   240,   236,   228,
     230,   231,   237,   238,   239,   132,   126,   128,   129,   133,
     134,   135,   136,   137,   138,   139,   140,   115,   116,   109,
     111,   112,   117,   118,   119,   120,   121,   122,   123,   124,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    26,     0,     0,    72,     0,     0,    85,     0,     0,
       0,    48,     0,     0,   186,   187,   190,   192,   191,     0,
       0,     0,   198,     0,     0,     0,    98,     0,     0,     0,
       0,     0,     0,     0,   232,     0,   130,     0,   113,     0,
       0,     0,     0,   163,   166,   172,     0,     0,     0,    41,
      27,   169,    73,    92,    86,    62,    63,    64,    66,    65,
       0,     0,    49,   146,   307,     0,   309,     0,   188,     0,
     222,   199,     0,     0,    99,     0,   244,     0,   250,     0,
     241,   233,   131,   114,     0,     0,     0,   305,   306,     0,
     255,   256,   257,   270,   272,   274,   276,   278,   280,   283,
     288,   291,   294,   300,   298,     0,     0,     0,     0,     0,
       0,   160,   161,   177,   178,   179,   180,   181,   182,   183,
     184,     0,     0,     0,     0,    57,    58,     0,   313,   155,
       0,   189,     0,     0,     0,     0,   207,     0,     0,     0,
       0,     0,   220,   159,     0,     0,     0,     0,     0,     0,
       0,     0,   301,   303,    37,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   302,   304,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   216,    39,   218,
       0,     0,     0,   175,     0,     0,     0,     0,    61,     0,
     320,   314,   315,   308,   310,   208,   209,   210,   212,   211,
     223,   224,   225,   226,     0,   106,   235,     0,   247,     0,
     253,     0,   299,   271,   298,     0,   273,   275,   277,   279,
     281,   282,   286,   287,   284,   285,   290,   289,   292,   293,
     295,   296,   297,   259,   260,   261,   262,   263,   264,   265,
     266,   267,   268,   258,   164,   167,   173,     0,    42,   170,
      93,     0,   317,     0,   312,   316,     0,   245,     0,   251,
       0,   242,     0,     0,    59,     0,     0,   221,     0,     0,
     269,   176,     0,   327,   324,   327,     0,   322,   248,   254,
     318,     0,   325,   326,   321,     0,     0,     0,   323,   319,
     328
};

  /* YYPGOTO[NTERM-NUM].  */
static const yytype_int16 yypgoto[] =
{
    -221,  -221,  -221,  -221,  -221,  -221,   -59,     7,  -221,  -221,
    -221,  -221,  -221,  -221,  -221,  -221,   -79,   -47,  -221,  -221,
    -221,  -221,  -221,  -221,  -221,   -71,  -221,  -221,  -221,  -221,
    -221,   -70,  -221,  -221,  -221,  -221,  -221,  -221,  -118,  -221,
    -221,  -221,  -221,  -221,  -221,  -140,  -221,  -221,  -221,  -221,
    -133,  -221,  -221,  -221,  -221,  -221,  -221,  -221,  -221,  -221,
    -221,  -221,  -221,  -221,  -221,  -221,  -221,  -221,    57,    -4,
    -221,  -221,    42,  -221,  -221,   -22,  -221,  -221,    89,  -221,
    -221,   -25,  -221,  -221,  -109,  -221,  -221,  -221,  -171,  -221,
    -221,  -221,  -221,  -108,   -98,  -221,  -221,  -221,  -221,   -41,
    -221,     4,  -221,   -95,  -221,  -221,  -221,  -221,  -221,  -221,
    -221,  -116,  -221,  -221,  -221,  -221,  -221,  -221,  -221,  -221,
    -221,  -221,  -221,  -221,  -221,  -221,  -220,   -81,  -221,  -221,
     173,   191,   194,   205,   206,   199,   -11,   107,   193,  -221,
    -221,   -27,  -200,   229,  -221,  -221,  -221,   164,  -221,  -221,
    -221,  -221,    72,    83
};

  /* YYDEFGOTO[NTERM-NUM].  */
static const yytype_int16 yydefgoto[] =
{
      -1,     2,     3,    41,    62,    63,    64,    65,   170,   172,
     179,   302,     4,    44,    94,    95,    96,    97,   377,   189,
     240,     5,    42,    75,    76,    77,     6,     7,    43,    84,
      85,    86,    87,   185,   304,     8,    50,   127,   128,   129,
     204,     9,    53,   159,   160,   161,    10,    52,   146,   147,
     148,    11,    12,    45,   103,   104,    13,    14,    15,    16,
      46,   106,   107,   193,    17,    18,    49,   203,    66,    67,
     174,   288,    68,   175,   289,    80,   182,   303,    69,   176,
     290,    70,   178,   437,   301,    19,   108,   194,   195,    20,
      48,   115,   116,   117,   118,   199,   316,   119,   120,    71,
     171,    72,   173,   123,   200,   394,   322,    21,    51,   139,
     140,   141,   207,   142,   212,   330,   143,   208,   326,   209,
     448,   144,   210,   328,   211,   450,   269,   270,   271,   272,
     273,   274,   275,   276,   277,   278,   279,   280,   281,   282,
     283,   284,   245,   246,   308,   380,   381,   382,   455,   476,
     444,   466,   467,   472
};

  /* YYTABLE[YYPACT[STATE-NUM]] -- What to do in state STATE-NUM.  If
     positive, shift that token.  If negative, reduce the rule whose
     number is the opposite.  If YYTABLE_NINF, syntax error.  */
static const yytype_int16 yytable[] =
{
     285,   286,   287,   252,   181,   184,   158,   121,   202,   206,
     196,   155,   168,   198,   216,   187,   191,    81,  -311,   101,
     218,   307,   100,   248,   214,   351,   138,   154,   167,   317,
     152,   165,   226,   324,   227,   325,   335,   109,    78,    88,
      98,    39,   305,   306,   331,    40,   131,     1,   150,   163,
      38,    81,   122,   463,   464,   465,   156,   169,    47,   145,
     157,   352,   353,   336,   267,   192,   268,   197,   243,   349,
     101,   350,    78,   100,   102,   121,   311,   263,   111,   112,
     105,    88,   262,   124,    79,    89,    99,   254,   370,   371,
     372,    98,   132,   251,   151,   164,   196,   261,   247,   198,
    -311,   177,   374,   375,   376,   109,   155,   130,   244,   149,
     162,   242,   232,   158,    73,   138,   234,   188,    79,   168,
     122,   230,   154,   131,   219,   152,   397,    89,   399,    56,
     401,    57,    74,   309,   310,   167,    60,    99,   165,   133,
     220,   153,   166,   150,   323,   310,   111,   112,   327,   196,
     329,   156,   198,   197,   145,   221,   163,   441,    81,   442,
     121,   341,   342,    73,   169,   101,   222,   157,   100,   132,
     158,   347,   348,   223,   155,   224,   168,   225,    56,    78,
      57,    74,    88,    82,   130,    60,    98,   228,   138,   151,
     154,   229,   167,   152,   446,   165,   434,   310,    56,    83,
      57,   131,   164,   231,   149,   122,   197,   235,   236,   237,
     238,   150,   291,   163,   183,   233,   133,   162,   241,   156,
     249,   169,   145,   250,   157,    79,   435,   310,    89,   264,
     253,   125,    99,   255,   186,   256,   153,   453,   332,   333,
     257,   239,   470,   265,   266,   109,   110,   132,   458,   166,
     459,   477,   436,   310,   258,   405,    56,   151,    57,   164,
      58,    59,   130,   267,   259,   268,   260,   126,    54,    55,
      90,    91,   149,   292,   162,   423,   424,   425,   426,   427,
     428,   429,   430,   431,   432,   433,   111,   112,   334,   109,
     110,   337,   205,    56,   133,    57,    74,    58,    59,   339,
      60,    61,   113,   114,   153,    93,   166,   338,   404,   340,
     404,   404,   404,   404,   404,   404,   404,   404,   404,   404,
     404,   404,   404,   404,   404,   404,   404,    54,    55,   217,
     111,   112,   412,   413,   414,   415,    54,    55,   293,   294,
     295,   296,   297,   298,   299,   300,   113,   114,   438,   310,
     201,   367,    56,   125,    57,    74,    58,    59,   368,    60,
      61,    56,   369,    57,   378,    58,    59,   373,    60,    61,
     385,   460,   379,    90,    91,   383,    60,   386,    56,   387,
      57,    92,    58,    59,   388,   343,   344,   390,   215,   126,
     439,   310,   134,   135,   136,   137,    56,   180,    57,    74,
     389,    22,   395,    60,    23,   213,   345,   346,    93,   391,
      24,    25,   392,    26,    27,    28,    29,    30,    31,    32,
      33,    90,    91,   312,   313,   314,    34,   393,   264,    92,
     440,   310,   190,   315,   447,   310,    35,    36,    54,    55,
      90,    91,   265,   266,    56,   396,    57,    74,   398,    37,
     400,    60,    54,    55,   416,   417,    93,   402,   420,   421,
     422,   443,   267,    56,   268,    57,    74,    58,    59,   452,
      60,    61,    54,    55,    60,    93,   454,    56,   479,    57,
      74,    58,    59,   456,    60,    61,   318,   319,   320,   321,
     134,   135,   136,   137,    82,   449,   310,    56,   462,    57,
     480,    58,    59,   471,    60,    61,   354,   355,   403,    56,
      83,    57,   354,   355,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   365,   451,   310,   457,   310,   406,   366,
     461,   310,   407,   468,   310,   469,   310,   474,   475,   384,
     410,   411,   418,   419,   408,   445,   409,   478,   473
};

static const yytype_uint16 yycheck[] =
{
     220,   221,   222,   203,    63,    76,    53,    48,   116,   127,
     108,    52,    53,   108,   147,    85,    95,    42,    25,    44,
     160,   241,    44,   194,   140,    69,    51,    52,    53,   249,
      52,    53,    34,   253,    36,   255,    75,     5,    42,    43,
      44,    13,    65,    66,   264,    17,    50,     3,    52,    53,
       0,    76,    48,    26,    27,    28,    52,    53,    45,    52,
      53,   105,   106,   102,    98,   100,   100,   108,    65,    68,
      95,    70,    76,    95,    64,   116,   247,   217,    46,    47,
      64,    85,   215,    64,    42,    43,    44,   205,   288,   289,
     290,    95,    50,   201,    52,    53,   194,   213,    66,   194,
     107,    64,   302,   303,   304,     5,   147,    50,   100,    52,
      53,   190,   183,   160,    15,   140,   186,    64,    76,   160,
     116,   180,   147,   127,    64,   147,   326,    85,   328,    30,
     330,    32,    33,    65,    66,   160,    37,    95,   160,    50,
      64,    52,    53,   147,    65,    66,    46,    47,   257,   247,
     259,   147,   247,   194,   147,    64,   160,   377,   183,   379,
     201,    84,    85,    15,   160,   190,    64,   160,   190,   127,
     217,    76,    77,    64,   215,    64,   217,    64,    30,   183,
      32,    33,   186,    15,   127,    37,   190,    64,   213,   147,
     215,    64,   217,   215,   394,   217,    65,    66,    30,    31,
      32,   205,   160,    64,   147,   201,   247,     9,    10,    11,
      12,   215,    65,   217,    66,    64,   127,   160,    64,   215,
      64,   217,   215,    64,   217,   183,    65,    66,   186,    64,
      64,     5,   190,    64,    66,    64,   147,   437,   265,   266,
      64,    43,   462,    78,    79,     5,     6,   205,   448,   160,
     450,   471,    65,    66,    64,   336,    30,   215,    32,   217,
      34,    35,   205,    98,    64,   100,    64,    41,     5,     6,
       7,     8,   215,    65,   217,   356,   357,   358,   359,   360,
     361,   362,   363,   364,   365,   366,    46,    47,    65,     5,
       6,    74,    66,    30,   205,    32,    33,    34,    35,    72,
      37,    38,    62,    63,   215,    42,   217,    73,   335,    71,
     337,   338,   339,   340,   341,   342,   343,   344,   345,   346,
     347,   348,   349,   350,   351,   352,   353,     5,     6,    66,
      46,    47,   343,   344,   345,   346,     5,     6,    68,    69,
      70,    71,    72,    73,    74,    75,    62,    63,    65,    66,
      66,    65,    30,     5,    32,    33,    34,    35,    65,    37,
      38,    30,    65,    32,    65,    34,    35,    67,    37,    38,
      65,   452,   107,     7,     8,   100,    37,    65,    30,    65,
      32,    15,    34,    35,    65,    82,    83,    67,    66,    41,
      65,    66,    53,    54,    55,    56,    30,    66,    32,    33,
      65,     4,    65,    37,     7,    66,   103,   104,    42,    67,
      13,    14,    67,    16,    17,    18,    19,    20,    21,    22,
      23,     7,     8,    59,    60,    61,    29,    67,    64,    15,
      65,    66,    66,    69,    65,    66,    39,    40,     5,     6,
       7,     8,    78,    79,    30,    65,    32,    33,    67,    52,
      67,    37,     5,     6,   347,   348,    42,    65,   351,   352,
     353,    25,    98,    30,   100,    32,    33,    34,    35,    67,
      37,    38,     5,     6,    37,    42,    65,    30,   108,    32,
      33,    34,    35,    64,    37,    38,    48,    49,    50,    51,
      53,    54,    55,    56,    15,    65,    66,    30,    67,    32,
      65,    34,    35,    64,    37,    38,    78,    79,   335,    30,
      31,    32,    78,    79,    86,    87,    88,    89,    90,    91,
      92,    93,    94,    95,    65,    66,    65,    66,   337,   101,
      65,    66,   338,    65,    66,    65,    66,    65,    66,   310,
     341,   342,   349,   350,   339,   381,   340,   475,   465
};

  /* YYSTOS[STATE-NUM] -- The (internal number of the) accessing
     symbol of state STATE-NUM.  */
static const yytype_uint16 yystos[] =
{
       0,     3,   110,   111,   121,   130,   135,   136,   144,   150,
     155,   160,   161,   165,   166,   167,   168,   173,   174,   194,
     198,   216,     4,     7,    13,    14,    16,    17,    18,    19,
      20,    21,    22,    23,    29,    39,    40,    52,     0,    13,
      17,   112,   131,   137,   122,   162,   169,    45,   199,   175,
     145,   217,   156,   151,     5,     6,    30,    32,    34,    35,
      37,    38,   113,   114,   115,   116,   177,   178,   181,   187,
     190,   208,   210,    15,    33,   132,   133,   134,   178,   181,
     184,   190,    15,    31,   138,   139,   140,   141,   178,   181,
       7,     8,    15,    42,   123,   124,   125,   126,   178,   181,
     184,   190,    64,   163,   164,    64,   170,   171,   195,     5,
       6,    46,    47,    62,    63,   200,   201,   202,   203,   206,
     207,   208,   210,   212,    64,     5,    41,   146,   147,   148,
     177,   178,   181,   187,    53,    54,    55,    56,   190,   218,
     219,   220,   222,   225,   230,   116,   157,   158,   159,   177,
     178,   181,   184,   187,   190,   208,   210,   116,   126,   152,
     153,   154,   177,   178,   181,   184,   187,   190,   208,   210,
     117,   209,   118,   211,   179,   182,   188,    64,   191,   119,
      66,   115,   185,    66,   134,   142,    66,   140,    64,   128,
      66,   125,   100,   172,   196,   197,   203,   208,   212,   204,
     213,    66,   202,   176,   149,    66,   147,   221,   226,   228,
     231,   233,   223,    66,   220,    66,   159,    66,   154,    64,
      64,    64,    64,    64,    64,    64,    34,    36,    64,    64,
     115,    64,   134,    64,   140,     9,    10,    11,    12,    43,
     129,    64,   125,    65,   100,   251,   252,    66,   197,    64,
      64,   202,   251,    64,   147,    64,    64,    64,    64,    64,
      64,   220,   159,   154,    64,    78,    79,    98,   100,   235,
     236,   237,   238,   239,   240,   241,   242,   243,   244,   245,
     246,   247,   248,   249,   250,   235,   235,   235,   180,   183,
     189,    65,    65,    68,    69,    70,    71,    72,    73,    74,
      75,   193,   120,   186,   143,    65,    66,   235,   253,    65,
      66,   197,    59,    60,    61,    69,   205,   235,    48,    49,
      50,    51,   215,    65,   235,   235,   227,   193,   232,   193,
     224,   235,   250,   250,    65,    75,   102,    74,    73,    72,
      71,    84,    85,    82,    83,   103,   104,    76,    77,    68,
      70,    69,   105,   106,    78,    79,    86,    87,    88,    89,
      90,    91,    92,    93,    94,    95,   101,    65,    65,    65,
     251,   251,   251,    67,   251,   251,   251,   127,    65,   107,
     254,   255,   256,   100,   252,    65,    65,    65,    65,    65,
      67,    67,    67,    67,   214,    65,    65,   251,    67,   251,
      67,   251,    65,   239,   250,   236,   240,   241,   242,   243,
     244,   244,   245,   245,   245,   245,   246,   246,   247,   247,
     246,   246,   246,   236,   236,   236,   236,   236,   236,   236,
     236,   236,   236,   236,    65,    65,    65,   192,    65,    65,
      65,   235,   235,    25,   259,   256,   251,    65,   229,    65,
     234,    65,    67,   251,    65,   257,    64,    65,   251,   251,
     236,    65,    67,    26,    27,    28,   260,   261,    65,    65,
     235,    64,   262,   262,    65,    66,   258,   235,   261,   108,
      65
};

  /* YYR1[YYN] -- Symbol number of symbol that rule YYN derives.  */
static const yytype_uint16 yyr1[] =
{
       0,   109,   110,   110,   110,   110,   110,   110,   110,   110,
     110,   110,   110,   110,   110,   110,   110,   110,   110,   110,
     110,   112,   111,   113,   113,   114,   114,   114,   115,   115,
     115,   115,   115,   115,   115,   115,   117,   116,   118,   116,
     119,   120,   116,   122,   121,   123,   123,   124,   124,   124,
     125,   125,   125,   125,   125,   125,   126,   126,   127,   126,
     128,   126,   129,   129,   129,   129,   129,   131,   130,   132,
     132,   133,   133,   133,   134,   134,   134,   134,   134,   135,
     137,   136,   138,   138,   139,   139,   139,   140,   140,   140,
     140,   142,   143,   141,   145,   144,   146,   146,   146,   146,
     147,   147,   147,   147,   147,   149,   148,   148,   151,   150,
     152,   152,   153,   153,   153,   154,   154,   154,   154,   154,
     154,   154,   154,   154,   154,   156,   155,   157,   157,   158,
     158,   158,   159,   159,   159,   159,   159,   159,   159,   159,
     159,   160,   162,   161,   163,   163,   164,   165,   166,   167,
     169,   168,   170,   170,   172,   171,   173,   175,   176,   174,
     177,   177,   179,   180,   178,   182,   183,   181,   185,   186,
     184,   188,   189,   187,   191,   192,   190,   193,   193,   193,
     193,   193,   193,   193,   193,   195,   194,   196,   196,   196,
     197,   197,   197,   199,   198,   200,   200,   201,   201,   201,
     202,   202,   202,   202,   202,   202,   204,   203,   205,   205,
     205,   205,   205,   206,   207,   209,   208,   211,   210,   213,
     214,   212,   215,   215,   215,   215,   215,   217,   216,   218,
     218,   219,   219,   219,   221,   220,   220,   220,   220,   220,
     223,   224,   222,   226,   227,   225,   228,   229,   225,   231,
     232,   230,   233,   234,   230,   235,   236,   236,   236,   236,
     236,   236,   236,   236,   236,   236,   236,   236,   236,   237,
     238,   238,   239,   239,   240,   240,   241,   241,   242,   242,
     243,   243,   243,   244,   244,   244,   244,   244,   245,   245,
     245,   246,   246,   246,   247,   247,   247,   247,   248,   248,
     248,   249,   249,   249,   249,   250,   250,   251,   251,   251,
     251,   253,   252,   254,   254,   255,   255,   257,   258,   256,
     259,   259,   260,   260,   261,   261,   261,   262,   262
};

  /* YYR2[YYN] -- Number of symbols on the right hand side of rule YYN.  */
static const yytype_uint8 yyr2[] =
{
       0,     2,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     0,     4,     0,     1,     1,     2,     3,     1,     1,
       1,     1,     1,     1,     1,     1,     0,     5,     0,     5,
       0,     0,     6,     0,     4,     0,     1,     1,     2,     3,
       1,     1,     1,     1,     1,     1,     1,     4,     0,     7,
       0,     5,     1,     1,     1,     1,     1,     0,     4,     0,
       1,     1,     2,     3,     1,     1,     1,     1,     1,     2,
       0,     4,     0,     1,     1,     2,     3,     1,     1,     1,
       1,     0,     0,     6,     0,     4,     0,     1,     2,     3,
       1,     1,     1,     1,     1,     0,     5,     1,     0,     5,
       0,     1,     1,     2,     3,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     0,     5,     0,     1,     1,
       2,     3,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     2,     0,     4,     0,     1,     3,     2,     2,     2,
       0,     4,     0,     1,     0,     4,     2,     0,     0,     7,
       4,     4,     0,     0,     6,     0,     0,     6,     0,     0,
       6,     0,     0,     6,     0,     0,     8,     1,     1,     1,
       1,     1,     1,     1,     1,     0,     5,     1,     2,     3,
       1,     1,     1,     0,     4,     0,     1,     1,     2,     3,
       1,     1,     1,     1,     1,     1,     0,     4,     2,     2,
       2,     2,     2,     1,     1,     0,     5,     0,     5,     0,
       0,     7,     0,     2,     2,     2,     2,     0,     4,     0,
       1,     1,     2,     3,     0,     5,     1,     1,     1,     1,
       0,     0,     6,     0,     0,     6,     0,     0,     8,     0,
       0,     6,     0,     0,     8,     1,     1,     1,     3,     3,
       3,     3,     3,     3,     3,     3,     3,     3,     3,     5,
       1,     3,     1,     3,     1,     3,     1,     3,     1,     3,
       1,     3,     3,     1,     3,     3,     3,     3,     1,     3,
       3,     1,     3,     3,     1,     3,     3,     3,     1,     3,
       1,     2,     2,     2,     2,     1,     1,     1,     3,     1,
       3,     0,     4,     0,     1,     1,     2,     0,     0,     7,
       0,     4,     1,     3,     1,     2,     2,     0,     3
};


#define yyerrok         (yyerrstatus = 0)
#define yyclearin       (yychar = YYEMPTY)
#define YYEMPTY         (-2)
#define YYEOF           0

#define YYACCEPT        goto yyacceptlab
#define YYABORT         goto yyabortlab
#define YYERROR         goto yyerrorlab


#define YYRECOVERING()  (!!yyerrstatus)

#define YYBACKUP(Token, Value)                                  \
do                                                              \
  if (yychar == YYEMPTY)                                        \
    {                                                           \
      yychar = (Token);                                         \
      yylval = (Value);                                         \
      YYPOPSTACK (yylen);                                       \
      yystate = *yyssp;                                         \
      goto yybackup;                                            \
    }                                                           \
  else                                                          \
    {                                                           \
      yyerror (YY_("syntax error: cannot back up")); \
      YYERROR;                                                  \
    }                                                           \
while (0)

/* Error token number */
#define YYTERROR        1
#define YYERRCODE       256



/* Enable debugging if requested.  */
#if YYDEBUG

# ifndef YYFPRINTF
#  include <stdio.h> /* INFRINGES ON USER NAME SPACE */
#  define YYFPRINTF fprintf
# endif

# define YYDPRINTF(Args)                        \
do {                                            \
  if (yydebug)                                  \
    YYFPRINTF Args;                             \
} while (0)

/* This macro is provided for backward compatibility. */
#ifndef YY_LOCATION_PRINT
# define YY_LOCATION_PRINT(File, Loc) ((void) 0)
#endif


# define YY_SYMBOL_PRINT(Title, Type, Value, Location)                    \
do {                                                                      \
  if (yydebug)                                                            \
    {                                                                     \
      YYFPRINTF (stderr, "%s ", Title);                                   \
      yy_symbol_print (stderr,                                            \
                  Type, Value); \
      YYFPRINTF (stderr, "\n");                                           \
    }                                                                     \
} while (0)


/*----------------------------------------.
| Print this symbol's value on YYOUTPUT.  |
`----------------------------------------*/

static void
yy_symbol_value_print (FILE *yyoutput, int yytype, YYSTYPE const * const yyvaluep)
{
  FILE *yyo = yyoutput;
  YYUSE (yyo);
  if (!yyvaluep)
    return;
# ifdef YYPRINT
  if (yytype < YYNTOKENS)
    YYPRINT (yyoutput, yytoknum[yytype], *yyvaluep);
# endif
  YYUSE (yytype);
}


/*--------------------------------.
| Print this symbol on YYOUTPUT.  |
`--------------------------------*/

static void
yy_symbol_print (FILE *yyoutput, int yytype, YYSTYPE const * const yyvaluep)
{
  YYFPRINTF (yyoutput, "%s %s (",
             yytype < YYNTOKENS ? "token" : "nterm", yytname[yytype]);

  yy_symbol_value_print (yyoutput, yytype, yyvaluep);
  YYFPRINTF (yyoutput, ")");
}

/*------------------------------------------------------------------.
| yy_stack_print -- Print the state stack from its BOTTOM up to its |
| TOP (included).                                                   |
`------------------------------------------------------------------*/

static void
yy_stack_print (yytype_int16 *yybottom, yytype_int16 *yytop)
{
  YYFPRINTF (stderr, "Stack now");
  for (; yybottom <= yytop; yybottom++)
    {
      int yybot = *yybottom;
      YYFPRINTF (stderr, " %d", yybot);
    }
  YYFPRINTF (stderr, "\n");
}

# define YY_STACK_PRINT(Bottom, Top)                            \
do {                                                            \
  if (yydebug)                                                  \
    yy_stack_print ((Bottom), (Top));                           \
} while (0)


/*------------------------------------------------.
| Report that the YYRULE is going to be reduced.  |
`------------------------------------------------*/

static void
yy_reduce_print (yytype_int16 *yyssp, YYSTYPE *yyvsp, int yyrule)
{
  unsigned long int yylno = yyrline[yyrule];
  int yynrhs = yyr2[yyrule];
  int yyi;
  YYFPRINTF (stderr, "Reducing stack by rule %d (line %lu):\n",
             yyrule - 1, yylno);
  /* The symbols being reduced.  */
  for (yyi = 0; yyi < yynrhs; yyi++)
    {
      YYFPRINTF (stderr, "   $%d = ", yyi + 1);
      yy_symbol_print (stderr,
                       yystos[yyssp[yyi + 1 - yynrhs]],
                       &(yyvsp[(yyi + 1) - (yynrhs)])
                                              );
      YYFPRINTF (stderr, "\n");
    }
}

# define YY_REDUCE_PRINT(Rule)          \
do {                                    \
  if (yydebug)                          \
    yy_reduce_print (yyssp, yyvsp, Rule); \
} while (0)

/* Nonzero means print parse trace.  It is left uninitialized so that
   multiple parsers can coexist.  */
int yydebug;
#else /* !YYDEBUG */
# define YYDPRINTF(Args)
# define YY_SYMBOL_PRINT(Title, Type, Value, Location)
# define YY_STACK_PRINT(Bottom, Top)
# define YY_REDUCE_PRINT(Rule)
#endif /* !YYDEBUG */


/* YYINITDEPTH -- initial size of the parser's stacks.  */
#ifndef YYINITDEPTH
# define YYINITDEPTH 200
#endif

/* YYMAXDEPTH -- maximum size the stacks can grow to (effective only
   if the built-in stack extension method is used).

   Do not make this value too large; the results are undefined if
   YYSTACK_ALLOC_MAXIMUM < YYSTACK_BYTES (YYMAXDEPTH)
   evaluated with infinite-precision integer arithmetic.  */

#ifndef YYMAXDEPTH
# define YYMAXDEPTH 10000
#endif


#if YYERROR_VERBOSE

# ifndef yystrlen
#  if defined __GLIBC__ && defined _STRING_H
#   define yystrlen strlen
#  else
/* Return the length of YYSTR.  */
static YYSIZE_T
yystrlen (const char *yystr)
{
  YYSIZE_T yylen;
  for (yylen = 0; yystr[yylen]; yylen++)
    continue;
  return yylen;
}
#  endif
# endif

# ifndef yystpcpy
#  if defined __GLIBC__ && defined _STRING_H && defined _GNU_SOURCE
#   define yystpcpy stpcpy
#  else
/* Copy YYSRC to YYDEST, returning the address of the terminating '\0' in
   YYDEST.  */
static char *
yystpcpy (char *yydest, const char *yysrc)
{
  char *yyd = yydest;
  const char *yys = yysrc;

  while ((*yyd++ = *yys++) != '\0')
    continue;

  return yyd - 1;
}
#  endif
# endif

# ifndef yytnamerr
/* Copy to YYRES the contents of YYSTR after stripping away unnecessary
   quotes and backslashes, so that it's suitable for yyerror.  The
   heuristic is that double-quoting is unnecessary unless the string
   contains an apostrophe, a comma, or backslash (other than
   backslash-backslash).  YYSTR is taken from yytname.  If YYRES is
   null, do not copy; instead, return the length of what the result
   would have been.  */
static YYSIZE_T
yytnamerr (char *yyres, const char *yystr)
{
  if (*yystr == '"')
    {
      YYSIZE_T yyn = 0;
      char const *yyp = yystr;

      for (;;)
        switch (*++yyp)
          {
          case '\'':
          case ',':
            goto do_not_strip_quotes;

          case '\\':
            if (*++yyp != '\\')
              goto do_not_strip_quotes;
            /* Fall through.  */
          default:
            if (yyres)
              yyres[yyn] = *yyp;
            yyn++;
            break;

          case '"':
            if (yyres)
              yyres[yyn] = '\0';
            return yyn;
          }
    do_not_strip_quotes: ;
    }

  if (! yyres)
    return yystrlen (yystr);

  return yystpcpy (yyres, yystr) - yyres;
}
# endif

/* Copy into *YYMSG, which is of size *YYMSG_ALLOC, an error message
   about the unexpected token YYTOKEN for the state stack whose top is
   YYSSP.

   Return 0 if *YYMSG was successfully written.  Return 1 if *YYMSG is
   not large enough to hold the message.  In that case, also set
   *YYMSG_ALLOC to the required number of bytes.  Return 2 if the
   required number of bytes is too large to store.  */
static int
yysyntax_error (YYSIZE_T *yymsg_alloc, char **yymsg,
                yytype_int16 *yyssp, int yytoken)
{
  YYSIZE_T yysize0 = yytnamerr (YY_NULLPTR, yytname[yytoken]);
  YYSIZE_T yysize = yysize0;
  enum { YYERROR_VERBOSE_ARGS_MAXIMUM = 5 };
  /* Internationalized format string. */
  const char *yyformat = YY_NULLPTR;
  /* Arguments of yyformat. */
  char const *yyarg[YYERROR_VERBOSE_ARGS_MAXIMUM];
  /* Number of reported tokens (one for the "unexpected", one per
     "expected"). */
  int yycount = 0;

  /* There are many possibilities here to consider:
     - If this state is a consistent state with a default action, then
       the only way this function was invoked is if the default action
       is an error action.  In that case, don't check for expected
       tokens because there are none.
     - The only way there can be no lookahead present (in yychar) is if
       this state is a consistent state with a default action.  Thus,
       detecting the absence of a lookahead is sufficient to determine
       that there is no unexpected or expected token to report.  In that
       case, just report a simple "syntax error".
     - Don't assume there isn't a lookahead just because this state is a
       consistent state with a default action.  There might have been a
       previous inconsistent state, consistent state with a non-default
       action, or user semantic action that manipulated yychar.
     - Of course, the expected token list depends on states to have
       correct lookahead information, and it depends on the parser not
       to perform extra reductions after fetching a lookahead from the
       scanner and before detecting a syntax error.  Thus, state merging
       (from LALR or IELR) and default reductions corrupt the expected
       token list.  However, the list is correct for canonical LR with
       one exception: it will still contain any token that will not be
       accepted due to an error action in a later state.
  */
  if (yytoken != YYEMPTY)
    {
      int yyn = yypact[*yyssp];
      yyarg[yycount++] = yytname[yytoken];
      if (!yypact_value_is_default (yyn))
        {
          /* Start YYX at -YYN if negative to avoid negative indexes in
             YYCHECK.  In other words, skip the first -YYN actions for
             this state because they are default actions.  */
          int yyxbegin = yyn < 0 ? -yyn : 0;
          /* Stay within bounds of both yycheck and yytname.  */
          int yychecklim = YYLAST - yyn + 1;
          int yyxend = yychecklim < YYNTOKENS ? yychecklim : YYNTOKENS;
          int yyx;

          for (yyx = yyxbegin; yyx < yyxend; ++yyx)
            if (yycheck[yyx + yyn] == yyx && yyx != YYTERROR
                && !yytable_value_is_error (yytable[yyx + yyn]))
              {
                if (yycount == YYERROR_VERBOSE_ARGS_MAXIMUM)
                  {
                    yycount = 1;
                    yysize = yysize0;
                    break;
                  }
                yyarg[yycount++] = yytname[yyx];
                {
                  YYSIZE_T yysize1 = yysize + yytnamerr (YY_NULLPTR, yytname[yyx]);
                  if (! (yysize <= yysize1
                         && yysize1 <= YYSTACK_ALLOC_MAXIMUM))
                    return 2;
                  yysize = yysize1;
                }
              }
        }
    }

  switch (yycount)
    {
# define YYCASE_(N, S)                      \
      case N:                               \
        yyformat = S;                       \
      break
      YYCASE_(0, YY_("syntax error"));
      YYCASE_(1, YY_("syntax error, unexpected %s"));
      YYCASE_(2, YY_("syntax error, unexpected %s, expecting %s"));
      YYCASE_(3, YY_("syntax error, unexpected %s, expecting %s or %s"));
      YYCASE_(4, YY_("syntax error, unexpected %s, expecting %s or %s or %s"));
      YYCASE_(5, YY_("syntax error, unexpected %s, expecting %s or %s or %s or %s"));
# undef YYCASE_
    }

  {
    YYSIZE_T yysize1 = yysize + yystrlen (yyformat);
    if (! (yysize <= yysize1 && yysize1 <= YYSTACK_ALLOC_MAXIMUM))
      return 2;
    yysize = yysize1;
  }

  if (*yymsg_alloc < yysize)
    {
      *yymsg_alloc = 2 * yysize;
      if (! (yysize <= *yymsg_alloc
             && *yymsg_alloc <= YYSTACK_ALLOC_MAXIMUM))
        *yymsg_alloc = YYSTACK_ALLOC_MAXIMUM;
      return 1;
    }

  /* Avoid sprintf, as that infringes on the user's name space.
     Don't have undefined behavior even if the translation
     produced a string with the wrong number of "%s"s.  */
  {
    char *yyp = *yymsg;
    int yyi = 0;
    while ((*yyp = *yyformat) != '\0')
      if (*yyp == '%' && yyformat[1] == 's' && yyi < yycount)
        {
          yyp += yytnamerr (yyp, yyarg[yyi++]);
          yyformat += 2;
        }
      else
        {
          yyp++;
          yyformat++;
        }
  }
  return 0;
}
#endif /* YYERROR_VERBOSE */

/*-----------------------------------------------.
| Release the memory associated to this symbol.  |
`-----------------------------------------------*/

static void
yydestruct (const char *yymsg, int yytype, YYSTYPE *yyvaluep)
{
  YYUSE (yyvaluep);
  if (!yymsg)
    yymsg = "Deleting";
  YY_SYMBOL_PRINT (yymsg, yytype, yyvaluep, yylocationp);

  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
  YYUSE (yytype);
  YY_IGNORE_MAYBE_UNINITIALIZED_END
}




/* The lookahead symbol.  */
int yychar;

/* The semantic value of the lookahead symbol.  */
YYSTYPE yylval;
/* Number of syntax errors so far.  */
int yynerrs;


/*----------.
| yyparse.  |
`----------*/

int
yyparse (void)
{
    int yystate;
    /* Number of tokens to shift before error messages enabled.  */
    int yyerrstatus;

    /* The stacks and their tools:
       'yyss': related to states.
       'yyvs': related to semantic values.

       Refer to the stacks through separate pointers, to allow yyoverflow
       to reallocate them elsewhere.  */

    /* The state stack.  */
    yytype_int16 yyssa[YYINITDEPTH];
    yytype_int16 *yyss;
    yytype_int16 *yyssp;

    /* The semantic value stack.  */
    YYSTYPE yyvsa[YYINITDEPTH];
    YYSTYPE *yyvs;
    YYSTYPE *yyvsp;

    YYSIZE_T yystacksize;

  int yyn;
  int yyresult;
  /* Lookahead token as an internal (translated) token number.  */
  int yytoken = 0;
  /* The variables used to return semantic value and location from the
     action routines.  */
  YYSTYPE yyval;

#if YYERROR_VERBOSE
  /* Buffer for error messages, and its allocated size.  */
  char yymsgbuf[128];
  char *yymsg = yymsgbuf;
  YYSIZE_T yymsg_alloc = sizeof yymsgbuf;
#endif

#define YYPOPSTACK(N)   (yyvsp -= (N), yyssp -= (N))

  /* The number of symbols on the RHS of the reduced rule.
     Keep to zero when no symbol should be popped.  */
  int yylen = 0;

  yyssp = yyss = yyssa;
  yyvsp = yyvs = yyvsa;
  yystacksize = YYINITDEPTH;

  YYDPRINTF ((stderr, "Starting parse\n"));

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY; /* Cause a token to be read.  */
  goto yysetstate;

/*------------------------------------------------------------.
| yynewstate -- Push a new state, which is found in yystate.  |
`------------------------------------------------------------*/
 yynewstate:
  /* In all cases, when you get here, the value and location stacks
     have just been pushed.  So pushing a state here evens the stacks.  */
  yyssp++;

 yysetstate:
  *yyssp = yystate;

  if (yyss + yystacksize - 1 <= yyssp)
    {
      /* Get the current used size of the three stacks, in elements.  */
      YYSIZE_T yysize = yyssp - yyss + 1;

#ifdef yyoverflow
      {
        /* Give user a chance to reallocate the stack.  Use copies of
           these so that the &'s don't force the real ones into
           memory.  */
        YYSTYPE *yyvs1 = yyvs;
        yytype_int16 *yyss1 = yyss;

        /* Each stack pointer address is followed by the size of the
           data in use in that stack, in bytes.  This used to be a
           conditional around just the two extra args, but that might
           be undefined if yyoverflow is a macro.  */
        yyoverflow (YY_("memory exhausted"),
                    &yyss1, yysize * sizeof (*yyssp),
                    &yyvs1, yysize * sizeof (*yyvsp),
                    &yystacksize);

        yyss = yyss1;
        yyvs = yyvs1;
      }
#else /* no yyoverflow */
# ifndef YYSTACK_RELOCATE
      goto yyexhaustedlab;
# else
      /* Extend the stack our own way.  */
      if (YYMAXDEPTH <= yystacksize)
        goto yyexhaustedlab;
      yystacksize *= 2;
      if (YYMAXDEPTH < yystacksize)
        yystacksize = YYMAXDEPTH;

      {
        yytype_int16 *yyss1 = yyss;
        union yyalloc *yyptr =
          (union yyalloc *) YYSTACK_ALLOC (YYSTACK_BYTES (yystacksize));
        if (! yyptr)
          goto yyexhaustedlab;
        YYSTACK_RELOCATE (yyss_alloc, yyss);
        YYSTACK_RELOCATE (yyvs_alloc, yyvs);
#  undef YYSTACK_RELOCATE
        if (yyss1 != yyssa)
          YYSTACK_FREE (yyss1);
      }
# endif
#endif /* no yyoverflow */

      yyssp = yyss + yysize - 1;
      yyvsp = yyvs + yysize - 1;

      YYDPRINTF ((stderr, "Stack size increased to %lu\n",
                  (unsigned long int) yystacksize));

      if (yyss + yystacksize - 1 <= yyssp)
        YYABORT;
    }

  YYDPRINTF ((stderr, "Entering state %d\n", yystate));

  if (yystate == YYFINAL)
    YYACCEPT;

  goto yybackup;

/*-----------.
| yybackup.  |
`-----------*/
yybackup:

  /* Do appropriate processing given the current state.  Read a
     lookahead token if we need one and don't already have one.  */

  /* First try to decide what to do without reference to lookahead token.  */
  yyn = yypact[yystate];
  if (yypact_value_is_default (yyn))
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* YYCHAR is either YYEMPTY or YYEOF or a valid lookahead symbol.  */
  if (yychar == YYEMPTY)
    {
      YYDPRINTF ((stderr, "Reading a token: "));
      yychar = yylex ();
    }

  if (yychar <= YYEOF)
    {
      yychar = yytoken = YYEOF;
      YYDPRINTF ((stderr, "Now at end of input.\n"));
    }
  else
    {
      yytoken = YYTRANSLATE (yychar);
      YY_SYMBOL_PRINT ("Next token is", yytoken, &yylval, &yylloc);
    }

  /* If the proper action on seeing token YYTOKEN is to reduce or to
     detect an error, take that action.  */
  yyn += yytoken;
  if (yyn < 0 || YYLAST < yyn || yycheck[yyn] != yytoken)
    goto yydefault;
  yyn = yytable[yyn];
  if (yyn <= 0)
    {
      if (yytable_value_is_error (yyn))
        goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }

  /* Count tokens shifted since error; after three, turn off error
     status.  */
  if (yyerrstatus)
    yyerrstatus--;

  /* Shift the lookahead token.  */
  YY_SYMBOL_PRINT ("Shifting", yytoken, &yylval, &yylloc);

  /* Discard the shifted token.  */
  yychar = YYEMPTY;

  yystate = yyn;
  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
  *++yyvsp = yylval;
  YY_IGNORE_MAYBE_UNINITIALIZED_END

  goto yynewstate;


/*-----------------------------------------------------------.
| yydefault -- do the default action for the current state.  |
`-----------------------------------------------------------*/
yydefault:
  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;
  goto yyreduce;


/*-----------------------------.
| yyreduce -- Do a reduction.  |
`-----------------------------*/
yyreduce:
  /* yyn is the number of a rule to reduce with.  */
  yylen = yyr2[yyn];

  /* If YYLEN is nonzero, implement the default value of the action:
     '$$ = $1'.

     Otherwise, the following line sets YYVAL to garbage.
     This behavior is undocumented and Bison
     users should not rely upon it.  Assigning to YYVAL
     unconditionally makes the parser a bit smaller, and it avoids a
     GCC warning that YYVAL may be used uninitialized.  */
  yyval = yyvsp[1-yylen];


  YY_REDUCE_PRINT (yyn);
  switch (yyn)
    {
        case 21:
#line 158 "/home/hoffman/rose-develop/src/frontend/SageIII/ompparser.yy" /* yacc.c:1646  */
    {
                       ompattribute = buildOmpAttribute(e_parallel,gNode,true);
                       omptype = e_parallel; 
                     }
#line 1822 "/home/hoffman/rose-develop/b/src/frontend/SageIII/ompparser.C" /* yacc.c:1646  */
    break;

  case 36:
#line 184 "/home/hoffman/rose-develop/src/frontend/SageIII/ompparser.yy" /* yacc.c:1646  */
    { 
                           ompattribute->addClause(e_if);
                           omptype = e_if;
                         }
#line 1831 "/home/hoffman/rose-develop/b/src/frontend/SageIII/ompparser.C" /* yacc.c:1646  */
    break;

  case 37:
#line 187 "/home/hoffman/rose-develop/src/frontend/SageIII/ompparser.yy" /* yacc.c:1646  */
    { 
                           addExpression("");
                         }
#line 1839 "/home/hoffman/rose-develop/b/src/frontend/SageIII/ompparser.C" /* yacc.c:1646  */
    break;

  case 38:
#line 190 "/home/hoffman/rose-develop/src/frontend/SageIII/ompparser.yy" /* yacc.c:1646  */
    { 
                           ompattribute->addClause(e_num_threads);
                           omptype = e_num_threads;
                         }
#line 1848 "/home/hoffman/rose-develop/b/src/frontend/SageIII/ompparser.C" /* yacc.c:1646  */
    break;

  case 39:
#line 193 "/home/hoffman/rose-develop/src/frontend/SageIII/ompparser.yy" /* yacc.c:1646  */
    { 
                           addExpression("");
                         }
#line 1856 "/home/hoffman/rose-develop/b/src/frontend/SageIII/ompparser.C" /* yacc.c:1646  */
    break;

  case 40:
#line 196 "/home/hoffman/rose-develop/src/frontend/SageIII/ompparser.yy" /* yacc.c:1646  */
    { 
                           ompattribute->addClause(e_copyin);
                           omptype = e_copyin;
                         }
#line 1865 "/home/hoffman/rose-develop/b/src/frontend/SageIII/ompparser.C" /* yacc.c:1646  */
    break;

  case 41:
#line 199 "/home/hoffman/rose-develop/src/frontend/SageIII/ompparser.yy" /* yacc.c:1646  */
    {b_within_variable_list = true;}
#line 1871 "/home/hoffman/rose-develop/b/src/frontend/SageIII/ompparser.C" /* yacc.c:1646  */
    break;

  case 42:
#line 199 "/home/hoffman/rose-develop/src/frontend/SageIII/ompparser.yy" /* yacc.c:1646  */
    {b_within_variable_list = false;}
#line 1877 "/home/hoffman/rose-develop/b/src/frontend/SageIII/ompparser.C" /* yacc.c:1646  */
    break;

  case 43:
#line 202 "/home/hoffman/rose-develop/src/frontend/SageIII/ompparser.yy" /* yacc.c:1646  */
    { 
                  ompattribute = buildOmpAttribute(e_for,gNode,true); 
                }
#line 1885 "/home/hoffman/rose-develop/b/src/frontend/SageIII/ompparser.C" /* yacc.c:1646  */
    break;

  case 55:
#line 222 "/home/hoffman/rose-develop/src/frontend/SageIII/ompparser.yy" /* yacc.c:1646  */
    { 
               ompattribute->addClause(e_nowait);
               //Not correct since nowait cannot have expression or var_list
               //omptype =e_nowait;
             }
#line 1895 "/home/hoffman/rose-develop/b/src/frontend/SageIII/ompparser.C" /* yacc.c:1646  */
    break;

  case 56:
#line 229 "/home/hoffman/rose-develop/src/frontend/SageIII/ompparser.yy" /* yacc.c:1646  */
    { 
                      ompattribute->addClause(e_ordered_clause);
                    }
#line 1903 "/home/hoffman/rose-develop/b/src/frontend/SageIII/ompparser.C" /* yacc.c:1646  */
    break;

  case 57:
#line 232 "/home/hoffman/rose-develop/src/frontend/SageIII/ompparser.yy" /* yacc.c:1646  */
    { 
                      ompattribute->addClause(e_schedule);
                      ompattribute->setScheduleKind(static_cast<omp_construct_enum>((yyvsp[-1].itype)));
                      omptype = e_schedule;
                    }
#line 1913 "/home/hoffman/rose-develop/b/src/frontend/SageIII/ompparser.C" /* yacc.c:1646  */
    break;

  case 58:
#line 237 "/home/hoffman/rose-develop/src/frontend/SageIII/ompparser.yy" /* yacc.c:1646  */
    { 
                      ompattribute->addClause(e_schedule);
                      ompattribute->setScheduleKind(static_cast<omp_construct_enum>((yyvsp[-1].itype)));
                      omptype = e_schedule;
                    }
#line 1923 "/home/hoffman/rose-develop/b/src/frontend/SageIII/ompparser.C" /* yacc.c:1646  */
    break;

  case 59:
#line 241 "/home/hoffman/rose-develop/src/frontend/SageIII/ompparser.yy" /* yacc.c:1646  */
    { 
                      addExpression("");
                    }
#line 1931 "/home/hoffman/rose-develop/b/src/frontend/SageIII/ompparser.C" /* yacc.c:1646  */
    break;

  case 60:
#line 244 "/home/hoffman/rose-develop/src/frontend/SageIII/ompparser.yy" /* yacc.c:1646  */
    {
                      ompattribute->addClause(e_collapse);
                      omptype = e_collapse;
                    }
#line 1940 "/home/hoffman/rose-develop/b/src/frontend/SageIII/ompparser.C" /* yacc.c:1646  */
    break;

  case 61:
#line 247 "/home/hoffman/rose-develop/src/frontend/SageIII/ompparser.yy" /* yacc.c:1646  */
    { 
                      addExpression("");
                    }
#line 1948 "/home/hoffman/rose-develop/b/src/frontend/SageIII/ompparser.C" /* yacc.c:1646  */
    break;

  case 62:
#line 252 "/home/hoffman/rose-develop/src/frontend/SageIII/ompparser.yy" /* yacc.c:1646  */
    { (yyval.itype) = e_schedule_static; }
#line 1954 "/home/hoffman/rose-develop/b/src/frontend/SageIII/ompparser.C" /* yacc.c:1646  */
    break;

  case 63:
#line 253 "/home/hoffman/rose-develop/src/frontend/SageIII/ompparser.yy" /* yacc.c:1646  */
    { (yyval.itype) = e_schedule_dynamic; }
#line 1960 "/home/hoffman/rose-develop/b/src/frontend/SageIII/ompparser.C" /* yacc.c:1646  */
    break;

  case 64:
#line 254 "/home/hoffman/rose-develop/src/frontend/SageIII/ompparser.yy" /* yacc.c:1646  */
    { (yyval.itype) = e_schedule_guided; }
#line 1966 "/home/hoffman/rose-develop/b/src/frontend/SageIII/ompparser.C" /* yacc.c:1646  */
    break;

  case 65:
#line 255 "/home/hoffman/rose-develop/src/frontend/SageIII/ompparser.yy" /* yacc.c:1646  */
    { (yyval.itype) = e_schedule_auto; }
#line 1972 "/home/hoffman/rose-develop/b/src/frontend/SageIII/ompparser.C" /* yacc.c:1646  */
    break;

  case 66:
#line 256 "/home/hoffman/rose-develop/src/frontend/SageIII/ompparser.yy" /* yacc.c:1646  */
    { (yyval.itype) = e_schedule_runtime; }
#line 1978 "/home/hoffman/rose-develop/b/src/frontend/SageIII/ompparser.C" /* yacc.c:1646  */
    break;

  case 67:
#line 259 "/home/hoffman/rose-develop/src/frontend/SageIII/ompparser.yy" /* yacc.c:1646  */
    { 
                       ompattribute = buildOmpAttribute(e_sections,gNode, true); 
                     }
#line 1986 "/home/hoffman/rose-develop/b/src/frontend/SageIII/ompparser.C" /* yacc.c:1646  */
    break;

  case 78:
#line 277 "/home/hoffman/rose-develop/src/frontend/SageIII/ompparser.yy" /* yacc.c:1646  */
    {
                    ompattribute->addClause(e_nowait);
                  }
#line 1994 "/home/hoffman/rose-develop/b/src/frontend/SageIII/ompparser.C" /* yacc.c:1646  */
    break;

  case 79:
#line 282 "/home/hoffman/rose-develop/src/frontend/SageIII/ompparser.yy" /* yacc.c:1646  */
    { 
                      ompattribute = buildOmpAttribute(e_section,gNode,true); 
                    }
#line 2002 "/home/hoffman/rose-develop/b/src/frontend/SageIII/ompparser.C" /* yacc.c:1646  */
    break;

  case 80:
#line 287 "/home/hoffman/rose-develop/src/frontend/SageIII/ompparser.yy" /* yacc.c:1646  */
    { 
                     ompattribute = buildOmpAttribute(e_single,gNode,true); 
                     omptype = e_single; 
                   }
#line 2011 "/home/hoffman/rose-develop/b/src/frontend/SageIII/ompparser.C" /* yacc.c:1646  */
    break;

  case 90:
#line 305 "/home/hoffman/rose-develop/src/frontend/SageIII/ompparser.yy" /* yacc.c:1646  */
    { 
                  ompattribute->addClause(e_nowait);
                }
#line 2019 "/home/hoffman/rose-develop/b/src/frontend/SageIII/ompparser.C" /* yacc.c:1646  */
    break;

  case 91:
#line 309 "/home/hoffman/rose-develop/src/frontend/SageIII/ompparser.yy" /* yacc.c:1646  */
    { 
                         ompattribute->addClause(e_copyprivate);
                         omptype = e_copyprivate; 
                       }
#line 2028 "/home/hoffman/rose-develop/b/src/frontend/SageIII/ompparser.C" /* yacc.c:1646  */
    break;

  case 92:
#line 313 "/home/hoffman/rose-develop/src/frontend/SageIII/ompparser.yy" /* yacc.c:1646  */
    {b_within_variable_list = true;}
#line 2034 "/home/hoffman/rose-develop/b/src/frontend/SageIII/ompparser.C" /* yacc.c:1646  */
    break;

  case 93:
#line 313 "/home/hoffman/rose-develop/src/frontend/SageIII/ompparser.yy" /* yacc.c:1646  */
    {b_within_variable_list =false;}
#line 2040 "/home/hoffman/rose-develop/b/src/frontend/SageIII/ompparser.C" /* yacc.c:1646  */
    break;

  case 94:
#line 315 "/home/hoffman/rose-develop/src/frontend/SageIII/ompparser.yy" /* yacc.c:1646  */
    {
                   ompattribute = buildOmpAttribute(e_task,gNode,true);
                   omptype = e_task; 
                 }
#line 2049 "/home/hoffman/rose-develop/b/src/frontend/SageIII/ompparser.C" /* yacc.c:1646  */
    break;

  case 105:
#line 334 "/home/hoffman/rose-develop/src/frontend/SageIII/ompparser.yy" /* yacc.c:1646  */
    { 
                       ompattribute->addClause(e_if);
                       omptype = e_if; 
                     }
#line 2058 "/home/hoffman/rose-develop/b/src/frontend/SageIII/ompparser.C" /* yacc.c:1646  */
    break;

  case 106:
#line 337 "/home/hoffman/rose-develop/src/frontend/SageIII/ompparser.yy" /* yacc.c:1646  */
    { 
                       addExpression("");
                     }
#line 2066 "/home/hoffman/rose-develop/b/src/frontend/SageIII/ompparser.C" /* yacc.c:1646  */
    break;

  case 107:
#line 340 "/home/hoffman/rose-develop/src/frontend/SageIII/ompparser.yy" /* yacc.c:1646  */
    {
                       ompattribute->addClause(e_untied);
                     }
#line 2074 "/home/hoffman/rose-develop/b/src/frontend/SageIII/ompparser.C" /* yacc.c:1646  */
    break;

  case 108:
#line 345 "/home/hoffman/rose-develop/src/frontend/SageIII/ompparser.yy" /* yacc.c:1646  */
    { 
                           ompattribute = buildOmpAttribute(e_parallel_for,gNode, true); 
                         }
#line 2082 "/home/hoffman/rose-develop/b/src/frontend/SageIII/ompparser.C" /* yacc.c:1646  */
    break;

  case 125:
#line 371 "/home/hoffman/rose-develop/src/frontend/SageIII/ompparser.yy" /* yacc.c:1646  */
    { 
                                ompattribute =buildOmpAttribute(e_parallel_sections,gNode, true); 
                                omptype = e_parallel_sections; 
                              }
#line 2091 "/home/hoffman/rose-develop/b/src/frontend/SageIII/ompparser.C" /* yacc.c:1646  */
    break;

  case 141:
#line 397 "/home/hoffman/rose-develop/src/frontend/SageIII/ompparser.yy" /* yacc.c:1646  */
    { 
                     ompattribute = buildOmpAttribute(e_master, gNode, true);}
#line 2098 "/home/hoffman/rose-develop/b/src/frontend/SageIII/ompparser.C" /* yacc.c:1646  */
    break;

  case 142:
#line 401 "/home/hoffman/rose-develop/src/frontend/SageIII/ompparser.yy" /* yacc.c:1646  */
    {
                       ompattribute = buildOmpAttribute(e_critical, gNode, true); 
                     }
#line 2106 "/home/hoffman/rose-develop/b/src/frontend/SageIII/ompparser.C" /* yacc.c:1646  */
    break;

  case 146:
#line 414 "/home/hoffman/rose-develop/src/frontend/SageIII/ompparser.yy" /* yacc.c:1646  */
    { 
                  ompattribute->setCriticalName((const char*)(yyvsp[-1].stype));
                }
#line 2114 "/home/hoffman/rose-develop/b/src/frontend/SageIII/ompparser.C" /* yacc.c:1646  */
    break;

  case 147:
#line 419 "/home/hoffman/rose-develop/src/frontend/SageIII/ompparser.yy" /* yacc.c:1646  */
    { 
                      ompattribute = buildOmpAttribute(e_barrier,gNode, true); }
#line 2121 "/home/hoffman/rose-develop/b/src/frontend/SageIII/ompparser.C" /* yacc.c:1646  */
    break;

  case 148:
#line 423 "/home/hoffman/rose-develop/src/frontend/SageIII/ompparser.yy" /* yacc.c:1646  */
    { 
                       ompattribute = buildOmpAttribute(e_taskwait, gNode, true); }
#line 2128 "/home/hoffman/rose-develop/b/src/frontend/SageIII/ompparser.C" /* yacc.c:1646  */
    break;

  case 149:
#line 427 "/home/hoffman/rose-develop/src/frontend/SageIII/ompparser.yy" /* yacc.c:1646  */
    { 
                     ompattribute = buildOmpAttribute(e_atomic,gNode, true); }
#line 2135 "/home/hoffman/rose-develop/b/src/frontend/SageIII/ompparser.C" /* yacc.c:1646  */
    break;

  case 150:
#line 431 "/home/hoffman/rose-develop/src/frontend/SageIII/ompparser.yy" /* yacc.c:1646  */
    {
                    ompattribute = buildOmpAttribute(e_flush,gNode, true);
                    omptype = e_flush; 
                  }
#line 2144 "/home/hoffman/rose-develop/b/src/frontend/SageIII/ompparser.C" /* yacc.c:1646  */
    break;

  case 154:
#line 441 "/home/hoffman/rose-develop/src/frontend/SageIII/ompparser.yy" /* yacc.c:1646  */
    {b_within_variable_list = true;}
#line 2150 "/home/hoffman/rose-develop/b/src/frontend/SageIII/ompparser.C" /* yacc.c:1646  */
    break;

  case 155:
#line 441 "/home/hoffman/rose-develop/src/frontend/SageIII/ompparser.yy" /* yacc.c:1646  */
    {b_within_variable_list = false;}
#line 2156 "/home/hoffman/rose-develop/b/src/frontend/SageIII/ompparser.C" /* yacc.c:1646  */
    break;

  case 156:
#line 444 "/home/hoffman/rose-develop/src/frontend/SageIII/ompparser.yy" /* yacc.c:1646  */
    { 
                      ompattribute = buildOmpAttribute(e_ordered_directive,gNode, true); 
                    }
#line 2164 "/home/hoffman/rose-develop/b/src/frontend/SageIII/ompparser.C" /* yacc.c:1646  */
    break;

  case 157:
#line 449 "/home/hoffman/rose-develop/src/frontend/SageIII/ompparser.yy" /* yacc.c:1646  */
    {
                            ompattribute = buildOmpAttribute(e_threadprivate,gNode, true); 
                            omptype = e_threadprivate; 
                          }
#line 2173 "/home/hoffman/rose-develop/b/src/frontend/SageIII/ompparser.C" /* yacc.c:1646  */
    break;

  case 158:
#line 452 "/home/hoffman/rose-develop/src/frontend/SageIII/ompparser.yy" /* yacc.c:1646  */
    {b_within_variable_list = true;}
#line 2179 "/home/hoffman/rose-develop/b/src/frontend/SageIII/ompparser.C" /* yacc.c:1646  */
    break;

  case 159:
#line 452 "/home/hoffman/rose-develop/src/frontend/SageIII/ompparser.yy" /* yacc.c:1646  */
    {b_within_variable_list = false;}
#line 2185 "/home/hoffman/rose-develop/b/src/frontend/SageIII/ompparser.C" /* yacc.c:1646  */
    break;

  case 160:
#line 455 "/home/hoffman/rose-develop/src/frontend/SageIII/ompparser.yy" /* yacc.c:1646  */
    { 
                        ompattribute->addClause(e_default);
                        ompattribute->setDefaultValue(e_default_shared); 
                      }
#line 2194 "/home/hoffman/rose-develop/b/src/frontend/SageIII/ompparser.C" /* yacc.c:1646  */
    break;

  case 161:
#line 459 "/home/hoffman/rose-develop/src/frontend/SageIII/ompparser.yy" /* yacc.c:1646  */
    {
                        ompattribute->addClause(e_default);
                        ompattribute->setDefaultValue(e_default_none);
                      }
#line 2203 "/home/hoffman/rose-develop/b/src/frontend/SageIII/ompparser.C" /* yacc.c:1646  */
    break;

  case 162:
#line 465 "/home/hoffman/rose-develop/src/frontend/SageIII/ompparser.yy" /* yacc.c:1646  */
    {
                              ompattribute->addClause(e_private); omptype = e_private;
                            }
#line 2211 "/home/hoffman/rose-develop/b/src/frontend/SageIII/ompparser.C" /* yacc.c:1646  */
    break;

  case 163:
#line 467 "/home/hoffman/rose-develop/src/frontend/SageIII/ompparser.yy" /* yacc.c:1646  */
    {b_within_variable_list = true;}
#line 2217 "/home/hoffman/rose-develop/b/src/frontend/SageIII/ompparser.C" /* yacc.c:1646  */
    break;

  case 164:
#line 467 "/home/hoffman/rose-develop/src/frontend/SageIII/ompparser.yy" /* yacc.c:1646  */
    {b_within_variable_list = false;}
#line 2223 "/home/hoffman/rose-develop/b/src/frontend/SageIII/ompparser.C" /* yacc.c:1646  */
    break;

  case 165:
#line 470 "/home/hoffman/rose-develop/src/frontend/SageIII/ompparser.yy" /* yacc.c:1646  */
    { 
                                 ompattribute->addClause(e_firstprivate); 
                                 omptype = e_firstprivate;
                               }
#line 2232 "/home/hoffman/rose-develop/b/src/frontend/SageIII/ompparser.C" /* yacc.c:1646  */
    break;

  case 166:
#line 473 "/home/hoffman/rose-develop/src/frontend/SageIII/ompparser.yy" /* yacc.c:1646  */
    {b_within_variable_list = true;}
#line 2238 "/home/hoffman/rose-develop/b/src/frontend/SageIII/ompparser.C" /* yacc.c:1646  */
    break;

  case 167:
#line 473 "/home/hoffman/rose-develop/src/frontend/SageIII/ompparser.yy" /* yacc.c:1646  */
    {b_within_variable_list = false;}
#line 2244 "/home/hoffman/rose-develop/b/src/frontend/SageIII/ompparser.C" /* yacc.c:1646  */
    break;

  case 168:
#line 476 "/home/hoffman/rose-develop/src/frontend/SageIII/ompparser.yy" /* yacc.c:1646  */
    { 
                                  ompattribute->addClause(e_lastprivate); 
                                  omptype = e_lastprivate;
                                }
#line 2253 "/home/hoffman/rose-develop/b/src/frontend/SageIII/ompparser.C" /* yacc.c:1646  */
    break;

  case 169:
#line 479 "/home/hoffman/rose-develop/src/frontend/SageIII/ompparser.yy" /* yacc.c:1646  */
    {b_within_variable_list = true;}
#line 2259 "/home/hoffman/rose-develop/b/src/frontend/SageIII/ompparser.C" /* yacc.c:1646  */
    break;

  case 170:
#line 479 "/home/hoffman/rose-develop/src/frontend/SageIII/ompparser.yy" /* yacc.c:1646  */
    {b_within_variable_list = false;}
#line 2265 "/home/hoffman/rose-develop/b/src/frontend/SageIII/ompparser.C" /* yacc.c:1646  */
    break;

  case 171:
#line 482 "/home/hoffman/rose-develop/src/frontend/SageIII/ompparser.yy" /* yacc.c:1646  */
    {
                        ompattribute->addClause(e_shared); omptype = e_shared; 
                      }
#line 2273 "/home/hoffman/rose-develop/b/src/frontend/SageIII/ompparser.C" /* yacc.c:1646  */
    break;

  case 172:
#line 484 "/home/hoffman/rose-develop/src/frontend/SageIII/ompparser.yy" /* yacc.c:1646  */
    {b_within_variable_list = true;}
#line 2279 "/home/hoffman/rose-develop/b/src/frontend/SageIII/ompparser.C" /* yacc.c:1646  */
    break;

  case 173:
#line 484 "/home/hoffman/rose-develop/src/frontend/SageIII/ompparser.yy" /* yacc.c:1646  */
    {b_within_variable_list = false;}
#line 2285 "/home/hoffman/rose-develop/b/src/frontend/SageIII/ompparser.C" /* yacc.c:1646  */
    break;

  case 174:
#line 487 "/home/hoffman/rose-develop/src/frontend/SageIII/ompparser.yy" /* yacc.c:1646  */
    { 
                          ompattribute->addClause(e_reduction);
                        }
#line 2293 "/home/hoffman/rose-develop/b/src/frontend/SageIII/ompparser.C" /* yacc.c:1646  */
    break;

  case 175:
#line 489 "/home/hoffman/rose-develop/src/frontend/SageIII/ompparser.yy" /* yacc.c:1646  */
    {b_within_variable_list = true;}
#line 2299 "/home/hoffman/rose-develop/b/src/frontend/SageIII/ompparser.C" /* yacc.c:1646  */
    break;

  case 176:
#line 489 "/home/hoffman/rose-develop/src/frontend/SageIII/ompparser.yy" /* yacc.c:1646  */
    {b_within_variable_list = false;}
#line 2305 "/home/hoffman/rose-develop/b/src/frontend/SageIII/ompparser.C" /* yacc.c:1646  */
    break;

  case 177:
#line 492 "/home/hoffman/rose-develop/src/frontend/SageIII/ompparser.yy" /* yacc.c:1646  */
    {
                       ompattribute->setReductionOperator(e_reduction_plus); 
                       omptype = e_reduction_plus; /*variables are stored for each operator*/
                     }
#line 2314 "/home/hoffman/rose-develop/b/src/frontend/SageIII/ompparser.C" /* yacc.c:1646  */
    break;

  case 178:
#line 496 "/home/hoffman/rose-develop/src/frontend/SageIII/ompparser.yy" /* yacc.c:1646  */
    {
                       ompattribute->setReductionOperator(e_reduction_mul);  
                       omptype = e_reduction_mul;
                     }
#line 2323 "/home/hoffman/rose-develop/b/src/frontend/SageIII/ompparser.C" /* yacc.c:1646  */
    break;

  case 179:
#line 500 "/home/hoffman/rose-develop/src/frontend/SageIII/ompparser.yy" /* yacc.c:1646  */
    {
                       ompattribute->setReductionOperator(e_reduction_minus); 
                       omptype = e_reduction_minus;
                      }
#line 2332 "/home/hoffman/rose-develop/b/src/frontend/SageIII/ompparser.C" /* yacc.c:1646  */
    break;

  case 180:
#line 504 "/home/hoffman/rose-develop/src/frontend/SageIII/ompparser.yy" /* yacc.c:1646  */
    {
                       ompattribute->setReductionOperator(e_reduction_bitand);  
                       omptype = e_reduction_bitand;
                      }
#line 2341 "/home/hoffman/rose-develop/b/src/frontend/SageIII/ompparser.C" /* yacc.c:1646  */
    break;

  case 181:
#line 508 "/home/hoffman/rose-develop/src/frontend/SageIII/ompparser.yy" /* yacc.c:1646  */
    {
                       ompattribute->setReductionOperator(e_reduction_bitxor);  
                       omptype = e_reduction_bitxor;
                      }
#line 2350 "/home/hoffman/rose-develop/b/src/frontend/SageIII/ompparser.C" /* yacc.c:1646  */
    break;

  case 182:
#line 512 "/home/hoffman/rose-develop/src/frontend/SageIII/ompparser.yy" /* yacc.c:1646  */
    {
                       ompattribute->setReductionOperator(e_reduction_bitor);  
                       omptype = e_reduction_bitor;
                      }
#line 2359 "/home/hoffman/rose-develop/b/src/frontend/SageIII/ompparser.C" /* yacc.c:1646  */
    break;

  case 183:
#line 516 "/home/hoffman/rose-develop/src/frontend/SageIII/ompparser.yy" /* yacc.c:1646  */
    {
                       ompattribute->setReductionOperator(e_reduction_logand);  
                       omptype = e_reduction_logand;
                     }
#line 2368 "/home/hoffman/rose-develop/b/src/frontend/SageIII/ompparser.C" /* yacc.c:1646  */
    break;

  case 184:
#line 520 "/home/hoffman/rose-develop/src/frontend/SageIII/ompparser.yy" /* yacc.c:1646  */
    {
                       ompattribute->setReductionOperator(e_reduction_logor); 
                       omptype = e_reduction_logor;
                     }
#line 2377 "/home/hoffman/rose-develop/b/src/frontend/SageIII/ompparser.C" /* yacc.c:1646  */
    break;

  case 185:
#line 526 "/home/hoffman/rose-develop/src/frontend/SageIII/ompparser.yy" /* yacc.c:1646  */
    {
                       ompattribute = buildOmpAttribute(e_target_data, gNode,true);
                       omptype = e_target_data;
                     }
#line 2386 "/home/hoffman/rose-develop/b/src/frontend/SageIII/ompparser.C" /* yacc.c:1646  */
    break;

  case 193:
#line 543 "/home/hoffman/rose-develop/src/frontend/SageIII/ompparser.yy" /* yacc.c:1646  */
    {
                       ompattribute = buildOmpAttribute(e_target,gNode,true);
                       omptype = e_target;
                     }
#line 2395 "/home/hoffman/rose-develop/b/src/frontend/SageIII/ompparser.C" /* yacc.c:1646  */
    break;

  case 206:
#line 575 "/home/hoffman/rose-develop/src/frontend/SageIII/ompparser.yy" /* yacc.c:1646  */
    {
                           ompattribute->addClause(e_device);
                           omptype = e_device;
                         }
#line 2404 "/home/hoffman/rose-develop/b/src/frontend/SageIII/ompparser.C" /* yacc.c:1646  */
    break;

  case 208:
#line 582 "/home/hoffman/rose-develop/src/frontend/SageIII/ompparser.yy" /* yacc.c:1646  */
    { // special mpi device for supporting MPI code generation
                            current_exp= SageBuilder::buildStringVal("mpi");
                            addExpression("mpi");
                          }
#line 2413 "/home/hoffman/rose-develop/b/src/frontend/SageIII/ompparser.C" /* yacc.c:1646  */
    break;

  case 209:
#line 586 "/home/hoffman/rose-develop/src/frontend/SageIII/ompparser.yy" /* yacc.c:1646  */
    { // special mpi device for supporting MPI code generation
                            current_exp= SageBuilder::buildStringVal("mpi:all");
                            addExpression("mpi:all");
                          }
#line 2422 "/home/hoffman/rose-develop/b/src/frontend/SageIII/ompparser.C" /* yacc.c:1646  */
    break;

  case 210:
#line 590 "/home/hoffman/rose-develop/src/frontend/SageIII/ompparser.yy" /* yacc.c:1646  */
    { // special mpi device for supporting MPI code generation
                            current_exp= SageBuilder::buildStringVal("mpi:master");
                            addExpression("mpi:master");
                          }
#line 2431 "/home/hoffman/rose-develop/b/src/frontend/SageIII/ompparser.C" /* yacc.c:1646  */
    break;

  case 211:
#line 594 "/home/hoffman/rose-develop/src/frontend/SageIII/ompparser.yy" /* yacc.c:1646  */
    { //normal expression
                           addExpression("");
                          }
#line 2439 "/home/hoffman/rose-develop/b/src/frontend/SageIII/ompparser.C" /* yacc.c:1646  */
    break;

  case 212:
#line 597 "/home/hoffman/rose-develop/src/frontend/SageIII/ompparser.yy" /* yacc.c:1646  */
    { // our extension device (*) 
                            current_exp= SageBuilder::buildCharVal('*'); 
                            addExpression("*");  }
#line 2447 "/home/hoffman/rose-develop/b/src/frontend/SageIII/ompparser.C" /* yacc.c:1646  */
    break;

  case 213:
#line 600 "/home/hoffman/rose-develop/src/frontend/SageIII/ompparser.yy" /* yacc.c:1646  */
    {
                           ompattribute->addClause(e_begin);
                           omptype = e_begin;
                    }
#line 2456 "/home/hoffman/rose-develop/b/src/frontend/SageIII/ompparser.C" /* yacc.c:1646  */
    break;

  case 214:
#line 606 "/home/hoffman/rose-develop/src/frontend/SageIII/ompparser.yy" /* yacc.c:1646  */
    {
                           ompattribute->addClause(e_end);
                           omptype = e_end;
                    }
#line 2465 "/home/hoffman/rose-develop/b/src/frontend/SageIII/ompparser.C" /* yacc.c:1646  */
    break;

  case 215:
#line 613 "/home/hoffman/rose-develop/src/frontend/SageIII/ompparser.yy" /* yacc.c:1646  */
    {
                           ompattribute->addClause(e_if);
                           omptype = e_if;
             }
#line 2474 "/home/hoffman/rose-develop/b/src/frontend/SageIII/ompparser.C" /* yacc.c:1646  */
    break;

  case 216:
#line 616 "/home/hoffman/rose-develop/src/frontend/SageIII/ompparser.yy" /* yacc.c:1646  */
    {
                            addExpression("");
             }
#line 2482 "/home/hoffman/rose-develop/b/src/frontend/SageIII/ompparser.C" /* yacc.c:1646  */
    break;

  case 217:
#line 621 "/home/hoffman/rose-develop/src/frontend/SageIII/ompparser.yy" /* yacc.c:1646  */
    {
                           ompattribute->addClause(e_num_threads);
                           omptype = e_num_threads;
                         }
#line 2491 "/home/hoffman/rose-develop/b/src/frontend/SageIII/ompparser.C" /* yacc.c:1646  */
    break;

  case 218:
#line 624 "/home/hoffman/rose-develop/src/frontend/SageIII/ompparser.yy" /* yacc.c:1646  */
    {
                            addExpression("");
                         }
#line 2499 "/home/hoffman/rose-develop/b/src/frontend/SageIII/ompparser.C" /* yacc.c:1646  */
    break;

  case 219:
#line 628 "/home/hoffman/rose-develop/src/frontend/SageIII/ompparser.yy" /* yacc.c:1646  */
    {
                          ompattribute->addClause(e_map);
                           omptype = e_map; // use as a flag to see if it will be reset later
                     }
#line 2508 "/home/hoffman/rose-develop/b/src/frontend/SageIII/ompparser.C" /* yacc.c:1646  */
    break;

  case 220:
#line 632 "/home/hoffman/rose-develop/src/frontend/SageIII/ompparser.yy" /* yacc.c:1646  */
    { 
                       b_within_variable_list = true;
                       if (omptype == e_map) // map data directions are not explicitly specified
                       {
                          ompattribute->setMapVariant(e_map_tofrom);  omptype = e_map_tofrom;  
                       }
                     }
#line 2520 "/home/hoffman/rose-develop/b/src/frontend/SageIII/ompparser.C" /* yacc.c:1646  */
    break;

  case 221:
#line 639 "/home/hoffman/rose-develop/src/frontend/SageIII/ompparser.yy" /* yacc.c:1646  */
    { b_within_variable_list =false;}
#line 2526 "/home/hoffman/rose-develop/b/src/frontend/SageIII/ompparser.C" /* yacc.c:1646  */
    break;

  case 222:
#line 641 "/home/hoffman/rose-develop/src/frontend/SageIII/ompparser.yy" /* yacc.c:1646  */
    { ompattribute->setMapVariant(e_map_tofrom);  omptype = e_map_tofrom; /*No effect here???*/ }
#line 2532 "/home/hoffman/rose-develop/b/src/frontend/SageIII/ompparser.C" /* yacc.c:1646  */
    break;

  case 223:
#line 642 "/home/hoffman/rose-develop/src/frontend/SageIII/ompparser.yy" /* yacc.c:1646  */
    { ompattribute->setMapVariant(e_map_alloc);  omptype = e_map_alloc; }
#line 2538 "/home/hoffman/rose-develop/b/src/frontend/SageIII/ompparser.C" /* yacc.c:1646  */
    break;

  case 224:
#line 643 "/home/hoffman/rose-develop/src/frontend/SageIII/ompparser.yy" /* yacc.c:1646  */
    { ompattribute->setMapVariant(e_map_to); omptype = e_map_to; }
#line 2544 "/home/hoffman/rose-develop/b/src/frontend/SageIII/ompparser.C" /* yacc.c:1646  */
    break;

  case 225:
#line 644 "/home/hoffman/rose-develop/src/frontend/SageIII/ompparser.yy" /* yacc.c:1646  */
    { ompattribute->setMapVariant(e_map_from); omptype = e_map_from; }
#line 2550 "/home/hoffman/rose-develop/b/src/frontend/SageIII/ompparser.C" /* yacc.c:1646  */
    break;

  case 226:
#line 645 "/home/hoffman/rose-develop/src/frontend/SageIII/ompparser.yy" /* yacc.c:1646  */
    { ompattribute->setMapVariant(e_map_tofrom); omptype = e_map_tofrom; }
#line 2556 "/home/hoffman/rose-develop/b/src/frontend/SageIII/ompparser.C" /* yacc.c:1646  */
    break;

  case 227:
#line 649 "/home/hoffman/rose-develop/src/frontend/SageIII/ompparser.yy" /* yacc.c:1646  */
    { ompattribute = buildOmpAttribute(e_simd,gNode,true); 
                    omptype = e_simd; }
#line 2563 "/home/hoffman/rose-develop/b/src/frontend/SageIII/ompparser.C" /* yacc.c:1646  */
    break;

  case 234:
#line 665 "/home/hoffman/rose-develop/src/frontend/SageIII/ompparser.yy" /* yacc.c:1646  */
    {
                        ompattribute->addClause(e_safelen);
                        omptype = e_safelen;
                      }
#line 2572 "/home/hoffman/rose-develop/b/src/frontend/SageIII/ompparser.C" /* yacc.c:1646  */
    break;

  case 235:
#line 668 "/home/hoffman/rose-develop/src/frontend/SageIII/ompparser.yy" /* yacc.c:1646  */
    {
                        addExpression("");
                      }
#line 2580 "/home/hoffman/rose-develop/b/src/frontend/SageIII/ompparser.C" /* yacc.c:1646  */
    break;

  case 240:
#line 677 "/home/hoffman/rose-develop/src/frontend/SageIII/ompparser.yy" /* yacc.c:1646  */
    { 
                         ompattribute->addClause(e_uniform);
                         omptype = e_uniform; 
                       }
#line 2589 "/home/hoffman/rose-develop/b/src/frontend/SageIII/ompparser.C" /* yacc.c:1646  */
    break;

  case 241:
#line 681 "/home/hoffman/rose-develop/src/frontend/SageIII/ompparser.yy" /* yacc.c:1646  */
    {b_within_variable_list = true;}
#line 2595 "/home/hoffman/rose-develop/b/src/frontend/SageIII/ompparser.C" /* yacc.c:1646  */
    break;

  case 242:
#line 681 "/home/hoffman/rose-develop/src/frontend/SageIII/ompparser.yy" /* yacc.c:1646  */
    {b_within_variable_list =false;}
#line 2601 "/home/hoffman/rose-develop/b/src/frontend/SageIII/ompparser.C" /* yacc.c:1646  */
    break;

  case 243:
#line 684 "/home/hoffman/rose-develop/src/frontend/SageIII/ompparser.yy" /* yacc.c:1646  */
    { 
                         ompattribute->addClause(e_aligned);
                         omptype = e_aligned; 
                       }
#line 2610 "/home/hoffman/rose-develop/b/src/frontend/SageIII/ompparser.C" /* yacc.c:1646  */
    break;

  case 244:
#line 688 "/home/hoffman/rose-develop/src/frontend/SageIII/ompparser.yy" /* yacc.c:1646  */
    {b_within_variable_list = true;}
#line 2616 "/home/hoffman/rose-develop/b/src/frontend/SageIII/ompparser.C" /* yacc.c:1646  */
    break;

  case 245:
#line 688 "/home/hoffman/rose-develop/src/frontend/SageIII/ompparser.yy" /* yacc.c:1646  */
    {b_within_variable_list =false;}
#line 2622 "/home/hoffman/rose-develop/b/src/frontend/SageIII/ompparser.C" /* yacc.c:1646  */
    break;

  case 246:
#line 690 "/home/hoffman/rose-develop/src/frontend/SageIII/ompparser.yy" /* yacc.c:1646  */
    { ompattribute->addClause(e_reduction);}
#line 2628 "/home/hoffman/rose-develop/b/src/frontend/SageIII/ompparser.C" /* yacc.c:1646  */
    break;

  case 247:
#line 691 "/home/hoffman/rose-develop/src/frontend/SageIII/ompparser.yy" /* yacc.c:1646  */
    {b_within_variable_list = true;}
#line 2634 "/home/hoffman/rose-develop/b/src/frontend/SageIII/ompparser.C" /* yacc.c:1646  */
    break;

  case 248:
#line 691 "/home/hoffman/rose-develop/src/frontend/SageIII/ompparser.yy" /* yacc.c:1646  */
    {b_within_variable_list =false;}
#line 2640 "/home/hoffman/rose-develop/b/src/frontend/SageIII/ompparser.C" /* yacc.c:1646  */
    break;

  case 249:
#line 694 "/home/hoffman/rose-develop/src/frontend/SageIII/ompparser.yy" /* yacc.c:1646  */
    { 
                         ompattribute->addClause(e_linear);
                         omptype = e_linear; 
                       }
#line 2649 "/home/hoffman/rose-develop/b/src/frontend/SageIII/ompparser.C" /* yacc.c:1646  */
    break;

  case 250:
#line 698 "/home/hoffman/rose-develop/src/frontend/SageIII/ompparser.yy" /* yacc.c:1646  */
    {b_within_variable_list = true;}
#line 2655 "/home/hoffman/rose-develop/b/src/frontend/SageIII/ompparser.C" /* yacc.c:1646  */
    break;

  case 251:
#line 698 "/home/hoffman/rose-develop/src/frontend/SageIII/ompparser.yy" /* yacc.c:1646  */
    {b_within_variable_list =false;}
#line 2661 "/home/hoffman/rose-develop/b/src/frontend/SageIII/ompparser.C" /* yacc.c:1646  */
    break;

  case 252:
#line 700 "/home/hoffman/rose-develop/src/frontend/SageIII/ompparser.yy" /* yacc.c:1646  */
    { ompattribute->addClause(e_reduction);}
#line 2667 "/home/hoffman/rose-develop/b/src/frontend/SageIII/ompparser.C" /* yacc.c:1646  */
    break;

  case 253:
#line 701 "/home/hoffman/rose-develop/src/frontend/SageIII/ompparser.yy" /* yacc.c:1646  */
    {b_within_variable_list = true;}
#line 2673 "/home/hoffman/rose-develop/b/src/frontend/SageIII/ompparser.C" /* yacc.c:1646  */
    break;

  case 254:
#line 701 "/home/hoffman/rose-develop/src/frontend/SageIII/ompparser.yy" /* yacc.c:1646  */
    {b_within_variable_list =false;}
#line 2679 "/home/hoffman/rose-develop/b/src/frontend/SageIII/ompparser.C" /* yacc.c:1646  */
    break;

  case 258:
#line 714 "/home/hoffman/rose-develop/src/frontend/SageIII/ompparser.yy" /* yacc.c:1646  */
    {
                    current_exp = SageBuilder::buildAssignOp(
                      (SgExpression*)((yyvsp[-2].ptype)),
                      (SgExpression*)((yyvsp[0].ptype))
                    ); 
                    (yyval.ptype) = current_exp;
                  }
#line 2691 "/home/hoffman/rose-develop/b/src/frontend/SageIII/ompparser.C" /* yacc.c:1646  */
    break;

  case 259:
#line 721 "/home/hoffman/rose-develop/src/frontend/SageIII/ompparser.yy" /* yacc.c:1646  */
    {
                    current_exp = SageBuilder::buildRshiftAssignOp(
                      (SgExpression*)((yyvsp[-2].ptype)),
                      (SgExpression*)((yyvsp[0].ptype))
                    ); 
                    (yyval.ptype) = current_exp;
                  }
#line 2703 "/home/hoffman/rose-develop/b/src/frontend/SageIII/ompparser.C" /* yacc.c:1646  */
    break;

  case 260:
#line 728 "/home/hoffman/rose-develop/src/frontend/SageIII/ompparser.yy" /* yacc.c:1646  */
    {
                    current_exp = SageBuilder::buildLshiftAssignOp(
                      (SgExpression*)((yyvsp[-2].ptype)),
                      (SgExpression*)((yyvsp[0].ptype))
                    ); 
                    (yyval.ptype) = current_exp;
                  }
#line 2715 "/home/hoffman/rose-develop/b/src/frontend/SageIII/ompparser.C" /* yacc.c:1646  */
    break;

  case 261:
#line 735 "/home/hoffman/rose-develop/src/frontend/SageIII/ompparser.yy" /* yacc.c:1646  */
    {
                    current_exp = SageBuilder::buildPlusAssignOp(
                      (SgExpression*)((yyvsp[-2].ptype)),
                      (SgExpression*)((yyvsp[0].ptype))
                    ); 
                    (yyval.ptype) = current_exp;
                  }
#line 2727 "/home/hoffman/rose-develop/b/src/frontend/SageIII/ompparser.C" /* yacc.c:1646  */
    break;

  case 262:
#line 742 "/home/hoffman/rose-develop/src/frontend/SageIII/ompparser.yy" /* yacc.c:1646  */
    {
                    current_exp = SageBuilder::buildMinusAssignOp(
                      (SgExpression*)((yyvsp[-2].ptype)),
                      (SgExpression*)((yyvsp[0].ptype))
                    ); 
                    (yyval.ptype) = current_exp;
                  }
#line 2739 "/home/hoffman/rose-develop/b/src/frontend/SageIII/ompparser.C" /* yacc.c:1646  */
    break;

  case 263:
#line 749 "/home/hoffman/rose-develop/src/frontend/SageIII/ompparser.yy" /* yacc.c:1646  */
    {
                    current_exp = SageBuilder::buildMultAssignOp(
                      (SgExpression*)((yyvsp[-2].ptype)),
                      (SgExpression*)((yyvsp[0].ptype))
                    ); 
                    (yyval.ptype) = current_exp;
                  }
#line 2751 "/home/hoffman/rose-develop/b/src/frontend/SageIII/ompparser.C" /* yacc.c:1646  */
    break;

  case 264:
#line 756 "/home/hoffman/rose-develop/src/frontend/SageIII/ompparser.yy" /* yacc.c:1646  */
    {
                    current_exp = SageBuilder::buildDivAssignOp(
                      (SgExpression*)((yyvsp[-2].ptype)),
                      (SgExpression*)((yyvsp[0].ptype))
                    ); 
                    (yyval.ptype) = current_exp;
                  }
#line 2763 "/home/hoffman/rose-develop/b/src/frontend/SageIII/ompparser.C" /* yacc.c:1646  */
    break;

  case 265:
#line 763 "/home/hoffman/rose-develop/src/frontend/SageIII/ompparser.yy" /* yacc.c:1646  */
    {
                    current_exp = SageBuilder::buildModAssignOp(
                      (SgExpression*)((yyvsp[-2].ptype)),
                      (SgExpression*)((yyvsp[0].ptype))
                    ); 
                    (yyval.ptype) = current_exp;
                  }
#line 2775 "/home/hoffman/rose-develop/b/src/frontend/SageIII/ompparser.C" /* yacc.c:1646  */
    break;

  case 266:
#line 770 "/home/hoffman/rose-develop/src/frontend/SageIII/ompparser.yy" /* yacc.c:1646  */
    {
                    current_exp = SageBuilder::buildAndAssignOp(
                      (SgExpression*)((yyvsp[-2].ptype)),
                      (SgExpression*)((yyvsp[0].ptype))
                    ); 
                    (yyval.ptype) = current_exp;
                  }
#line 2787 "/home/hoffman/rose-develop/b/src/frontend/SageIII/ompparser.C" /* yacc.c:1646  */
    break;

  case 267:
#line 777 "/home/hoffman/rose-develop/src/frontend/SageIII/ompparser.yy" /* yacc.c:1646  */
    {
                    current_exp = SageBuilder::buildXorAssignOp(
                      (SgExpression*)((yyvsp[-2].ptype)),
                      (SgExpression*)((yyvsp[0].ptype))
                    ); 
                    (yyval.ptype) = current_exp;
                  }
#line 2799 "/home/hoffman/rose-develop/b/src/frontend/SageIII/ompparser.C" /* yacc.c:1646  */
    break;

  case 268:
#line 784 "/home/hoffman/rose-develop/src/frontend/SageIII/ompparser.yy" /* yacc.c:1646  */
    {
                    current_exp = SageBuilder::buildIorAssignOp(
                      (SgExpression*)((yyvsp[-2].ptype)),
                      (SgExpression*)((yyvsp[0].ptype))
                    ); 
                    (yyval.ptype) = current_exp;
                  }
#line 2811 "/home/hoffman/rose-develop/b/src/frontend/SageIII/ompparser.C" /* yacc.c:1646  */
    break;

  case 269:
#line 793 "/home/hoffman/rose-develop/src/frontend/SageIII/ompparser.yy" /* yacc.c:1646  */
    {
                     current_exp = SageBuilder::buildConditionalExp(
                       (SgExpression*)((yyvsp[-4].ptype)),
                       (SgExpression*)((yyvsp[-2].ptype)),
                       (SgExpression*)((yyvsp[0].ptype))
                     );
                     (yyval.ptype) = current_exp;
                   }
#line 2824 "/home/hoffman/rose-develop/b/src/frontend/SageIII/ompparser.C" /* yacc.c:1646  */
    break;

  case 271:
#line 804 "/home/hoffman/rose-develop/src/frontend/SageIII/ompparser.yy" /* yacc.c:1646  */
    {
                    current_exp = SageBuilder::buildOrOp(
                      (SgExpression*)((yyvsp[-2].ptype)),
                      (SgExpression*)((yyvsp[0].ptype))
                    );
                    (yyval.ptype) = current_exp;
                  }
#line 2836 "/home/hoffman/rose-develop/b/src/frontend/SageIII/ompparser.C" /* yacc.c:1646  */
    break;

  case 273:
#line 814 "/home/hoffman/rose-develop/src/frontend/SageIII/ompparser.yy" /* yacc.c:1646  */
    {
                     current_exp = SageBuilder::buildAndOp(
                       (SgExpression*)((yyvsp[-2].ptype)),
                       (SgExpression*)((yyvsp[0].ptype))
                     );
                   (yyval.ptype) = current_exp;
                 }
#line 2848 "/home/hoffman/rose-develop/b/src/frontend/SageIII/ompparser.C" /* yacc.c:1646  */
    break;

  case 275:
#line 824 "/home/hoffman/rose-develop/src/frontend/SageIII/ompparser.yy" /* yacc.c:1646  */
    {
                      current_exp = SageBuilder::buildBitOrOp(
                        (SgExpression*)((yyvsp[-2].ptype)),
                        (SgExpression*)((yyvsp[0].ptype))
                      );
                      (yyval.ptype) = current_exp;
                    }
#line 2860 "/home/hoffman/rose-develop/b/src/frontend/SageIII/ompparser.C" /* yacc.c:1646  */
    break;

  case 277:
#line 834 "/home/hoffman/rose-develop/src/frontend/SageIII/ompparser.yy" /* yacc.c:1646  */
    {
                      current_exp = SageBuilder::buildBitXorOp(
                        (SgExpression*)((yyvsp[-2].ptype)),
                        (SgExpression*)((yyvsp[0].ptype))
                      );
                      (yyval.ptype) = current_exp;
                    }
#line 2872 "/home/hoffman/rose-develop/b/src/frontend/SageIII/ompparser.C" /* yacc.c:1646  */
    break;

  case 279:
#line 844 "/home/hoffman/rose-develop/src/frontend/SageIII/ompparser.yy" /* yacc.c:1646  */
    {
             current_exp = SageBuilder::buildBitAndOp(
               (SgExpression*)((yyvsp[-2].ptype)),
               (SgExpression*)((yyvsp[0].ptype))
             );
             (yyval.ptype) = current_exp;
           }
#line 2884 "/home/hoffman/rose-develop/b/src/frontend/SageIII/ompparser.C" /* yacc.c:1646  */
    break;

  case 281:
#line 854 "/home/hoffman/rose-develop/src/frontend/SageIII/ompparser.yy" /* yacc.c:1646  */
    {
                  current_exp = SageBuilder::buildEqualityOp(
                    (SgExpression*)((yyvsp[-2].ptype)),
                    (SgExpression*)((yyvsp[0].ptype))
                  ); 
                  (yyval.ptype) = current_exp;
                }
#line 2896 "/home/hoffman/rose-develop/b/src/frontend/SageIII/ompparser.C" /* yacc.c:1646  */
    break;

  case 282:
#line 861 "/home/hoffman/rose-develop/src/frontend/SageIII/ompparser.yy" /* yacc.c:1646  */
    {
                  current_exp = SageBuilder::buildNotEqualOp(
                    (SgExpression*)((yyvsp[-2].ptype)),
                    (SgExpression*)((yyvsp[0].ptype))
                  ); 
                  (yyval.ptype) = current_exp;
                }
#line 2908 "/home/hoffman/rose-develop/b/src/frontend/SageIII/ompparser.C" /* yacc.c:1646  */
    break;

  case 284:
#line 871 "/home/hoffman/rose-develop/src/frontend/SageIII/ompparser.yy" /* yacc.c:1646  */
    { 
                    current_exp = SageBuilder::buildLessThanOp(
                      (SgExpression*)((yyvsp[-2].ptype)),
                      (SgExpression*)((yyvsp[0].ptype))
                    ); 
                    (yyval.ptype) = current_exp; 
                  // std::cout<<"debug: buildLessThanOp():\n"<<current_exp->unparseToString()<<std::endl;
                  }
#line 2921 "/home/hoffman/rose-develop/b/src/frontend/SageIII/ompparser.C" /* yacc.c:1646  */
    break;

  case 285:
#line 879 "/home/hoffman/rose-develop/src/frontend/SageIII/ompparser.yy" /* yacc.c:1646  */
    {
                    current_exp = SageBuilder::buildGreaterThanOp(
                      (SgExpression*)((yyvsp[-2].ptype)),
                      (SgExpression*)((yyvsp[0].ptype))
                    ); 
                    (yyval.ptype) = current_exp; 
                  }
#line 2933 "/home/hoffman/rose-develop/b/src/frontend/SageIII/ompparser.C" /* yacc.c:1646  */
    break;

  case 286:
#line 886 "/home/hoffman/rose-develop/src/frontend/SageIII/ompparser.yy" /* yacc.c:1646  */
    {
                    current_exp = SageBuilder::buildLessOrEqualOp(
                      (SgExpression*)((yyvsp[-2].ptype)),
                      (SgExpression*)((yyvsp[0].ptype))
                    ); 
                    (yyval.ptype) = current_exp; 
                  }
#line 2945 "/home/hoffman/rose-develop/b/src/frontend/SageIII/ompparser.C" /* yacc.c:1646  */
    break;

  case 287:
#line 893 "/home/hoffman/rose-develop/src/frontend/SageIII/ompparser.yy" /* yacc.c:1646  */
    {
                    current_exp = SageBuilder::buildGreaterOrEqualOp(
                      (SgExpression*)((yyvsp[-2].ptype)),
                      (SgExpression*)((yyvsp[0].ptype))
                    );
                    (yyval.ptype) = current_exp; 
                  }
#line 2957 "/home/hoffman/rose-develop/b/src/frontend/SageIII/ompparser.C" /* yacc.c:1646  */
    break;

  case 289:
#line 903 "/home/hoffman/rose-develop/src/frontend/SageIII/ompparser.yy" /* yacc.c:1646  */
    {
               current_exp = SageBuilder::buildRshiftOp(
                 (SgExpression*)((yyvsp[-2].ptype)),
                 (SgExpression*)((yyvsp[0].ptype))
               ); 
               (yyval.ptype) = current_exp; 
             }
#line 2969 "/home/hoffman/rose-develop/b/src/frontend/SageIII/ompparser.C" /* yacc.c:1646  */
    break;

  case 290:
#line 910 "/home/hoffman/rose-develop/src/frontend/SageIII/ompparser.yy" /* yacc.c:1646  */
    {
               current_exp = SageBuilder::buildLshiftOp(
                 (SgExpression*)((yyvsp[-2].ptype)),
                 (SgExpression*)((yyvsp[0].ptype))
               ); 
               (yyval.ptype) = current_exp; 
             }
#line 2981 "/home/hoffman/rose-develop/b/src/frontend/SageIII/ompparser.C" /* yacc.c:1646  */
    break;

  case 292:
#line 920 "/home/hoffman/rose-develop/src/frontend/SageIII/ompparser.yy" /* yacc.c:1646  */
    {
                  current_exp = SageBuilder::buildAddOp(
                    (SgExpression*)((yyvsp[-2].ptype)),
                    (SgExpression*)((yyvsp[0].ptype))
                  ); 
                  (yyval.ptype) = current_exp; 
                }
#line 2993 "/home/hoffman/rose-develop/b/src/frontend/SageIII/ompparser.C" /* yacc.c:1646  */
    break;

  case 293:
#line 927 "/home/hoffman/rose-develop/src/frontend/SageIII/ompparser.yy" /* yacc.c:1646  */
    {
                  current_exp = SageBuilder::buildSubtractOp(
                    (SgExpression*)((yyvsp[-2].ptype)),
                    (SgExpression*)((yyvsp[0].ptype))
                  ); 
                  (yyval.ptype) = current_exp; 
                }
#line 3005 "/home/hoffman/rose-develop/b/src/frontend/SageIII/ompparser.C" /* yacc.c:1646  */
    break;

  case 295:
#line 937 "/home/hoffman/rose-develop/src/frontend/SageIII/ompparser.yy" /* yacc.c:1646  */
    {
                        current_exp = SageBuilder::buildMultiplyOp(
                          (SgExpression*)((yyvsp[-2].ptype)),
                          (SgExpression*)((yyvsp[0].ptype))
                        ); 
                        (yyval.ptype) = current_exp; 
                      }
#line 3017 "/home/hoffman/rose-develop/b/src/frontend/SageIII/ompparser.C" /* yacc.c:1646  */
    break;

  case 296:
#line 944 "/home/hoffman/rose-develop/src/frontend/SageIII/ompparser.yy" /* yacc.c:1646  */
    {
                        current_exp = SageBuilder::buildDivideOp(
                          (SgExpression*)((yyvsp[-2].ptype)),
                          (SgExpression*)((yyvsp[0].ptype))
                        ); 
                        (yyval.ptype) = current_exp; 
                      }
#line 3029 "/home/hoffman/rose-develop/b/src/frontend/SageIII/ompparser.C" /* yacc.c:1646  */
    break;

  case 297:
#line 951 "/home/hoffman/rose-develop/src/frontend/SageIII/ompparser.yy" /* yacc.c:1646  */
    {
                        current_exp = SageBuilder::buildModOp(
                          (SgExpression*)((yyvsp[-2].ptype)),
                          (SgExpression*)((yyvsp[0].ptype))
                        ); 
                        (yyval.ptype) = current_exp; 
                      }
#line 3041 "/home/hoffman/rose-develop/b/src/frontend/SageIII/ompparser.C" /* yacc.c:1646  */
    break;

  case 299:
#line 961 "/home/hoffman/rose-develop/src/frontend/SageIII/ompparser.yy" /* yacc.c:1646  */
    {
                 (yyval.ptype) = current_exp;
               }
#line 3049 "/home/hoffman/rose-develop/b/src/frontend/SageIII/ompparser.C" /* yacc.c:1646  */
    break;

  case 301:
#line 967 "/home/hoffman/rose-develop/src/frontend/SageIII/ompparser.yy" /* yacc.c:1646  */
    {
              current_exp = SageBuilder::buildPlusPlusOp(
                (SgExpression*)((yyvsp[0].ptype)),
                SgUnaryOp::prefix
              ); 
              (yyval.ptype) = current_exp; 
            }
#line 3061 "/home/hoffman/rose-develop/b/src/frontend/SageIII/ompparser.C" /* yacc.c:1646  */
    break;

  case 302:
#line 974 "/home/hoffman/rose-develop/src/frontend/SageIII/ompparser.yy" /* yacc.c:1646  */
    {
              current_exp = SageBuilder::buildPlusPlusOp(
                (SgExpression*)((yyvsp[-1].ptype)),
                SgUnaryOp::postfix
              ); 
              (yyval.ptype) = current_exp; 
            }
#line 3073 "/home/hoffman/rose-develop/b/src/frontend/SageIII/ompparser.C" /* yacc.c:1646  */
    break;

  case 303:
#line 981 "/home/hoffman/rose-develop/src/frontend/SageIII/ompparser.yy" /* yacc.c:1646  */
    {
              current_exp = SageBuilder::buildMinusMinusOp(
                (SgExpression*)((yyvsp[0].ptype)),
                SgUnaryOp::prefix
              ); 
              (yyval.ptype) = current_exp; 
            }
#line 3085 "/home/hoffman/rose-develop/b/src/frontend/SageIII/ompparser.C" /* yacc.c:1646  */
    break;

  case 304:
#line 988 "/home/hoffman/rose-develop/src/frontend/SageIII/ompparser.yy" /* yacc.c:1646  */
    {
              current_exp = SageBuilder::buildMinusMinusOp(
                (SgExpression*)((yyvsp[-1].ptype)),
                SgUnaryOp::postfix
              ); 
              (yyval.ptype) = current_exp; 
            }
#line 3097 "/home/hoffman/rose-develop/b/src/frontend/SageIII/ompparser.C" /* yacc.c:1646  */
    break;

  case 305:
#line 997 "/home/hoffman/rose-develop/src/frontend/SageIII/ompparser.yy" /* yacc.c:1646  */
    {
               current_exp = SageBuilder::buildIntVal((yyvsp[0].itype)); 
               (yyval.ptype) = current_exp; 
             }
#line 3106 "/home/hoffman/rose-develop/b/src/frontend/SageIII/ompparser.C" /* yacc.c:1646  */
    break;

  case 306:
#line 1001 "/home/hoffman/rose-develop/src/frontend/SageIII/ompparser.yy" /* yacc.c:1646  */
    { 
               current_exp = SageBuilder::buildVarRefExp(
                 (const char*)((yyvsp[0].stype)),SageInterface::getScope(gNode)
               ); 
               (yyval.ptype) = current_exp; 
             }
#line 3117 "/home/hoffman/rose-develop/b/src/frontend/SageIII/ompparser.C" /* yacc.c:1646  */
    break;

  case 307:
#line 1017 "/home/hoffman/rose-develop/src/frontend/SageIII/ompparser.yy" /* yacc.c:1646  */
    { if (!addVar((const char*)(yyvsp[0].stype))) YYABORT; }
#line 3123 "/home/hoffman/rose-develop/b/src/frontend/SageIII/ompparser.C" /* yacc.c:1646  */
    break;

  case 308:
#line 1018 "/home/hoffman/rose-develop/src/frontend/SageIII/ompparser.yy" /* yacc.c:1646  */
    { if (!addVar((const char*)(yyvsp[0].stype))) YYABORT; }
#line 3129 "/home/hoffman/rose-develop/b/src/frontend/SageIII/ompparser.C" /* yacc.c:1646  */
    break;

  case 311:
#line 1026 "/home/hoffman/rose-develop/src/frontend/SageIII/ompparser.yy" /* yacc.c:1646  */
    { if (!addVar((const char*)(yyvsp[0].stype))) YYABORT; }
#line 3135 "/home/hoffman/rose-develop/b/src/frontend/SageIII/ompparser.C" /* yacc.c:1646  */
    break;

  case 317:
#line 1037 "/home/hoffman/rose-develop/src/frontend/SageIII/ompparser.yy" /* yacc.c:1646  */
    {lower_exp = current_exp; }
#line 3141 "/home/hoffman/rose-develop/b/src/frontend/SageIII/ompparser.C" /* yacc.c:1646  */
    break;

  case 318:
#line 1038 "/home/hoffman/rose-develop/src/frontend/SageIII/ompparser.yy" /* yacc.c:1646  */
    { length_exp = current_exp;
                      assert (array_symbol != NULL);
                      SgType* t = array_symbol->get_type();
                      bool isPointer= (isSgPointerType(t) != NULL );
                      bool isArray= (isSgArrayType(t) != NULL);
                      if (!isPointer && ! isArray )
                      {
                        std::cerr<<"Error. ompparser.yy expects a pointer or array type."<<std::endl;
                        std::cerr<<"while seeing "<<t->class_name()<<std::endl;
                      }
                      ompattribute->array_dimensions[array_symbol].push_back( std::make_pair (lower_exp, length_exp));
                      }
#line 3158 "/home/hoffman/rose-develop/b/src/frontend/SageIII/ompparser.C" /* yacc.c:1646  */
    break;

  case 324:
#line 1062 "/home/hoffman/rose-develop/src/frontend/SageIII/ompparser.yy" /* yacc.c:1646  */
    { ompattribute->appendDistDataPolicy(array_symbol, e_duplicate, NULL); }
#line 3164 "/home/hoffman/rose-develop/b/src/frontend/SageIII/ompparser.C" /* yacc.c:1646  */
    break;

  case 325:
#line 1063 "/home/hoffman/rose-develop/src/frontend/SageIII/ompparser.yy" /* yacc.c:1646  */
    { ompattribute->appendDistDataPolicy(array_symbol, e_block, current_exp );  current_exp = NULL;}
#line 3170 "/home/hoffman/rose-develop/b/src/frontend/SageIII/ompparser.C" /* yacc.c:1646  */
    break;

  case 326:
#line 1064 "/home/hoffman/rose-develop/src/frontend/SageIII/ompparser.yy" /* yacc.c:1646  */
    { ompattribute->appendDistDataPolicy(array_symbol, e_cyclic, current_exp ); current_exp = NULL;}
#line 3176 "/home/hoffman/rose-develop/b/src/frontend/SageIII/ompparser.C" /* yacc.c:1646  */
    break;

  case 327:
#line 1067 "/home/hoffman/rose-develop/src/frontend/SageIII/ompparser.yy" /* yacc.c:1646  */
    {current_exp = NULL;}
#line 3182 "/home/hoffman/rose-develop/b/src/frontend/SageIII/ompparser.C" /* yacc.c:1646  */
    break;


#line 3186 "/home/hoffman/rose-develop/b/src/frontend/SageIII/ompparser.C" /* yacc.c:1646  */
      default: break;
    }
  /* User semantic actions sometimes alter yychar, and that requires
     that yytoken be updated with the new translation.  We take the
     approach of translating immediately before every use of yytoken.
     One alternative is translating here after every semantic action,
     but that translation would be missed if the semantic action invokes
     YYABORT, YYACCEPT, or YYERROR immediately after altering yychar or
     if it invokes YYBACKUP.  In the case of YYABORT or YYACCEPT, an
     incorrect destructor might then be invoked immediately.  In the
     case of YYERROR or YYBACKUP, subsequent parser actions might lead
     to an incorrect destructor call or verbose syntax error message
     before the lookahead is translated.  */
  YY_SYMBOL_PRINT ("-> $$ =", yyr1[yyn], &yyval, &yyloc);

  YYPOPSTACK (yylen);
  yylen = 0;
  YY_STACK_PRINT (yyss, yyssp);

  *++yyvsp = yyval;

  /* Now 'shift' the result of the reduction.  Determine what state
     that goes to, based on the state we popped back to and the rule
     number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTOKENS] + *yyssp;
  if (0 <= yystate && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTOKENS];

  goto yynewstate;


/*--------------------------------------.
| yyerrlab -- here on detecting error.  |
`--------------------------------------*/
yyerrlab:
  /* Make sure we have latest lookahead translation.  See comments at
     user semantic actions for why this is necessary.  */
  yytoken = yychar == YYEMPTY ? YYEMPTY : YYTRANSLATE (yychar);

  /* If not already recovering from an error, report this error.  */
  if (!yyerrstatus)
    {
      ++yynerrs;
#if ! YYERROR_VERBOSE
      yyerror (YY_("syntax error"));
#else
# define YYSYNTAX_ERROR yysyntax_error (&yymsg_alloc, &yymsg, \
                                        yyssp, yytoken)
      {
        char const *yymsgp = YY_("syntax error");
        int yysyntax_error_status;
        yysyntax_error_status = YYSYNTAX_ERROR;
        if (yysyntax_error_status == 0)
          yymsgp = yymsg;
        else if (yysyntax_error_status == 1)
          {
            if (yymsg != yymsgbuf)
              YYSTACK_FREE (yymsg);
            yymsg = (char *) YYSTACK_ALLOC (yymsg_alloc);
            if (!yymsg)
              {
                yymsg = yymsgbuf;
                yymsg_alloc = sizeof yymsgbuf;
                yysyntax_error_status = 2;
              }
            else
              {
                yysyntax_error_status = YYSYNTAX_ERROR;
                yymsgp = yymsg;
              }
          }
        yyerror (yymsgp);
        if (yysyntax_error_status == 2)
          goto yyexhaustedlab;
      }
# undef YYSYNTAX_ERROR
#endif
    }



  if (yyerrstatus == 3)
    {
      /* If just tried and failed to reuse lookahead token after an
         error, discard it.  */

      if (yychar <= YYEOF)
        {
          /* Return failure if at end of input.  */
          if (yychar == YYEOF)
            YYABORT;
        }
      else
        {
          yydestruct ("Error: discarding",
                      yytoken, &yylval);
          yychar = YYEMPTY;
        }
    }

  /* Else will try to reuse lookahead token after shifting the error
     token.  */
  goto yyerrlab1;


/*---------------------------------------------------.
| yyerrorlab -- error raised explicitly by YYERROR.  |
`---------------------------------------------------*/
yyerrorlab:

  /* Pacify compilers like GCC when the user code never invokes
     YYERROR and the label yyerrorlab therefore never appears in user
     code.  */
  if (/*CONSTCOND*/ 0)
     goto yyerrorlab;

  /* Do not reclaim the symbols of the rule whose action triggered
     this YYERROR.  */
  YYPOPSTACK (yylen);
  yylen = 0;
  YY_STACK_PRINT (yyss, yyssp);
  yystate = *yyssp;
  goto yyerrlab1;


/*-------------------------------------------------------------.
| yyerrlab1 -- common code for both syntax error and YYERROR.  |
`-------------------------------------------------------------*/
yyerrlab1:
  yyerrstatus = 3;      /* Each real token shifted decrements this.  */

  for (;;)
    {
      yyn = yypact[yystate];
      if (!yypact_value_is_default (yyn))
        {
          yyn += YYTERROR;
          if (0 <= yyn && yyn <= YYLAST && yycheck[yyn] == YYTERROR)
            {
              yyn = yytable[yyn];
              if (0 < yyn)
                break;
            }
        }

      /* Pop the current state because it cannot handle the error token.  */
      if (yyssp == yyss)
        YYABORT;


      yydestruct ("Error: popping",
                  yystos[yystate], yyvsp);
      YYPOPSTACK (1);
      yystate = *yyssp;
      YY_STACK_PRINT (yyss, yyssp);
    }

  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
  *++yyvsp = yylval;
  YY_IGNORE_MAYBE_UNINITIALIZED_END


  /* Shift the error token.  */
  YY_SYMBOL_PRINT ("Shifting", yystos[yyn], yyvsp, yylsp);

  yystate = yyn;
  goto yynewstate;


/*-------------------------------------.
| yyacceptlab -- YYACCEPT comes here.  |
`-------------------------------------*/
yyacceptlab:
  yyresult = 0;
  goto yyreturn;

/*-----------------------------------.
| yyabortlab -- YYABORT comes here.  |
`-----------------------------------*/
yyabortlab:
  yyresult = 1;
  goto yyreturn;

#if !defined yyoverflow || YYERROR_VERBOSE
/*-------------------------------------------------.
| yyexhaustedlab -- memory exhaustion comes here.  |
`-------------------------------------------------*/
yyexhaustedlab:
  yyerror (YY_("memory exhausted"));
  yyresult = 2;
  /* Fall through.  */
#endif

yyreturn:
  if (yychar != YYEMPTY)
    {
      /* Make sure we have latest lookahead translation.  See comments at
         user semantic actions for why this is necessary.  */
      yytoken = YYTRANSLATE (yychar);
      yydestruct ("Cleanup: discarding lookahead",
                  yytoken, &yylval);
    }
  /* Do not reclaim the symbols of the rule whose action triggered
     this YYABORT or YYACCEPT.  */
  YYPOPSTACK (yylen);
  YY_STACK_PRINT (yyss, yyssp);
  while (yyssp != yyss)
    {
      yydestruct ("Cleanup: popping",
                  yystos[*yyssp], yyvsp);
      YYPOPSTACK (1);
    }
#ifndef yyoverflow
  if (yyss != yyssa)
    YYSTACK_FREE (yyss);
#endif
#if YYERROR_VERBOSE
  if (yymsg != yymsgbuf)
    YYSTACK_FREE (yymsg);
#endif
  return yyresult;
}
#line 1071 "/home/hoffman/rose-develop/src/frontend/SageIII/ompparser.yy" /* yacc.c:1906  */

int yyerror(const char *s) {
    printf("%s!\n", s);
    return 0;
}


OmpAttribute* getParsedDirective() {
    return ompattribute;
}

void omp_parser_init(SgNode* aNode, const char* str) {
    omp_lexer_init(str);
    gNode = aNode;
}

static bool addVar(const char* var)  {
    array_symbol = ompattribute->addVariable(omptype,var);
    return true;
}

// The ROSE's string-based AST construction is not stable,
// pass real expressions as SgExpression, Liao
static bool addExpression(const char* expr) {
    // ompattribute->addExpression(omptype,std::string(expr),NULL);
    // std::cout<<"debug: current expression is:"<<current_exp->unparseToString()<<std::endl;
    assert (current_exp != NULL);
    ompattribute->addExpression(omptype,std::string(expr),current_exp);
    return true;
}

